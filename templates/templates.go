// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x83\xc9\xd9\x22\x39\x2e\x8a\x60\x59\xf6\xba\x2c\x69\xe9\x5d\xb1\xc6\x91\xa8\x2c\x1b\x69\x1c\x28\x42\xff\xbd\x48\x76\x88\xdb\xb4\x21\x87\xfa\x64\xe6\x8d\xdf\x9b\xf9\x2c\xc5\x48\xd8\x8f\x56\x12\x42\x7d\x94\x01\x99\x46\xa9\x6a\x68\x52\xaa\x2a\xae\xb7\xe2\x8f\x96\x43\x80\x7e\x70\xaf\xf8\xc6\x99\xde\x8a\xaa\xe2\xa3\xa8\x00\x00\xd6\x12\x98\x00\x31\x36\xa5\xd4\x3c\x91\x24\x4c\xa9\x29\x5d\x31\x9a\x0e\x16\xe1\x77\x4b\xe6\x8c\x29\x15\x21\x3f\x5c\x82\xf6\xd8\xed\x6b\xd6\xe6\x06\x36\xca\x29\x60\x0d\xad\x95\x21\xec\xeb\xc9\x40\x6f\x9c\x01\x6f\x4e\x9a\xa0\xb3\x83\x24\x54\x70\x9c\x88\x06\x57\x8b\xff\xb9\x97\x33\x29\x96\x18\xb4\xe1\x9e\xb5\xc7\x30\xf5\x8f\x7a\x1f\x4a\xf3\xda\xdc\xa9\x94\x2a\xce\xc6\xbc\xbf\xde\x89\xbc\xa2\x09\x64\xda\xc0\x99\xde\xe5\x22\xc9\xa3\xc5\x95\x7b\x8b\xd6\xa2\x82\x40\xde\x8c\xa8\xa0\xc8\xf5\x6c\xc7\x29\x43\xbe\xbc\x7b\x71\x9d\x99\xf4\xd5\x99\x33\xd2\x1f\xa5\x17\x69\x27\xbc\x96\x39\xbb\x7c\x9b\x6b\xc5\x31\x46\xf0\xd2\x9d\x10\x36\x81\xe0\xd7\x1e\x56\x3f\x64\x9e\x16\x16\x42\x9f\x62\x95\x88\x71\x13\xa8\xf9\x27\x7b\x4c\x89\x33\x52\x5f\xa9\x25\x7f\x2d\xcf\x13\xc4\x08\xe8\x14\x14\x3e\x65\xcd\x85\xd1\x01\x5b\x74\x04\x05\xff\x4f\x53\x7a\x36\x3d\xde\x02\xca\xe7\x6b\x70\x0f\x12\xc2\x15\xa0\xbf\x67\x74\x74\x17\x0e\x36\x39\xf2\x1b\x36\xd8\xcc\xc9\x8f\xb1\xb9\xb9\x72\xdd\x30\x10\xfa\x72\xe9\xde\x03\x00\x00\xff\xff\x80\xb0\x0c\xf4\x8f\x03\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 911, mode: os.FileMode(420), modTime: time.Unix(1486047848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xdf\x4f\xa3\x40\x10\x7e\xef\x5f\x31\x21\x7d\x3d\x36\xfa\x68\x28\x89\x67\xcf\x68\x4e\xef\x4c\xd5\xdc\xf3\x16\xa6\x65\x13\x60\xc9\xee\x60\xee\xb2\xe1\x7f\xbf\xec\xb2\x54\x28\xd8\x60\x52\x7d\xc2\xf9\xd5\x99\xef\x9b\xf9\xc0\x18\xc2\xa2\xca\x39\x21\x04\x5b\xae\x91\x65\xc8\xd3\x00\xc2\xa6\x59\x2c\xa2\xec\x22\xfe\x83\x79\x22\x0b\x04\x92\xf0\x82\x9a\xae\xf7\x58\x52\xc4\xb2\x8b\x78\x11\x55\xf1\xe2\x7e\x7d\x05\xc6\x84\xf7\xeb\xa6\x59\x44\x5b\xc5\xe2\xc5\x6b\xe5\x2c\xaf\x15\x89\x02\xad\x95\x55\xb1\xad\x74\x19\xdf\xe4\xb5\x26\x54\x11\xcb\x2e\xad\x85\xf8\x36\x47\x48\x72\xae\xf5\x2a\xa8\x05\x24\x98\xe7\x98\x82\x26\x25\x2a\x4c\xc1\xb9\x83\x78\x01\x00\x10\x91\x6d\xaa\x7b\x56\xed\x83\x77\xc4\xf7\xeb\x88\x51\x36\xb4\xdd\x28\xe4\x84\x29\x7b\x26\xae\x08\xd3\x88\x51\x3a\x0c\xf0\x63\x8c\xf2\xa4\x54\xa9\x28\x39\x49\x35\x76\xae\xbf\x3f\xa3\x7a\xc3\x9e\x27\x62\x5d\x33\xd6\xe6\x5a\x34\x06\x14\x2f\xf7\x08\xcb\x02\xae\x56\x10\x3e\xf2\x24\x13\x25\x6a\x68\x9a\xa9\xf6\x7b\x6d\xd9\x3f\x63\x96\x45\x0b\x66\xdf\x1a\x71\xc8\x14\xee\x56\x01\xcb\xe5\x5e\xb3\x43\x10\x2b\xda\xe2\x01\x90\xa0\x1c\x57\xc1\x83\xdc\xeb\x20\x8e\x44\x87\xea\x4e\xe4\x08\x84\x7f\x09\x64\x4d\xb9\x28\x11\x44\x22\xcb\x20\x8e\x98\x88\x23\xc6\x7b\x8d\x1c\x01\x34\xd5\x96\xc7\xf4\x9a\x8e\xba\x63\xe3\x50\x0f\xfb\x20\x74\xf8\x13\xc6\x88\x1d\x2c\x8b\xf0\x8e\x6b\x47\x45\x3f\x90\xd2\xae\x7f\x63\x20\xd1\x7a\x83\x3c\xfd\x67\x83\x1f\xb8\xdf\x3f\x67\x79\x26\x4e\xb5\xc5\x35\x88\x27\xd1\x32\xc6\xe6\xb8\xf8\xd7\xcd\x03\x34\x4d\x47\x3a\x9f\x8e\x1f\xa1\xcb\x6d\xf8\xb9\xb1\x35\x06\x73\x8d\xc3\x71\xe3\x6f\xa3\x98\x32\x9d\x8d\x48\x6f\x67\x3f\x81\x4b\x2f\xcb\xa3\x33\xd8\xfd\xb9\x18\x25\xef\x49\x5f\xb0\x85\x27\xa6\xee\x8e\xf1\x13\x23\x77\x29\x7e\xde\xf7\x73\x9e\x3b\x6c\xba\xd5\x2e\xe3\x9c\x93\xb6\x12\x62\x0c\x60\x99\x82\x93\x4b\x27\x7c\x5e\x32\xad\xe2\xea\x73\x0b\xe6\x2f\x5e\xe0\x58\xdd\x2c\x86\x13\xe6\xeb\x84\x84\x2c\xf5\x4c\xcd\x23\xa7\x79\xae\xeb\x9e\xe0\x0d\x69\xb4\xde\xdf\x3f\x61\x49\xe1\x2d\x17\x79\xad\xf0\x88\x38\x7b\x10\x07\x0a\x08\x35\x59\x06\x28\xb4\x5d\xdb\xb8\xde\x3f\x63\xd5\x72\xce\xae\x6c\xd3\xc0\xce\x3f\x7e\x10\xe9\x87\xeb\x57\x3a\xcd\xc7\xed\xa1\xde\x79\x29\x79\x11\x53\x94\x3c\xa2\xd6\x7c\x3f\xe1\xd8\x60\x25\x15\xcd\xe4\x44\x39\x4e\xda\x94\x8f\x5f\x43\xc6\x2c\x55\xf8\x22\x3e\x84\x55\x85\xbe\x9b\x29\xff\x81\x2e\x17\x78\xb7\xc1\x9d\x67\x4a\x85\x4f\x9c\x32\x9b\xc2\xe3\xb9\x18\x6f\x30\xc1\x92\x20\xc9\xb8\xf4\x38\xdb\x0f\x0d\x9b\xd7\x9e\xb9\xfb\xbc\xb8\xb1\xde\xd0\xed\xac\x9f\xc8\xbd\x51\xbc\xdd\xf2\xfa\x36\x10\xd9\xc3\x49\xbb\xb2\xac\xe2\xb5\xc6\xa0\x47\x5c\x21\x4a\x01\x4a\xec\x33\x82\x5d\x2e\xed\x7b\x0e\xb6\x35\x91\x3d\xde\x27\x1b\x7b\xb8\xde\xb1\x7e\x1f\x95\x56\xa8\xeb\x62\x6e\xed\x8d\x0b\xee\x17\x3f\x08\x7f\xfb\x35\x35\xf1\x0b\x41\xbc\x46\xe2\x22\xd7\x2e\xcd\x7f\x5e\x7d\xed\x22\xb6\x77\x32\x73\xdf\xd0\xed\x5b\x4b\xc4\x8f\x37\x2c\x4f\x2f\x1d\x9e\x5a\x3a\xf4\x17\x3a\xef\x40\x47\x5f\xb2\x3b\x29\xc9\xaa\x75\xd8\x34\xff\x03\x00\x00\xff\xff\x3b\x27\x91\x27\xe6\x0a\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 2790, mode: os.FileMode(420), modTime: time.Unix(1486369251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\x31\x0a\xc3\x30\x0c\x85\xe1\x3d\xa7\x78\x63\x0b\xae\x31\x81\x2c\xed\x69\x94\x44\x15\x25\x41\x02\xc5\x19\x4a\xe8\xdd\x8b\xa9\x0d\x5d\x32\x49\xc3\xf7\xbf\xe8\x4c\xf3\x3b\xe0\x77\x41\x38\x30\xd9\x6a\x7e\x87\x38\xb3\x3e\xf0\xe9\xa2\x5a\x6e\xaa\xbd\xff\xd0\x9c\x54\xb8\xc8\x2e\x66\xde\xb2\x2d\x38\x30\xd2\xb4\x88\xdb\xae\xf3\xad\x32\x97\x91\x2e\x29\xf4\xc3\x10\x52\x48\xb1\xbf\x96\xe9\xe2\x9f\xf4\x5a\x77\xe7\xed\xbc\xaa\x4d\xab\xbe\x01\x00\x00\xff\xff\x74\xca\x77\x00\xb4\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 180, mode: os.FileMode(420), modTime: time.Unix(1486368821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x99\x5b\x6f\x23\xc7\x11\x85\x9f\x39\xbf\x62\x2c\xc0\x06\x19\x28\xd2\xdc\x2f\x02\xf6\xc5\x37\xc4\x0f\xb1\x81\x64\xf3\x94\x0e\x8c\x9e\x99\x6e\x99\x08\x45\x2a\x24\xe5\xf4\xee\x62\xff\x7b\xf0\x75\xd5\x50\x94\x56\xbe\x2d\x16\xc8\x03\x45\x72\x38\xdd\x5d\x97\x53\xe7\x54\x8d\xae\xaf\xd3\xaf\x76\x93\x4b\x6f\xdd\xd6\xed\xed\xd1\x4d\xe9\xf0\x26\xbd\xdd\xfd\x79\x58\x6f\x27\x7b\xb4\x57\xc9\xf5\x75\x7a\xd8\x3d\xec\x47\x77\xb8\xe1\xf3\xd1\xdd\xdd\x6f\xec\xd1\x1d\xae\x07\x7b\x70\xd7\x7e\xb7\x3b\xba\xfd\xd5\xf1\xee\x7e\xf3\xc2\xaf\x3f\x39\x3b\xbd\xf0\xdb\xf8\x93\xdd\x1d\x5e\xb8\xbe\xde\x4e\x2e\xbc\x70\xfd\xfe\x61\xd8\xac\xc7\xeb\xc3\xf1\xcd\xc6\x5d\x8d\x87\xc3\xd3\x5f\x4f\x9f\xae\x6e\x77\xcf\x7f\x39\x1c\x4f\xdb\x7d\xfd\x43\xfa\xfd\x0f\xaf\xd3\x6f\xbe\xfe\xee\xf5\x67\x49\x72\x6f\xc7\x7f\xdb\x5b\xf7\x78\x73\x92\xac\xef\xee\x77\xfb\x63\xba\x4c\x16\x17\xc3\x9b\xa3\x3b\x5c\x24\x8b\x8b\x71\x77\x77\xbf\x77\x87\xc3\xf5\xed\xdb\xf5\x3d\x17\xfc\xdd\x91\xb7\xf5\x4e\xfe\x5e\xaf\x77\x0f\xc7\xf5\x86\x2f\xbb\xb8\xe0\xde\x1e\x7f\xba\xf6\xeb\x8d\xe3\x03\x17\x0e\xc7\xfd\x7a\x7b\x1b\x7f\x3b\xae\xef\xdc\x45\xb2\x4a\x12\xff\xb0\x1d\x53\x0d\xf0\xdf\x9c\x9d\x96\x7c\x48\xff\xf9\x2f\x8e\xbd\x4c\xb7\xf6\xce\xa5\xb2\x6c\x95\x2e\xe7\xab\x6e\xbf\xdf\xed\x57\xe9\xbb\x64\x71\xfb\x36\x7e\x4b\x6f\x5e\xa5\x58\x75\xf5\xbd\xfb\x2f\x9b\xb8\xfd\x32\x9a\xcd\xf7\x2f\x1f\xbc\x77\xfb\xb8\xed\x6a\x95\x2c\xd6\x3e\x2e\xf8\xec\x55\xba\x5d\x6f\xd8\x62\xb1\x77\xc7\x87\xfd\x96\xaf\x97\xa9\xbf\x3b\x5e\x7d\xc3\xee\x7e\x79\xc1\x46\xe9\xe7\xff\xb9\x49\x3f\xff\xf9\x42\x2c\x89\x67\xad\x92\xc5\xfb\x24\x59\xfc\x6c\xf7\xe9\xf0\xe0\x53\x39\x47\x0e\x49\x16\x3f\x8a\x39\xaf\xd2\xf5\xee\xea\xab\xdd\xfd\x9b\xe5\x17\xc3\x83\xbf\x4c\x6f\xdf\xae\x92\xc5\xb8\xf9\x66\xb6\xf4\xea\xab\xcd\xee\xe0\x96\xab\xe4\x53\xd9\xc3\x36\xb2\xff\x2f\x6c\xe4\xf6\x7b\xb1\x5b\x2f\x0e\x0f\xfe\xea\x4b\x4c\x5f\xae\x2e\xb9\x23\x79\x9f\x24\xc7\x37\xf7\x2e\xb5\x87\x83\x3b\x12\xf2\x87\xf1\xc8\x2e\xd1\x3f\xcd\x47\xb2\x58\x6f\xfd\x2e\x4d\x77\x87\xab\x6f\xd7\x1b\xf7\xdd\xd6\xef\x4e\xeb\x34\x85\xf3\xf5\xb3\x1d\x62\x0e\xd3\x54\xd3\x98\x2c\x0e\xeb\xb7\xf1\xfb\x7a\x7b\x6c\xaa\x64\x71\x47\xc5\xa5\xa7\x4d\xff\xba\x9b\x5c\xbc\xf8\x7a\x7d\xe7\x52\x60\x72\xc5\x27\xce\x89\x50\x59\xfa\xf5\xf3\xb3\x56\xe9\xf7\xf6\xce\x2d\x57\x7a\x02\x67\xaa\x97\x7e\x7d\xc5\xe9\xc9\xfb\x5f\x59\xfb\xf7\xf5\x5b\xd6\x46\x6b\x9e\x2e\xc5\xd0\x5f\x5d\x8a\xad\xcb\xd5\xb9\xe5\x4f\x37\xc0\xb5\xdf\xda\x00\xe7\x96\xab\x47\x47\x3f\xd8\x41\xbd\xff\xe5\x4d\xbe\x3b\x7c\xbd\xde\x2f\x57\xe9\xb0\xdb\x6d\xce\x57\xdb\xcd\xe1\x37\x3c\x7f\x73\x10\xc7\xdd\xde\xdb\xd1\xbd\x7b\x7f\xb6\x5a\x21\x01\xca\x7f\x84\xbe\xbe\x8d\xdc\xf6\xfa\xee\x7e\x93\xbe\x52\x34\x2c\x2f\x4c\xc8\xbd\x09\xdd\x60\x42\xd6\x99\x90\x65\xfa\xea\x4d\x68\x9c\x09\x9d\x5e\xf3\xde\x84\xa1\x30\x61\xca\x4d\xa8\xbc\x09\x63\x6f\x42\x31\x9a\x30\x94\x26\xb8\xf2\xd9\x6f\x56\xde\x6d\x6f\x42\x56\xc9\xf5\x9c\xfb\x6b\x13\x86\xde\x84\xb2\x37\xa1\x6d\x4c\xe8\xb2\xb3\xf3\xf4\x0c\x5e\x45\x6b\x82\x9d\xf4\x77\x6f\x42\xde\x9c\xdf\x77\x71\xe2\x9b\x27\x1e\x69\x1d\xbc\xc4\x2f\x73\xb5\x9c\xf1\x53\xb2\x58\x3c\x8b\xc8\x65\xb2\x58\x5c\x3c\x57\x80\x8b\xcb\x64\xb1\x3a\xa1\xf6\xe9\x02\xce\xfa\x53\x2c\xb4\xf3\xb3\x62\xa5\x9d\xe8\xec\x45\x13\x7f\x8b\x2e\x4e\x55\x1e\xeb\x94\x5d\x9e\xe6\xfc\x1d\xd5\x70\x93\xbe\x60\x6c\x0a\xd8\x6f\xd2\xa2\xb8\x4c\x41\xed\xcd\x39\xa8\x97\x55\x91\xad\xe2\x75\xb0\x78\x23\x58\xfd\xc7\x76\x1d\x96\x79\xd5\xd5\x6d\x57\x16\x45\x7d\x99\x66\xab\xf7\xc9\xc2\x72\xe8\x17\xd1\xb5\x77\xd1\x9f\x9b\x54\xdd\xc2\xa2\x9b\xf8\xf7\xfd\x29\xac\xf6\xf2\x03\x9c\xfd\xc5\xd9\xe9\xa3\x51\xd6\x8f\x26\x8c\xde\x84\x32\x37\xa1\xb1\x26\x8c\xb5\x09\x25\xf7\x8e\x26\x64\x8d\x09\x2e\x33\x61\x9a\x4c\xb0\xad\x09\x39\x9f\x9d\x09\xcd\x60\xc2\x08\xca\x06\x13\x4a\x6b\x42\x5e\x99\x30\xb6\x26\xb4\xad\x09\x3e\x37\xa1\x2f\x4d\xa8\x6b\x13\xec\x68\xc2\x54\x99\xd0\xe6\x26\x74\x85\x09\xb6\x16\x84\xb6\x85\x09\x7e\x30\x61\xe2\x5a\x65\xc2\x00\x6a\x33\x13\x86\xdc\x04\x5b\x9a\x50\x54\x26\x78\x5e\x93\x09\x7e\x94\xeb\x93\x95\xfb\xfb\x42\xfc\xea\x6b\x13\xda\xd2\x84\x0a\xd4\x3b\x13\x8a\xcc\x84\x12\x7b\x7b\xf1\xbd\xc6\x87\xd6\x84\xc1\x4b\x75\xe4\xce\x84\xa1\x95\x3d\xa7\xde\x84\xae\x92\x7b\xdc\x64\x42\x33\x9a\x90\x8f\x26\x54\x9d\x09\x53\x6d\xc2\x58\x8a\xdf\xec\xe7\x7b\xf1\x77\x6a\xa4\xd2\xe2\xbd\xce\x84\xd6\xcb\xcb\x3b\x13\x7a\xf6\xe6\x5d\x63\x38\xcc\x76\x0c\x26\x14\x85\xd8\xca\x9a\xa6\x31\xa1\xe0\xfc\xd1\x04\x57\x99\x90\x77\x26\xd8\x5c\xaa\x9a\x77\xaf\xfe\x0d\x83\xe4\x6a\x98\x4c\x70\xa3\xc4\xae\xe3\xac\x4c\xf2\x69\xc9\x17\xb9\x1b\x4c\x18\x32\xb1\x1b\x3f\x5d\x61\x42\xe1\x4c\xa8\x47\x13\x9a\xde\x84\xb1\x93\x33\x6d\x66\x42\x57\x8a\xad\xec\x33\xb2\xaf\x35\xa1\x2e\x4d\x18\x89\xc3\x60\x42\x65\x65\x2d\x7b\x90\x6f\x7c\x2f\x9d\x09\x53\x2b\xf9\x6a\xb1\xbf\x16\xdc\xb0\x06\xbf\x88\x2f\x31\x1c\x07\x13\xac\x95\xbc\x4f\xde\x84\xac\x36\xa1\xe9\x24\xb6\x7d\x23\x79\xf7\xa5\xd8\x0f\x93\xb5\x93\x60\xeb\x39\x13\xe1\xef\x58\x98\x50\x37\x26\xd4\x93\x9e\x91\xbf\xc8\x44\x33\xe6\x3f\x8e\x87\xe6\xd5\x8f\x2c\x74\xea\x34\x3f\xe4\xa0\xf9\xe6\xdf\xcb\x40\xcf\x4c\xfb\xa4\xfc\x73\x66\xe6\xcc\x3e\x7d\xf6\x7f\xa4\x9f\xd8\x89\x7f\x34\xf7\xc0\x0f\x60\xa6\xca\xa5\xc6\x50\x36\xb8\x07\x9e\xe9\x6a\x13\x9c\xd6\x57\x5e\x0b\x7e\xc1\x0e\xb5\x0b\x2e\x50\x35\xf0\xda\x51\x93\x99\x09\x75\x6f\x82\x6f\x4c\x18\xac\x28\x25\xf8\xa7\x06\xc1\x11\xfc\x31\x36\x52\x9f\xb6\x93\xdf\xa9\x4d\xee\xa1\xee\x8b\xce\x84\xaa\x78\xc4\x20\xf5\x14\x15\x13\x3e\x18\x84\x9f\x0a\x38\x0c\xfe\xe0\xbc\xca\x04\xc7\xef\x93\xe0\x9d\x3a\xf4\xaa\xd0\xf0\x67\xe4\x91\x4e\x6a\x0d\x2c\xe7\x85\xec\x0f\xee\xfb\x4a\x30\xdd\xf7\x26\x54\x8d\xa8\x36\x9c\x41\xbd\xd4\x85\xd4\x51\x61\x4d\xb0\xca\x57\x4e\x6b\x9f\x3a\xaa\x4a\x51\x69\x6a\xb1\xcd\x84\x07\x7c\xa7\xbe\xf5\xc2\xcd\xc4\x83\x3d\x58\x07\x97\xda\xb3\x1c\x4c\x6a\x4b\xaf\xd7\xe0\xfc\x52\xeb\x13\x9e\x2e\x47\x89\x11\xfc\x5b\x8d\x62\x5b\xa1\x31\xe4\xde\xde\x0a\xd7\xd2\x21\xb8\x5c\xf8\xbe\x1a\x34\x16\xa3\xdc\x4b\xae\x88\x15\xfc\x54\x2b\x77\x91\x97\x49\xf9\x60\xe6\x52\xd6\xc0\x01\xa5\xf2\x2a\x6b\xc9\x63\x36\x49\x37\xd2\xeb\x3e\xf0\x9f\x1b\x24\xf7\x55\x66\x42\xa3\x9a\x45\x0c\xf9\x5c\x39\xb1\x0b\x8e\x83\x47\x3b\xd5\x8f\xba\x92\x18\x71\x6f\xc4\x1c\x9c\xd2\x0a\x2e\x63\x9e\x7b\x13\xfa\xd6\x84\xb2\x94\xb3\x89\x2f\x7c\x4c\xae\xf1\x2d\x72\x7a\x2d\xba\x06\x26\x7d\x2d\x79\x68\xad\xe0\x1b\xbe\x84\xd3\xa2\x2e\x69\xac\xc8\x2d\xb9\x1b\x9d\xe4\x64\x18\x85\x97\x63\x5e\x7a\xf9\x6e\x0b\xad\x85\x4a\xd6\x8e\xd9\x63\xee\x5c\x2d\xd8\xc6\x57\x72\x07\x96\xa2\xce\x0d\x62\x37\x71\x63\x3d\x31\xad\x54\x8b\x89\x3b\x39\xc6\x7f\xf8\x1e\x3b\xd1\x28\xec\xc6\x2f\x30\x83\x36\x71\x36\xfb\xa0\xc5\xfd\x24\x67\xa2\xb1\xe8\x1d\x9f\x89\x03\xfa\x8a\x6f\xe0\x21\x6f\xa5\x3e\xe8\x0e\x59\x4b\x7c\xa8\x39\xb4\xa9\x1d\x05\xf3\xb1\x0f\xa8\x05\x1b\x60\x19\x7e\x8f\x1a\x3d\x49\x0d\x93\xdb\x2e\xd7\x1e\xa2\x15\x0d\xa4\x1e\xc0\x06\xfe\xf7\x8a\x25\x5e\xd4\x47\xcf\x75\xd5\x4b\x72\x86\xad\xb9\x62\xd8\xab\x2d\xf8\x00\x36\x3b\xb5\x99\x9a\xa9\xb5\xfb\xa5\xe3\x45\x93\xd1\x58\x7a\x9a\x5c\xf5\x0d\x1e\x72\x9d\xf4\x29\xbc\x4a\xd5\x32\x74\x10\x9e\xa1\x63\x06\x4f\xe8\x60\x5b\x49\x8f\x82\x86\x79\xed\x1d\xd0\x49\xf2\x1e\x35\x71\x92\xb8\x67\x85\xe0\xd6\xb5\x12\x87\x76\xee\x9e\x0b\xd1\x30\xea\x20\x62\x12\x9f\x5a\xd9\x97\x17\x71\xa5\x86\x4a\x8d\x27\x9a\x1f\xfb\x28\xad\x91\x71\x94\xfc\x83\x35\x78\x0b\x9c\xf2\x6a\x67\x5d\x56\x7e\x84\x87\xb8\xe6\x14\x3b\x59\xf9\xa1\x9e\xc2\x15\x83\xf6\x72\xe4\x9a\x3d\x1f\xef\x3b\xe9\xe9\x89\xc4\xff\xb8\x98\x9e\x96\x46\x25\x7d\x7c\x2e\xf3\x54\x45\x4f\x77\xfd\x1e\x09\x7d\x6e\xcd\xa7\xd2\xcf\x73\xe3\x54\x3b\xfb\x3c\xff\xa3\xda\xd9\x64\x55\xdb\x55\xdd\xa7\xd0\xce\xf8\xb4\xea\xe3\xa7\xc3\x4a\x6a\x69\x52\x8c\xc2\x17\x95\x62\x03\x7d\x40\x3b\x6b\xed\xeb\xe1\x51\xb4\xa7\xd4\xbe\xce\xab\xde\xa0\x7b\xd4\x11\xf8\xa4\x5e\xb8\x56\xe9\x5a\x6a\x0c\x6e\x80\xdb\xe0\x39\x6a\xd4\x36\x52\x37\xd4\x55\xa3\xbd\x9c\x73\xf2\x99\x77\xa6\xd2\xa8\x0b\x5e\xfb\xd1\x51\xae\xc1\xc5\x85\x6a\x62\xd4\x6a\xd5\x42\xea\x84\xba\x9e\x39\xc8\x9d\x69\x29\xbc\x08\x1f\x73\x8f\xd5\x5a\x8b\x9a\x9f\x4b\x7d\x52\xab\x76\xee\xb9\x6b\xe1\xbe\x49\xb1\x1d\xd7\x34\xd2\x13\x14\xca\xb9\xd8\x02\xb7\xc6\x1e\x98\x7a\xd6\x3e\x22\x1b\x64\x3f\xfa\x6e\xf8\x0b\x6e\xed\x55\x7f\x3d\xfd\xad\xea\x32\x3c\x32\xe8\xec\xd1\xc2\x25\xb9\xcc\x38\xcc\x3b\x4e\xfb\xe3\xd8\xd7\xd6\xc2\xfd\xcc\x17\xac\x47\xbb\x66\x5b\x2a\xb5\x1b\xce\x64\x0d\xef\xb1\xef\xa9\xd5\x4e\xaf\xbd\x4e\x2f\xfc\x32\xeb\x20\xe7\xc4\xd9\x68\x52\x0e\xe9\x25\xef\xcc\x10\x68\x54\xd1\x48\x8c\xb1\x89\x5e\x9c\xbe\xc8\x2a\xb7\xd1\x1f\x90\xf3\xaa\xd5\xbe\xa6\x50\xdf\x6a\xed\x33\x3a\xb1\x19\xcd\xa4\x2f\x80\xcf\x78\x27\x0e\xec\x5b\xe8\x7d\xe0\x61\x54\x3e\x8a\xf1\xeb\x1e\x7b\x73\x30\x17\xf3\x30\x49\xef\x01\x47\x83\x4d\xf4\x3e\xde\xdb\x4a\xfc\xe6\x78\x80\xe3\x5a\x7b\x8f\x38\xfb\x4d\x82\x0f\xfc\x21\x6e\xe8\x16\x7b\x70\x3e\xb6\x66\x9a\xdb\xd3\x3a\xab\x9c\x46\x3f\x50\x8a\x06\x7a\x9d\x25\x89\x43\xd4\x82\x4e\xf0\xc2\x7c\x58\xd6\xd2\xcf\xc5\x9e\x4a\x67\x27\xab\x9c\xce\xac\x87\x0e\xa1\x2d\x68\x4f\xec\x75\xca\xc7\x1e\xa5\x06\x77\x95\xf4\x0f\x68\x47\xe1\xc5\x0f\x6c\x22\xd6\x99\xc6\x33\xf6\x79\x99\x68\x0b\xb6\x10\x4f\xea\x84\xf8\xcd\xfd\x5d\xc4\x95\xf6\xa9\xf8\xd7\xe8\x2c\x1a\xf5\xb0\xd4\x1e\xaf\x16\x4c\x36\x5a\xdb\xb9\x15\x1d\x1c\x55\xbf\x9c\x9e\x95\x69\xae\xc1\x4e\xed\xa4\xf7\x41\xeb\xb1\xa1\x18\xa4\xb7\x70\x3a\x3f\xf5\x99\x68\x11\xbd\x2e\x3d\x10\x79\x24\x2f\x93\xf6\x56\xcc\xce\x9d\x13\x7c\xd2\xe3\x32\x1b\x46\x1e\x50\xed\x24\x27\xd4\xf4\xdc\xb7\x54\x93\xe0\xa0\xd0\x3a\xa8\x74\x1e\x1c\xcf\xf6\x8a\x18\x82\x63\x4a\xa9\x87\xd8\xc3\x4c\x62\x03\x36\x95\x73\xef\xd1\x48\xaf\x82\x3e\x11\x1f\xd6\xd2\xc3\x37\xfa\xa4\xab\x56\x5d\xf5\xba\x37\xf8\x07\xd3\xb9\xee\xcb\x19\xf9\x24\xf5\x13\x7b\x3b\x3d\x9f\xba\x8a\x98\xaf\x75\x56\xd6\xde\xc4\xea\xec\xce\xfe\xec\x87\xf6\x83\x03\xe2\x41\xff\xeb\x27\xe1\x43\xbe\xc3\xc5\x43\x27\x79\x28\x67\x1d\xef\x05\x97\xd5\xdc\x1f\xd6\x82\xaf\xe8\x6b\x2b\xfb\x95\x85\xd8\x06\x7e\x58\x8f\xbd\xf4\x3f\xf4\x1b\xe8\x6f\xa9\x31\xc4\x3e\xb0\x4c\xdf\x83\xcd\xb1\xf7\xd2\xbc\x82\x0d\xd6\x45\xfd\xcf\xe5\x0c\x30\xd8\x96\x12\x47\x70\x0b\x2e\x88\x51\xa3\x78\x26\xe6\xa5\xf6\x5f\x9d\xce\x31\x8d\xda\x8d\xfd\xf4\x62\xf4\xeb\x60\x38\xce\xec\xa5\x62\xbd\x13\xbf\x39\x0b\xce\x2d\x74\xf6\xa2\x76\xd0\x90\x41\xe7\xb1\xf8\xa4\xb0\x11\x0c\x62\xaf\xd7\xfe\xac\xd0\x1a\x8f\x75\xeb\xa4\x1f\xa1\x46\x5a\xad\xad\x72\x90\x9e\x94\xbc\x92\xf3\xf8\x9c\xa1\x94\xde\x9c\xf9\x6f\xd0\xb9\x84\xfa\xa3\xae\x1b\xed\x89\x23\x17\x97\x6a\x73\x2b\x7d\x27\x58\x2f\x95\x1b\xc1\x37\x58\xe5\x9c\x4c\xe7\x10\x7c\xe3\x1e\x7a\x4e\xb8\x7b\x9a\xb1\xd1\x88\xad\xdc\x13\x39\x68\xe6\x9a\x51\xb8\x30\xf2\xdb\x24\xbe\x58\xcd\x33\x58\xe1\xde\x5e\xf7\x63\x36\xa1\x27\x8e\x9c\xe5\xce\x70\x91\x4b\xac\xd0\x3e\x7a\xcf\x7c\x5e\x3f\x29\x1e\xc9\x4b\x27\x35\x90\xeb\x73\xa9\xcc\x4a\x6d\x91\x57\xb4\x81\xdc\x16\x3a\x7f\xc0\x41\x71\xee\xec\xe4\x9c\x99\x1f\x88\x1d\xfc\xcd\x7c\x81\x6d\xc4\x14\x5e\x44\x2b\x47\xbd\x8f\xf8\x73\x06\x7d\x61\xa7\x7c\x5b\x2b\xce\xf0\x8f\x5a\x83\x97\xc1\x19\x7b\xb7\x3a\xe3\xf1\x1e\x35\xad\x94\x39\xa6\x54\xdd\x84\x07\x89\x3b\x7b\xe3\xdf\xac\xe1\x60\x24\xd7\x1e\x1a\x9e\x80\x03\x22\xdf\x3a\xe1\x9e\x5e\xfb\x4d\xf0\x53\x69\xad\x12\xeb\x5a\x35\x29\xce\xf0\x4e\x9f\xc3\xd5\x82\xaf\xf8\x0c\x6d\x10\x7b\xbc\xe2\x15\xac\xc4\x78\x76\x32\x0f\x8f\x3a\xbf\x80\x69\x66\x30\xd6\x55\x3a\x13\x46\xec\x0f\xa2\xff\xf1\x29\xb9\xe2\x99\x1a\xa0\x6f\x8e\x6b\x0b\xa9\x7b\x7a\x97\x58\x9b\x95\xe4\x86\x78\xc3\x33\xe4\x98\x3d\xa8\xd7\x38\x03\xf6\xc2\x3d\x71\x96\xeb\xf4\x59\xa4\x93\xe7\x95\x31\x8e\xa3\xd4\x2f\xfc\x3c\x4c\xa2\x4f\xdc\x0b\xee\xd0\x01\xaf\x73\x43\x7c\x76\xda\x4b\xdd\x56\x3a\x47\xd1\x4f\xb0\x1e\x1c\x0f\xda\x37\xc0\xd3\xf0\x02\xb3\x33\xbd\x0e\x3e\x66\xfa\x4e\x0f\x43\xbd\x76\xaa\x53\xb1\x8e\x26\xc1\x15\x33\x05\x75\x04\x9e\xd0\xe2\x79\x4e\xa1\x6e\x98\x2f\xda\x33\x3c\xe1\x43\xab\x7c\x13\xfb\x8b\x46\xfa\x00\xb0\x42\x0d\x36\xba\x2f\x1c\x12\xeb\x4a\x73\x00\x06\xc0\x6c\xab\x7c\x5c\x2a\xf7\xc1\x03\xdc\x57\xa9\xef\xcc\x82\xf1\x59\x64\x21\x71\xc4\x4e\x70\xd2\x6a\x6d\xd2\x27\x39\x7d\xbe\x87\xcd\x70\x07\xb9\x6b\xf5\xf9\xe1\x1c\xdb\xf8\x5c\x72\x90\xde\x01\x2c\x95\xad\x60\x88\x7c\x53\xe7\xf0\x3e\x39\x8a\x1a\x6d\x25\x97\xb9\x62\x3d\xf2\xd7\x1c\x4b\xfd\x6f\x4a\xa9\xd8\x8a\xf3\x35\xbc\x51\x0b\x9e\xe1\x63\xef\x5f\x9e\xa1\x4a\xe5\x9e\xf8\x5c\xa4\xd5\xe7\x16\xf6\x83\x19\xea\xd4\xcc\xff\xf1\x19\xea\xb4\x34\xce\x50\x8f\xff\xc3\x7e\x3a\x43\x9d\xee\xfa\x3d\x33\xd4\x73\x6b\x3e\xd5\x0c\x75\x6e\x9c\xce\x50\xff\x0b\x00\x00\xff\xff\x60\x83\xb6\x6f\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1486374708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

