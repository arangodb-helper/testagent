// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x83\xc9\xd9\x22\x39\x2e\x8a\x60\x59\xf6\xba\x2c\x69\xe9\x5d\xb1\xc6\x91\xa8\x2c\x1b\x69\x1c\x28\x42\xff\xbd\x48\x76\x88\xdb\xb4\x21\x87\xfa\x64\xe6\x8d\xdf\x9b\xf9\x2c\xc5\x48\xd8\x8f\x56\x12\x42\x7d\x94\x01\x99\x46\xa9\x6a\x68\x52\xaa\x2a\xae\xb7\xe2\x8f\x96\x43\x80\x7e\x70\xaf\xf8\xc6\x99\xde\x8a\xaa\xe2\xa3\xa8\x00\x00\xd6\x12\x98\x00\x31\x36\xa5\xd4\x3c\x91\x24\x4c\xa9\x29\x5d\x31\x9a\x0e\x16\xe1\x77\x4b\xe6\x8c\x29\x15\x21\x3f\x5c\x82\xf6\xd8\xed\x6b\xd6\xe6\x06\x36\xca\x29\x60\x0d\xad\x95\x21\xec\xeb\xc9\x40\x6f\x9c\x01\x6f\x4e\x9a\xa0\xb3\x83\x24\x54\x70\x9c\x88\x06\x57\x8b\xff\xb9\x97\x33\x29\x96\x18\xb4\xe1\x9e\xb5\xc7\x30\xf5\x8f\x7a\x1f\x4a\xf3\xda\xdc\xa9\x94\x2a\xce\xc6\xbc\xbf\xde\x89\xbc\xa2\x09\x64\xda\xc0\x99\xde\xe5\x22\xc9\xa3\xc5\x95\x7b\x8b\xd6\xa2\x82\x40\xde\x8c\xa8\xa0\xc8\xf5\x6c\xc7\x29\x43\xbe\xbc\x7b\x71\x9d\x99\xf4\xd5\x99\x33\xd2\x1f\xa5\x17\x69\x27\xbc\x96\x39\xbb\x7c\x9b\x6b\xc5\x31\x46\xf0\xd2\x9d\x10\x36\x81\xe0\xd7\x1e\x56\x3f\x64\x9e\x16\x16\x42\x9f\x62\x95\x88\x71\x13\xa8\xf9\x27\x7b\x4c\x89\x33\x52\x5f\xa9\x25\x7f\x2d\xcf\x13\xc4\x08\xe8\x14\x14\x3e\x65\xcd\x85\xd1\x01\x5b\x74\x04\x05\xff\x4f\x53\x7a\x36\x3d\xde\x02\xca\xe7\x6b\x70\x0f\x12\xc2\x15\xa0\xbf\x67\x74\x74\x17\x0e\x36\x39\xf2\x1b\x36\xd8\xcc\xc9\x8f\xb1\xb9\xb9\x72\xdd\x30\x10\xfa\x72\xe9\xde\x03\x00\x00\xff\xff\x80\xb0\x0c\xf4\x8f\x03\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 911, mode: os.FileMode(420), modTime: time.Unix(1486047848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x5f\x8f\x9c\x36\x10\x7f\xdf\x4f\x31\x42\xfb\x5a\xac\xe4\x31\xe2\x90\xae\xb7\x8d\x72\xea\x25\x8d\xf6\xee\xda\x67\x2f\x0c\x8b\x55\x83\x91\x3d\x5c\x5a\x59\x7c\xf7\xca\xc6\x10\x58\xb8\x13\x51\x37\xfb\xe4\x9d\x7f\x9e\x99\xdf\xcc\x0f\x5b\x4b\x58\x35\x92\x13\x42\x74\xe2\x06\x59\x89\x3c\x8f\x20\xee\xba\xdd\x2e\x29\xdf\xa5\x7f\xa1\xcc\x54\x85\x40\x0a\x9e\xd0\xd0\xed\x19\x6b\x4a\x58\xf9\x2e\xdd\x25\x4d\xba\xbb\x3f\x7c\x00\x6b\xe3\xfb\x43\xd7\xed\x92\x93\x66\xe9\xee\xb9\xf1\x92\xe7\x86\x44\x85\xa3\xf4\x4f\xd4\x46\xa8\xda\xab\xc2\xf9\xbe\x2e\x94\xd3\xb3\x26\x75\x37\xbd\x4f\xef\x64\x6b\x08\x75\xc2\xca\xf7\x4e\x42\xfc\x24\x11\x32\xc9\x8d\xb9\x89\x5a\x01\x19\x4a\x89\x39\x18\xd2\xa2\xc1\x1c\xbc\x3a\x4a\x77\x00\x00\x09\xb9\xa4\x87\xb3\xee\x0f\x41\x91\xde\x1f\x12\x46\xe5\x5c\x76\xa7\x91\x13\xe6\xec\x91\xb8\x26\xcc\x13\x46\xf9\xdc\x20\x94\xb9\xf0\x53\x4a\xe7\xa2\xe6\xa4\xf4\x52\x79\xf8\xf5\x11\xf5\x0b\x4e\x34\x09\x1b\x92\x71\x32\x9f\xa2\xb5\xa0\x79\x7d\x46\xd8\x57\xf0\xe1\x06\xe2\xcf\x3c\x2b\x45\x8d\x06\xba\x6e\x2d\xfd\x49\x5a\xee\x67\xed\xbe\xea\x9b\x3d\x95\x26\x1c\x4a\x8d\xc5\x4d\xc4\xa4\x3a\x1b\x36\x1a\xb1\xaa\x0f\x1e\x01\x09\x92\x78\x13\x3d\xa8\xb3\x89\xd2\x44\x0c\x5d\x2d\x84\x44\x20\xfc\x87\x40\xb5\x24\x45\x8d\x20\x32\x55\x47\x69\xc2\x44\x9a\x30\x9e\x6e\xbb\xa5\x46\xfa\xa6\xf4\xdf\xe3\x2d\x5f\xfa\xff\x20\x2f\x6e\xfb\x26\x0a\xf1\xda\x05\x97\x08\xac\xd5\x1d\x40\xbb\xa5\x8b\xf2\xd9\xd2\x34\xe0\x3a\x33\x9d\x5f\x61\xad\x28\x60\x5f\xc5\x9f\xb8\xf1\x58\x4f\x0d\x29\x1f\x52\xb6\x16\x32\x63\x8e\xc8\xf3\x7f\x9d\xf1\x03\x0f\x0b\xe0\x25\x8f\xc4\xa9\x75\xc0\x45\xeb\x8d\xb2\xd6\xf9\x78\xfb\xe7\xe3\x03\x74\xdd\x30\x55\x5b\x1b\xcb\x9d\xf9\xff\x07\xef\xb2\x70\x94\x06\xe7\xe5\xa6\xbf\x2c\x6c\xea\x7c\x73\x47\x26\x4b\xf1\x03\x7d\x99\x78\x85\xee\xcc\x96\x6b\x6b\x8f\xb2\xef\x4e\xd7\xee\xd4\xdb\x55\x0f\xdb\xfe\x03\x25\x0f\x2e\xa1\xde\xef\x7c\xb1\xb5\xd8\xfc\x64\xbc\xc7\x35\x2b\xed\x39\xca\x5a\xc0\x3a\x07\xcf\xc7\x9e\x59\x03\x27\x3b\xca\x37\xd7\x66\xe4\x2f\xbc\xc2\x25\x7d\xba\x1e\xae\x88\x6f\x33\x12\xaa\x36\x1b\x49\x95\x3c\xa9\xfa\xac\x27\x8c\x3a\x87\xd1\x69\xff\xf8\x1d\xf6\x14\x7f\xe4\x42\xb6\x1a\x2f\x80\x73\x0b\x31\x42\x40\x68\xc8\x21\x40\xb1\xcb\xda\xd9\x4d\xfe\x2c\x59\xcb\x2b\x87\xb0\x5d\x07\x45\x38\xbe\x62\x19\x8a\x9b\x46\x7a\x1b\x8f\x8f\x63\xbc\xeb\x42\xf2\x24\xd6\x20\xf9\x8c\xc6\xf0\xf3\x8a\xe2\x88\x8d\xd2\xb4\x11\x13\xed\x31\xe9\x5d\x5e\xff\xce\x59\xbb\xd7\xf1\x93\x78\xb5\xad\x3a\x0e\xd9\xac\xe9\x47\xb8\xbc\xe1\xa7\x23\x16\x01\x29\x1d\x7f\xe5\x54\x3a\x17\x9e\x6e\xed\xf1\x11\x33\xac\x09\xb2\x92\xab\xd0\x67\xf7\xd2\x71\x7e\xfd\x9a\xfb\x47\xcc\x9d\xd3\xc6\x7e\x66\x43\x45\xfe\x8b\x12\xe4\x0e\xd7\x97\x19\xc9\x8e\x2b\xed\xc3\xb2\x86\xb7\x06\xa3\x09\x70\x95\xa8\x05\x68\x71\x2e\x09\x0a\xa9\xdc\x77\x0e\x4e\x2d\x91\x5b\xde\xaf\xce\x76\xdc\xde\x25\x7f\x5f\x84\xd6\x68\xda\x6a\x6b\xec\xa3\x37\x9e\x06\x1f\x89\xbf\x7f\xb8\xad\xdc\x10\xa5\x07\x24\x2e\xa4\xf1\x6e\xe1\xfd\xf6\x73\x07\xb1\xdf\x93\x8d\xf3\x86\x7e\xde\x7a\x20\x7e\x7b\xc1\xfa\xed\xa1\xc3\xb7\x86\x0e\xc3\x86\x6e\x5b\xd0\xc5\x53\xba\x50\x8a\x1c\x5b\xc7\x5d\xf7\x5f\x00\x00\x00\xff\xff\xf7\x61\xd5\x10\x67\x0b\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 2919, mode: os.FileMode(420), modTime: time.Unix(1486455525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\x31\x0a\xc3\x30\x0c\x85\xe1\x3d\xa7\x78\x63\x0b\xae\x31\x81\x2c\xed\x69\x94\x44\x15\x25\x41\x02\xc5\x19\x4a\xe8\xdd\x8b\xa9\x0d\x5d\x32\x49\xc3\xf7\xbf\xe8\x4c\xf3\x3b\xe0\x77\x41\x38\x30\xd9\x6a\x7e\x87\x38\xb3\x3e\xf0\xe9\xa2\x5a\x6e\xaa\xbd\xff\xd0\x9c\x54\xb8\xc8\x2e\x66\xde\xb2\x2d\x38\x30\xd2\xb4\x88\xdb\xae\xf3\xad\x32\x97\x91\x2e\x29\xf4\xc3\x10\x52\x48\xb1\xbf\x96\xe9\xe2\x9f\xf4\x5a\x77\xe7\xed\xbc\xaa\x4d\xab\xbe\x01\x00\x00\xff\xff\x74\xca\x77\x00\xb4\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 180, mode: os.FileMode(420), modTime: time.Unix(1486368821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x99\x5b\x6f\x23\xc7\x11\x85\x9f\x39\xbf\x62\x2c\xc0\x06\x19\x28\xd2\xdc\x2f\x02\xf6\xc5\x37\xc4\x0f\xb1\x81\x64\xf3\x94\x0e\x8c\x9e\x9e\x6e\x99\x88\x24\x2a\x24\xe5\xf4\xee\x62\xff\x7b\xf0\x75\x15\x29\x4a\x2b\xdf\x16\x0b\xe4\x81\x2b\x72\x66\xba\xbb\x2e\xa7\xce\xa9\x9a\xbd\xbc\xcc\xbf\xda\xcc\x3e\xbf\xf6\x77\x7e\x6b\xf7\x7e\xce\xa7\x37\xf9\xf5\xe6\xcf\xd3\xfa\x6e\xb6\x7b\x7b\x91\x5d\x5e\xe6\xbb\xcd\xc3\xd6\xf9\xdd\x15\xdf\xf7\xfe\xf6\xfe\xc6\xee\xfd\xee\x72\xb2\x3b\x7f\x19\x36\x9b\xbd\xdf\x5e\xec\x6f\xef\x6f\x5e\xb8\xfb\x93\xb7\xf3\x0b\xf7\xdc\x4f\x76\xb3\x7b\xe1\xfa\xfa\x6e\xf6\xf1\x85\xeb\xf7\x0f\xd3\xcd\xda\x5d\xee\xf6\x6f\x6e\xfc\x85\xdb\xed\x9e\xde\x3d\x7e\xbb\xb8\xde\x3c\xbf\xb3\xdb\x1f\xb7\xfb\xfa\x87\xfc\xfb\x1f\x5e\xe7\xdf\x7c\xfd\xdd\xeb\xcf\xb2\xec\xde\xba\x7f\xdb\x6b\xff\xf8\x70\x96\xad\x6f\xef\x37\xdb\x7d\xbe\xcc\x16\x67\xd3\x9b\xbd\xdf\x9d\x65\x8b\x33\xb7\xb9\xbd\xdf\xfa\xdd\xee\xf2\xfa\xed\xfa\x9e\x0b\xe1\x76\xcf\x9f\xf5\x46\xfe\xbd\x5c\x6f\x1e\xf6\xeb\x1b\x7e\x6c\xd2\x82\x7b\xbb\xff\xe9\x32\xac\x6f\x3c\x5f\xb8\xb0\xdb\x6f\xd7\x77\xd7\xe9\xde\x7e\x7d\xeb\xcf\xb2\x55\x96\x85\x87\x3b\x97\x6b\x80\xff\xe6\xed\xbc\xe4\x4b\xfe\xcf\x7f\x71\xec\x79\x7e\x67\x6f\x7d\x2e\xcb\x56\xf9\xf2\x70\xd5\x6f\xb7\x9b\xed\x2a\x7f\x97\x2d\xae\xdf\xa6\x5f\xf9\xd5\xab\x1c\xab\x2e\xbe\xf7\xff\x65\x13\xbf\x5d\x26\xb3\xf9\xfd\xe5\x43\x08\x7e\x9b\xb6\x5d\xad\xb2\xc5\x3a\xa4\x05\x9f\xbd\xca\xef\xd6\x37\x6c\xb1\xd8\xfa\xfd\xc3\xf6\x8e\x9f\xe7\x79\xb8\xdd\x5f\x7c\xc3\xee\x61\x79\xc6\x46\xf9\xe7\xff\xb9\xca\x3f\xff\xf9\x4c\x2c\x49\x67\xad\xb2\xc5\xfb\x2c\x5b\xfc\x6c\xb7\xf9\xf4\x10\x72\x39\x47\x0e\xc9\x16\x3f\x8a\x39\xaf\xf2\xf5\xe6\xe2\xab\xcd\xfd\x9b\xe5\x17\xd3\x43\x38\xcf\xaf\xdf\xae\xb2\x85\xbb\xf9\xe6\x60\xe9\xc5\x57\x37\x9b\x9d\x5f\xae\xb2\x4f\x65\x0f\xdb\xc8\xfe\xbf\xb0\x91\xdf\x6e\xc5\x6e\xbd\x38\x3d\x84\x8b\x2f\x31\x7d\xb9\x3a\xe7\x89\xec\x7d\x96\xed\xdf\xdc\xfb\xdc\xee\x76\x7e\x4f\xc8\x1f\xdc\x9e\x5d\x92\x7f\x9a\x8f\x6c\xb1\xbe\x0b\x9b\x3c\xdf\xec\x2e\xbe\x5d\xdf\xf8\xef\xee\xc2\xe6\xb8\x4e\x53\x78\xb8\x7e\xb2\x43\xca\x61\x9e\x6b\x1a\xb3\xc5\x6e\xfd\x36\xfd\x5e\xdf\xed\xbb\x26\x5b\xdc\x52\x71\xf9\x71\xd3\xbf\x6e\x66\x9f\x2e\xbe\x5e\xdf\xfa\x1c\x98\x5c\xf0\x8d\x73\x12\x54\x96\x61\xfd\xfc\xac\x55\xfe\xbd\xbd\xf5\xcb\x95\x9e\xc0\x99\xea\x65\x58\x5f\x70\x7a\xf6\xfe\x57\xd6\xfe\x7d\xfd\x96\xb5\xc9\x9a\xa7\x4b\x31\xf4\x57\x97\x62\xeb\x72\x75\x6a\xf9\xd3\x0d\x70\xed\xb7\x36\xc0\xb9\xe5\xea\xd1\xd1\x0f\x76\x50\xef\x7f\x79\x93\xef\x76\x5f\xaf\xb7\xcb\x55\x3e\x6d\x36\x37\xa7\xab\xed\xcd\xee\x37\x3c\x7f\xb3\x13\xc7\xfd\x36\x58\xe7\xdf\xbd\x3f\x59\xad\x90\x00\xe5\x3f\x42\x5f\xdf\x26\x6e\x7b\x7d\x7b\x7f\x93\xbf\x52\x34\x2c\xcf\x4c\x2c\x83\x89\xc3\x64\x62\x31\x98\x58\x14\xfa\x19\x4d\xec\xbc\x89\x83\x5e\x0b\xc1\xc4\xa9\x32\x71\x2e\x4d\x6c\x82\x89\x6e\x34\xb1\x72\x26\x4e\xb5\x89\xbe\x7e\x76\xcf\xca\x5f\x3b\x9a\x58\x34\x72\xbd\xe4\xf9\xd6\xc4\x69\x34\xb1\x1e\x4d\xec\x3b\x13\x87\xe2\xe4\x3c\x3d\x83\x4f\xd5\x9b\x68\x67\xbd\x1f\x4c\x2c\xbb\xd3\xe7\xce\x8e\x7c\xf3\xc4\x23\xad\x83\x97\xf8\xe5\x50\x2d\x27\xfc\x94\x2d\x16\xcf\x22\x72\x9e\x2d\x16\x67\xcf\x15\xe0\xec\x3c\x5b\xac\x8e\xa8\x7d\xba\x80\xb3\xfe\x94\x0a\xed\xf4\xac\x54\x69\x47\x3a\x7b\xd1\xc4\xdf\xa2\x8b\x63\x95\xa7\x3a\x65\x97\xa7\x39\x7f\x47\x35\x5c\xe5\x2f\x18\x9b\x03\xf6\xab\xbc\xaa\xce\x73\x50\x7b\x75\x0a\xea\x65\x53\x15\xab\x74\x1d\x2c\x5e\x09\x56\xff\x71\xb7\x8e\xcb\xb2\x19\xda\x7e\xa8\xab\xaa\x3d\xcf\x8b\xd5\xfb\x6c\x61\x39\xf4\x8b\xe4\xda\xbb\xe4\xcf\x55\xae\x6e\x61\xd1\x55\xfa\xf7\xfd\x31\xac\xf6\xfc\x03\x9c\xfd\xc5\xdb\xf9\xa3\x51\x36\x3a\x13\x5d\x30\xb1\x2e\x4d\xec\xac\x89\xae\x35\xb1\xe6\x59\x67\x62\xd1\x99\xe8\x0b\x13\xe7\xd9\x44\xdb\x9b\x58\xf2\xdd\x9b\xd8\x4d\x26\x3a\x50\x36\x99\x58\x5b\x13\xcb\xc6\x44\xd7\x9b\xd8\xf7\x26\x86\xd2\xc4\xb1\x36\xb1\x6d\x4d\xb4\xce\xc4\xb9\x31\xb1\x2f\x4d\x1c\x2a\x13\x6d\x2b\x08\xed\x2b\x13\xc3\x64\xe2\xcc\xb5\xc6\xc4\x09\xd4\x16\x26\x4e\xa5\x89\xb6\x36\xb1\x6a\x4c\x0c\x7c\x66\x13\x83\x93\xeb\xb3\x95\xe7\xc7\x4a\xfc\x1a\x5b\x13\xfb\xda\xc4\x06\xd4\x7b\x13\xab\xc2\xc4\x1a\x7b\x47\xf1\xbd\xc5\x87\xde\xc4\x29\x48\x75\x94\xde\xc4\xa9\x97\x3d\xe7\xd1\xc4\xa1\x91\x67\xfc\x6c\x62\xe7\x4c\x2c\x9d\x89\xcd\x60\xe2\xdc\x9a\xe8\x6a\xf1\x9b\xfd\xc2\x28\xfe\xce\x9d\x54\x5a\x7a\xd6\x9b\xd8\x07\xf9\x04\x6f\xe2\xc8\xde\xfc\xd5\x18\x4e\x07\x3b\x26\x13\xab\x4a\x6c\x65\x4d\xd7\x99\x58\x71\xbe\x33\xd1\x37\x26\x96\x83\x89\xb6\x94\xaa\xe6\x6f\x50\xff\xa6\x49\x72\x35\xcd\x26\x7a\x27\xb1\x1b\x38\xab\x90\x7c\x5a\xf2\x45\xee\x26\x13\xa7\x42\xec\xc6\x4f\x5f\x99\x58\x79\x13\x5b\x67\x62\x37\x9a\xe8\x06\x39\xd3\x16\x26\x0e\xb5\xd8\xca\x3e\x8e\x7d\xad\x89\x6d\x6d\xa2\x23\x0e\x93\x89\x8d\x95\xb5\xec\x41\xbe\xf1\xbd\xf6\x26\xce\xbd\xe4\xab\xc7\xfe\x56\x70\xc3\x1a\xfc\x22\xbe\xc4\xd0\x4d\x26\x5a\x2b\x79\x9f\x83\x89\x45\x6b\x62\x37\x48\x6c\xc7\x4e\xf2\x1e\x6a\xb1\x1f\x26\xeb\x67\xc1\xd6\x73\x26\xc2\x5f\x57\x99\xd8\x76\x26\xb6\xb3\x9e\x51\xbe\xc8\x44\x07\xcc\x7f\x1c\x0f\x1d\x56\x3f\xb2\xd0\xb1\xd3\xfc\x90\x83\x0e\x0f\xff\x5e\x06\x7a\x66\xda\x27\xe5\x9f\x13\x33\x0f\xec\x33\x16\xff\x47\xfa\x49\x9d\xf8\x47\x73\x0f\xfc\x00\x66\x9a\x52\x6a\x0c\x65\x83\x7b\xe0\x99\xa1\x35\xd1\x6b\x7d\x95\xad\xe0\x17\xec\x50\xbb\xe0\x02\x55\x03\xaf\x03\x35\x59\x98\xd8\x8e\x26\x86\xce\xc4\xc9\x8a\x52\x82\x7f\x6a\x10\x1c\xc1\x1f\xae\x93\xfa\xb4\x83\xdc\xa7\x36\x79\x86\xba\xaf\x06\x13\x9b\xea\x11\x83\xd4\x53\x52\x4c\xf8\x60\x12\x7e\xaa\xe0\x30\xf8\x83\xf3\x1a\x13\x3d\xf7\x67\xc1\x3b\x75\x18\x54\xa1\xe1\xcf\xc4\x23\x83\xd4\x1a\x58\x2e\x2b\xd9\x1f\xdc\x8f\x8d\x60\x7a\x1c\x4d\x6c\x3a\x51\x6d\x38\x83\x7a\x69\x2b\xa9\xa3\xca\x9a\x68\x95\xaf\xbc\xd6\x3e\x75\xd4\xd4\xa2\xd2\xd4\x62\x5f\x08\x0f\x84\x41\x7d\x1b\x85\x9b\x89\x07\x7b\xb0\x0e\x2e\xb5\x27\x39\x98\xd5\x96\x51\xaf\xc1\xf9\xb5\xd6\x27\x3c\x5d\x3b\x89\x11\xfc\xdb\x38\xb1\xad\xd2\x18\xf2\xec\x68\x85\x6b\xe9\x10\x7c\x29\x7c\xdf\x4c\x1a\x0b\x27\xcf\x92\x2b\x62\x05\x3f\xb5\xca\x5d\xe4\x65\x56\x3e\x38\x70\x29\x6b\xe0\x80\x5a\x79\x95\xb5\xe4\xb1\x98\xa5\x1b\x19\x75\x1f\xf8\xcf\x4f\x92\xfb\xa6\x30\xb1\x53\xcd\x22\x86\x7c\x6f\xbc\xd8\x05\xc7\xc1\xa3\x83\xea\x47\xdb\x48\x8c\x78\x36\x61\x0e\x4e\xe9\x05\x97\x29\xcf\xa3\x89\x63\x6f\x62\x5d\xcb\xd9\xc4\x17\x3e\x26\xd7\xf8\x96\x38\xbd\x15\x5d\x03\x93\xa1\x95\x3c\xf4\x56\xf0\x0d\x5f\xc2\x69\x49\x97\x34\x56\xe4\x96\xdc\x39\x2f\x39\x99\x9c\xf0\x72\xca\xcb\x28\xbf\x6d\xa5\xb5\xd0\xc8\x5a\x57\x3c\xe6\xce\xb7\x82\x6d\x7c\x25\x77\x60\x29\xe9\xdc\x24\x76\x13\x37\xd6\x13\xd3\x46\xb5\x98\xb8\x93\x63\xfc\x87\xef\xb1\x13\x8d\xc2\x6e\xfc\x02\x33\x68\x13\x67\xb3\x0f\x5a\x3c\xce\x72\x26\x1a\x8b\xde\xf1\x9d\x38\xa0\xaf\xf8\x06\x1e\xca\x5e\xea\x83\xee\x90\xb5\xc4\x87\x9a\x43\x9b\x7a\x27\x98\x4f\x7d\x40\x2b\xd8\x00\xcb\xf0\x7b\xd2\xe8\x59\x6a\x98\xdc\x0e\xa5\xf6\x10\xbd\x68\x20\xf5\x00\x36\xf0\x7f\x54\x2c\xf1\xa1\x3e\x46\xae\xab\x5e\x92\x33\x6c\x2d\x15\xc3\x41\x6d\xc1\x07\xb0\x39\xa8\xcd\xd4\x4c\xab\xdd\x2f\x1d\x2f\x9a\x8c\xc6\xd2\xd3\x94\xaa\x6f\xf0\x90\x1f\xa4\x4f\xe1\x53\xab\x96\xa1\x83\xf0\x0c\x1d\x33\x78\x42\x07\xfb\x46\x7a\x14\x34\x2c\x68\xef\x80\x4e\x92\xf7\xa4\x89\xb3\xc4\xbd\xa8\x04\xb7\xbe\x97\x38\xf4\x87\xee\xb9\x12\x0d\xa3\x0e\x12\x26\xf1\xa9\x97\x7d\xf9\x10\x57\x6a\xa8\xd6\x78\xa2\xf9\xa9\x8f\xd2\x1a\x71\x4e\xf2\x0f\xd6\xe0\x2d\x70\xca\xa7\x3f\xe8\xb2\xf2\x23\x3c\xc4\x35\xaf\xd8\x29\xea\x0f\xf5\x14\xae\x98\xb4\x97\x23\xd7\xec\xf9\xf8\xdc\x51\x4f\x8f\x24\xfe\xc7\xc5\xf4\xb8\x34\x29\xe9\xe3\x7b\x99\xa7\x2a\x7a\x7c\xea\xf7\x48\xe8\x73\x6b\x3e\x95\x7e\x9e\x1a\xa7\xda\x39\x96\xe5\x1f\xd5\xce\xae\x68\xfa\xa1\x19\x3e\x85\x76\xa6\xb7\x55\x1f\x3f\x1d\x36\xda\x27\x05\xd5\x07\x27\x18\x02\x1b\xd4\xc0\xac\xd8\x4d\xb5\xa9\xfd\x76\x6b\x45\x73\xe9\x3d\xb9\x8e\x46\x8c\xc5\xa3\xd6\xa0\x67\x09\x53\x56\x6a\x89\xdf\x70\xb7\xf7\xc2\x55\xe0\xb8\x0a\x82\x27\x6c\x6c\x55\x97\xd1\x0c\xea\x02\xbe\xe7\x0c\xb4\x18\x8e\x08\xbd\xd4\x88\x53\xbb\x5a\xf8\x75\x90\xba\x6c\x59\xd3\x8b\x5d\xd8\x03\x67\x60\x37\x9c\x90\xf8\x30\x48\x2d\x50\x53\xa9\x3f\x9d\x64\x7d\xdd\x4a\x8f\xcc\x1e\x49\x53\x1b\xf1\x23\xf1\xfb\xa8\xbc\xe0\x24\x26\xcc\x04\xd8\x4e\x4f\x40\xed\xd0\x2f\x54\xba\xb7\x55\xae\xa0\xef\xe6\x1c\xf4\x02\x2e\x80\x57\x0b\x2b\x76\x30\x93\xcc\x3a\x23\x94\x3a\x07\xc0\xfb\xed\x81\x8f\xbc\xee\xcb\xba\x59\xce\x81\x1f\xe1\x37\xfc\x27\x57\x87\xbe\x06\x3f\xe1\x62\x78\x30\xf5\xc5\x95\xf4\x3e\x9d\xce\x0a\xc9\xce\x51\xe7\xa7\x4a\x78\x65\x80\x17\xd5\x2e\xf4\x80\x1a\x26\xa7\x68\x75\xea\x1d\x06\xc9\x8b\x9d\x84\x73\xb0\x09\xae\xc7\x2e\xb4\x68\xae\x45\x13\xab\xce\xc4\xbe\x95\x78\xa7\xfe\x26\x48\x6f\x05\x07\x77\x8a\x35\xee\x3b\xe5\x34\xf2\x86\xae\x26\xdc\x38\xd1\xd3\x92\x7c\xa9\x36\x81\x8b\x49\x63\x4d\xbe\x0b\x7d\xe3\x40\x6c\x06\x7d\xe3\x80\x96\xa6\xf9\xae\xd2\x59\xd1\x89\x8e\x30\x2f\xf2\x1c\xbd\xc3\x29\xbe\xd9\x8f\x59\x90\x1e\x2b\xbd\xe5\xf0\x92\x7b\x7a\x43\xf0\x05\xc7\x95\xca\xaf\xf8\x8e\x56\x82\x37\xfa\x34\x66\xd3\x51\xb5\x82\xbe\xc2\x6b\x1f\x03\xd6\xf0\x9d\xfc\x26\xbc\xe8\x3c\x87\x5e\x83\x0d\x62\x94\x62\x5e\x08\xc7\x37\xca\xe7\xd8\xcc\x3e\x56\xe7\x50\x34\xa6\x1f\xa5\xd7\x42\x5f\x89\x05\x7f\x8b\x49\xe2\x54\x37\xe2\x03\x3c\x4e\xee\x7a\x8d\x15\x7a\xc6\x5e\x93\x6a\x41\xaf\xb3\x4f\xa3\x5c\x4f\x3f\xc2\xd9\xf4\x1b\x69\xd6\xae\x74\x16\xc7\x3e\xf6\xd6\x1a\x2c\xb4\xaf\x85\x03\xd0\x36\x66\xd8\x46\x63\x4f\x9c\x3a\xc5\x14\xb9\xa7\x76\xd1\xe6\xfa\xd0\x43\x75\x3a\xdb\x5a\xd9\xcb\x29\x56\xd1\x45\xfc\x4b\xf3\xbb\xea\x4f\x69\x75\x06\xb7\xaa\x65\x5e\xe7\xaf\x51\xfd\xd2\xda\x65\x6f\xb0\x97\xfa\xad\x51\xf2\x0c\x4e\xe1\x85\x34\xb7\xcd\x32\x5f\x73\x8d\x38\x83\x21\xf2\x4a\x6d\x11\x8b\xd4\x5f\xaa\x6f\x69\x6e\xaf\x84\x4b\x1a\xed\x39\x9c\xee\x47\x5f\x87\xde\x51\x8b\xf8\x4e\x6d\x51\xb7\x29\x8f\xe0\xbe\xd3\x1e\x26\x48\x8d\x71\x2e\x7c\xc8\xbd\xa0\xf5\x0f\x5f\xb1\x96\xfa\x23\x16\xd4\x76\xd0\xf7\x09\x68\x3c\x3d\x60\x9a\xa9\x9d\xf4\x42\xe5\xac\x76\xea\x59\xa9\x5f\xac\x64\xee\xc0\x4f\x72\x9d\xde\x0d\x58\xe9\x3f\x46\x3d\xb3\x2b\xa5\x6f\x65\x96\x48\xf3\x48\xd0\xfe\x2d\x08\x0e\x39\x13\xde\xa0\xf6\xe8\x71\xab\xc3\x7b\x8a\x4a\xde\x17\xd0\x03\x11\x87\x8e\x98\x7a\xed\xe5\x6a\xe5\xc4\x59\xd6\x27\xed\x0e\x82\x3b\x6c\xa8\xb4\x27\x4d\xb9\x1c\xb5\x86\x0b\x89\x2d\x3d\x73\xaa\xd3\x4a\xfa\x46\x70\x4f\xfe\x12\xdf\xf6\x12\x2f\xf6\x83\x3f\x0f\x7d\x05\x39\x80\x6b\xc1\x03\x33\x7d\x3a\x77\x94\x58\x32\xeb\x7b\x7d\x2b\xd9\x6b\xed\x24\xcc\xf6\x52\x8b\xe4\x82\x5e\x27\xcd\x5e\x4e\x70\x08\x07\xa6\x77\x34\xbd\xc4\x1e\x0e\x3f\xf8\xd1\x6b\x0f\x8a\x4d\x69\xd6\xf3\x52\xa7\xf4\x99\x9d\xf6\x96\x83\x9e\xe7\xb5\xcf\x4f\xdc\xe9\x85\xff\x66\xd5\x1f\xe2\xc1\xf7\xa0\x3d\x50\xa5\xd7\xe0\x40\xab\xbc\xe1\x95\x8f\x53\x3f\xd5\x4a\xed\x81\x49\xf8\x6f\xd2\x5e\x19\x5d\xa1\xe6\xa8\x23\xf8\x0b\x1e\x6c\xb5\x3f\x27\xd7\xf8\x4f\x6d\xf2\x2c\x78\x44\x6b\xd2\x79\xac\x9d\xe4\x79\xf8\x15\x1b\x13\xa7\x37\x82\xbd\xb4\x7f\xa5\xbd\xa9\x6a\x04\x75\x65\x55\xcf\x99\x61\xc0\x51\xa9\xb3\x5f\xaa\xc3\x49\xea\x9b\xfa\xad\x75\xb6\x08\xaa\xdd\x9c\x37\x28\x8f\x52\x53\xf4\xae\x9d\xe6\x08\x7e\x2a\x55\xb3\xe9\x73\xc1\x0e\x76\x34\x07\x8c\x59\xb1\x29\xcd\x90\xb5\xe0\xe8\xd0\x1f\xa4\xd9\x6a\x10\xdc\x31\x77\x35\xfa\x3e\x0e\x1c\xa4\x19\x67\x14\xde\x20\xce\xe4\x18\xff\xb9\x47\xcc\x12\x67\x17\x52\xfb\xc4\x09\xfc\xd5\x83\xf0\x11\xfd\x3c\xda\x30\x28\x2f\x51\xbb\xbd\x72\xce\xa0\xbd\x0b\x98\x9f\x74\xce\x4b\x9a\x53\x09\x47\x80\xdb\xc4\x1f\xa3\xf8\xec\x74\xc6\xa0\x2e\x06\x9d\x71\x89\x61\x9a\xc3\x2b\xe9\x89\xca\x83\x0e\xe8\xcc\x7a\x78\x07\xd0\x7a\x89\x91\xd3\xdc\x51\xdf\xf3\xc9\xfb\x4a\x70\x98\x78\x7a\xd6\x7c\x7b\xf1\x39\xf5\x4b\xa3\x60\x98\x3a\x4e\x76\x96\xa2\x39\x55\xad\x6f\xcb\x4b\xad\x67\xed\x61\x92\x36\x1d\xb8\xb5\x7f\xe4\x2f\xaf\x75\x9c\xb4\xb4\x96\xbd\x93\xf6\xe9\x7b\x3f\x74\x9c\x7e\x03\x3e\x47\x83\x67\xd5\x12\xe6\x7d\x38\x1f\x3e\x4c\x7d\x44\xaf\xb5\x32\x8b\xc6\x13\x97\x5e\xdf\x2f\xd2\x63\x10\xff\xf4\xae\x6f\x12\x5c\x81\x81\x42\xeb\x07\xbe\x23\x1f\x49\xc7\xfd\x23\xe6\x9d\xfe\xaf\x02\x3d\x07\xbd\x20\xb5\x4d\xcf\x81\x7d\xa9\xde\x5b\x7d\x97\xa0\xef\xf6\xb0\x8b\x1a\xe3\x3e\x9c\x6a\x55\x57\x7b\x9d\x6f\x1a\xd5\xaa\x51\xe7\x2a\xea\xd0\x6a\xfc\xd1\x6c\x9e\xe5\xda\x61\x66\x4b\x7d\xac\xe6\xbc\xd3\xbe\x26\xbd\x17\x99\x44\xcf\xb1\xa5\xd6\x58\x62\x5b\xea\x93\x47\xe1\x9c\x5e\x39\xd6\xea\xbb\x55\x7a\xcd\xf4\xae\xb9\x17\x1c\x25\x2e\x68\x24\xf6\x29\x0f\xa5\xbe\x5b\xee\xb4\x0e\x7a\x7d\xc7\x1c\x04\x0b\xa9\xef\xad\x25\x16\xc4\x15\x3b\xc1\x6c\x75\x78\xf7\xa2\xef\xbf\xa9\x49\x62\x97\x7a\xc8\x5a\x7b\xe8\x4e\xfc\x77\xba\x9e\xf3\x5a\xcd\x2b\x7a\x40\x9f\x01\x07\xb4\x85\x60\x18\x6d\xe6\x3e\xbc\x02\x4e\xc9\x3b\xb1\x78\xe9\x7f\x6a\xb8\x87\xce\x24\x9d\x52\x9c\x50\xc3\xcf\xe6\xb9\xe3\x60\xf1\xc7\xe7\xb9\xe3\xd2\x34\xcf\x3d\xfe\x7f\xfa\xd3\x79\xee\xf8\xd4\x72\x95\xff\x2f\x00\x00\xff\xff\xb4\xd9\x8d\xcd\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1486455565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

