// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x83\xc9\xd9\x22\x39\x2e\x8a\x60\x59\xf6\xba\x2c\x69\xe9\x5d\xb1\xc6\x91\xa8\x2c\x1b\x69\x1c\x28\x42\xff\xbd\x48\x76\x88\xdb\xb4\x21\x87\xfa\x64\xe6\x8d\xdf\x9b\xf9\x2c\xc5\x48\xd8\x8f\x56\x12\x42\x7d\x94\x01\x99\x46\xa9\x6a\x68\x52\xaa\x2a\xae\xb7\xe2\x8f\x96\x43\x80\x7e\x70\xaf\xf8\xc6\x99\xde\x8a\xaa\xe2\xa3\xa8\x00\x00\xd6\x12\x98\x00\x31\x36\xa5\xd4\x3c\x91\x24\x4c\xa9\x29\x5d\x31\x9a\x0e\x16\xe1\x77\x4b\xe6\x8c\x29\x15\x21\x3f\x5c\x82\xf6\xd8\xed\x6b\xd6\xe6\x06\x36\xca\x29\x60\x0d\xad\x95\x21\xec\xeb\xc9\x40\x6f\x9c\x01\x6f\x4e\x9a\xa0\xb3\x83\x24\x54\x70\x9c\x88\x06\x57\x8b\xff\xb9\x97\x33\x29\x96\x18\xb4\xe1\x9e\xb5\xc7\x30\xf5\x8f\x7a\x1f\x4a\xf3\xda\xdc\xa9\x94\x2a\xce\xc6\xbc\xbf\xde\x89\xbc\xa2\x09\x64\xda\xc0\x99\xde\xe5\x22\xc9\xa3\xc5\x95\x7b\x8b\xd6\xa2\x82\x40\xde\x8c\xa8\xa0\xc8\xf5\x6c\xc7\x29\x43\xbe\xbc\x7b\x71\x9d\x99\xf4\xd5\x99\x33\xd2\x1f\xa5\x17\x69\x27\xbc\x96\x39\xbb\x7c\x9b\x6b\xc5\x31\x46\xf0\xd2\x9d\x10\x36\x81\xe0\xd7\x1e\x56\x3f\x64\x9e\x16\x16\x42\x9f\x62\x95\x88\x71\x13\xa8\xf9\x27\x7b\x4c\x89\x33\x52\x5f\xa9\x25\x7f\x2d\xcf\x13\xc4\x08\xe8\x14\x14\x3e\x65\xcd\x85\xd1\x01\x5b\x74\x04\x05\xff\x4f\x53\x7a\x36\x3d\xde\x02\xca\xe7\x6b\x70\x0f\x12\xc2\x15\xa0\xbf\x67\x74\x74\x17\x0e\x36\x39\xf2\x1b\x36\xd8\xcc\xc9\x8f\xb1\xb9\xb9\x72\xdd\x30\x10\xfa\x72\xe9\xde\x03\x00\x00\xff\xff\x80\xb0\x0c\xf4\x8f\x03\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 911, mode: os.FileMode(420), modTime: time.Unix(1486047848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x5f\x8f\x9c\x36\x10\x7f\xdf\x4f\x31\x42\xfb\x5a\xac\xe4\x31\xe2\x90\xae\xb7\x8d\x72\xea\x25\x8d\xf6\xee\xda\x67\x2f\x0c\x8b\x55\x83\x91\x3d\x5c\x5a\x59\x7c\xf7\xca\xc6\x10\x58\xb8\x13\x51\x37\xfb\xc4\xce\x1f\xcf\x9f\xdf\xcc\xcf\xb6\x96\xb0\x6a\x24\x27\x84\xe8\xc4\x0d\xb2\x12\x79\x1e\x41\xdc\x75\xbb\x5d\x52\xbe\x4b\xff\x42\x99\xa9\x0a\x81\x14\x3c\xa1\xa1\xdb\x33\xd6\x94\xb0\xf2\x5d\xba\x4b\x9a\x74\x77\x7f\xf8\x00\xd6\xc6\xf7\x87\xae\xdb\x25\x27\xcd\xd2\xdd\x73\xe3\x25\xcf\x0d\x89\x0a\x47\xe9\x9f\xa8\x8d\x50\xb5\x57\x85\xef\xfb\xba\x50\x4e\xcf\x9a\xd4\x45\x7a\x9f\xde\xc9\xd6\x10\xea\x84\x95\xef\x9d\x84\xf8\x49\x22\x64\x92\x1b\x73\x13\xb5\x02\x32\x94\x12\x73\x30\xa4\x45\x83\x39\x78\x75\x94\xee\x00\x00\x12\x72\x49\x0f\xdf\xba\xff\x08\x8a\xf4\xfe\x90\x30\x2a\xe7\xb2\x3b\x8d\x9c\x30\x67\x8f\xc4\x35\x61\x9e\x30\xca\xe7\x06\xa1\xcc\x85\x9f\x52\x3a\x17\x35\x27\xa5\x97\xca\xc3\xaf\x8f\xa8\x5f\x70\xa2\x49\xd8\x90\x8c\x93\xf9\x14\xad\x05\xcd\xeb\x33\xc2\xbe\x82\x0f\x37\x10\x7f\xe6\x59\x29\x6a\x34\xd0\x75\x6b\xe9\x4f\xd2\x72\x3f\x6b\xf7\x55\xdf\xec\xa9\x34\xe1\x50\x6a\x2c\x6e\x22\x26\xd5\xd9\xb0\xd1\x88\x55\xfd\xe1\x11\x90\x20\x89\x37\xd1\x83\x3a\x9b\x28\x4d\xc4\xd0\xd5\x42\x48\x04\xc2\x7f\x08\x54\x4b\x52\xd4\x08\x22\x53\x75\x94\x26\x4c\xa4\x09\xe3\xe9\xb6\x28\x35\xd2\x37\xa5\xff\x1e\xa3\x7c\xe9\xff\x83\xbc\x88\xf6\x4d\x14\xe2\xb5\x00\x97\x08\xac\xd5\x1d\x40\xbb\xa5\x8b\xf2\xd9\xd2\x34\xe0\x3a\x33\x9d\x87\xb0\x56\x14\xb0\xaf\xe2\x4f\xdc\x78\xac\xa7\x86\x94\x0f\x29\x5b\x0b\x99\x31\x47\xe4\xf9\xbf\xce\xf8\x81\x87\x05\xf0\x92\x47\xe2\xd4\x3a\xe0\xa2\xf5\x46\x59\xeb\x7c\xbc\xfd\xf3\xf1\x01\xba\x6e\x98\xaa\xad\x8d\xe5\xce\xfc\xff\x83\x77\x59\x38\x4a\x83\xf3\x72\xd3\x5f\x16\x36\x75\xbe\xb9\x23\x93\xa5\xf8\x81\xbe\x4c\xbc\x42\x77\x66\xcb\xb5\xb5\x47\xd9\x77\xa7\x6b\x77\xea\xed\xaa\x87\x6d\xff\x81\x92\x07\x97\x50\xef\x77\xbe\xd8\x5a\x6c\x7e\x32\xde\xe3\x9a\x95\xf6\x1c\x65\x2d\x60\x9d\x83\xe7\x63\xcf\xac\x81\x93\x1d\xe5\x9b\x6b\x33\xf2\x17\x5e\xe1\x92\x3e\x5d\x0f\x57\xc4\xb7\x19\x09\x55\x9b\x8d\xa4\x4a\x9e\x54\x7d\xd6\x13\x46\x9d\xc3\xe8\xb4\x7f\xfc\x0e\x7b\x8a\x3f\x72\x21\x5b\x8d\x17\xc0\x2d\xd8\x67\xc4\x83\xd0\x90\x83\x83\x62\x57\x82\x73\x9a\xfc\x79\x1d\xc6\x4b\x37\xd6\x33\xe3\xcc\xd8\x3b\x6c\xc2\x71\x1e\xe3\x6d\x12\xf5\x41\x87\x2a\xbb\x0e\x8a\xf0\xf9\x8a\x65\xe8\xb5\xab\x65\xdb\x78\x7c\x1c\xcf\xbb\xee\x84\x3c\x89\xb5\x09\xf9\x8c\xc6\xf0\xf3\x8a\xe2\x88\x8d\xd2\xb4\x71\x44\xb4\x1f\x91\xde\xe5\xf5\x6b\xd7\xda\xbd\x8e\x9f\x44\x0f\xec\x4a\xb3\x74\x1c\xb2\x59\xd3\x8f\xc8\x7b\xc3\x4f\x47\x2c\xc2\xac\xe8\xf8\x2b\xa7\xb2\x9f\x95\xad\x3d\x3e\x62\x86\x35\x41\x56\x72\x15\xfa\xec\x1e\x5e\xce\xaf\x67\x1d\xff\xa6\xba\x73\xda\xd8\xaf\x50\xa8\xc8\x5f\x70\x41\xee\x70\x7d\x99\x71\xfe\xc8\x30\xfe\x58\xd6\xf0\xd6\x60\x34\x01\xae\x12\xb5\x00\x2d\xce\x25\x41\x21\x95\xbb\x76\xe1\xd4\x12\xb9\x19\xfc\xea\x6c\xc7\xb9\x5b\x5e\x27\x17\x47\x6b\x34\x6d\xb5\xf5\xec\xa3\x37\x9e\x1e\x3e\xde\x43\xfd\x3b\x72\x25\x42\x94\x1e\x90\xb8\x90\xc6\xbb\x85\xe7\xe4\xcf\x1d\xc4\x7e\x4f\x36\xce\x1b\xfa\x79\xeb\x81\xf8\xed\x05\xeb\xb7\x87\x0e\xdf\x1a\x3a\x0c\x1b\xba\x6d\x41\x17\x2f\xfb\x42\x29\x72\x97\x47\xdc\x75\xff\x05\x00\x00\xff\xff\x5a\x22\x2b\xa2\xf6\x0b\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3062, mode: os.FileMode(420), modTime: time.Unix(1486460980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\x31\x0a\xc3\x30\x0c\x85\xe1\x3d\xa7\x78\x63\x0b\xae\x31\x81\x2c\xed\x69\x94\x44\x15\x25\x41\x02\xc5\x19\x4a\xe8\xdd\x8b\xa9\x0d\x5d\x32\x49\xc3\xf7\xbf\xe8\x4c\xf3\x3b\xe0\x77\x41\x38\x30\xd9\x6a\x7e\x87\x38\xb3\x3e\xf0\xe9\xa2\x5a\x6e\xaa\xbd\xff\xd0\x9c\x54\xb8\xc8\x2e\x66\xde\xb2\x2d\x38\x30\xd2\xb4\x88\xdb\xae\xf3\xad\x32\x97\x91\x2e\x29\xf4\xc3\x10\x52\x48\xb1\xbf\x96\xe9\xe2\x9f\xf4\x5a\x77\xe7\xed\xbc\xaa\x4d\xab\xbe\x01\x00\x00\xff\xff\x74\xca\x77\x00\xb4\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 180, mode: os.FileMode(420), modTime: time.Unix(1486368821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x98\xdb\x6f\x1b\xc7\x15\xc6\x9f\xb9\x7f\xc5\x46\x40\x02\xb2\x50\xa5\xbd\x5f\x04\xf8\x25\x37\x34\x0f\x4d\x80\xd6\x7d\xea\x14\xc1\xec\xee\xac\x42\x54\x12\x55\x92\x4a\xc7\x36\xfc\xbf\x17\xbf\x73\x0e\x29\x4a\x56\x6e\x86\x81\x3e\xd0\x16\x97\x3b\x33\xe7\xfa\x7d\xdf\x99\xcb\xcb\xf4\xab\xcd\x14\xd2\xeb\x70\x17\xb6\x7e\x1f\xa6\x74\x78\x93\x5e\x6f\xfe\x3c\xac\xef\x26\xbf\xf7\x17\xc9\xe5\x65\xba\xdb\x3c\x6c\xc7\xb0\xbb\xe2\xef\x7d\xb8\xbd\xbf\xf1\xfb\xb0\xbb\x1c\xfc\x2e\x5c\xce\x9b\xcd\x3e\x6c\x2f\xf6\xb7\xf7\x37\x2f\xfc\xfa\x53\xf0\xd3\x0b\xbf\x8d\x3f\xf9\xcd\xee\x85\xe7\xeb\xbb\x29\xc4\x17\x9e\xdf\x3f\x0c\x37\xeb\xf1\x72\xb7\x7f\x73\x13\x2e\xc6\xdd\xee\xe9\xaf\xc7\xbf\x2e\xae\x37\xcf\x7f\xd9\xed\x8f\xdb\x7d\xfd\x43\xfa\xfd\x0f\xaf\xd3\x6f\xbe\xfe\xee\xf5\x67\x49\x72\xef\xc7\x7f\xfb\xeb\xf0\xf8\x72\x92\xac\x6f\xef\x37\xdb\x7d\xba\x4c\x16\x67\xc3\x9b\x7d\xd8\x9d\x25\x8b\xb3\x71\x73\x7b\xbf\x0d\xbb\xdd\xe5\xf5\xdb\xf5\x3d\x0f\xe6\xdb\x3d\xff\xad\x37\xfa\xef\xe5\x7a\xf3\xb0\x5f\xdf\xf0\x65\x23\x0b\xee\xfd\xfe\xa7\xcb\x79\x7d\x13\xf8\x83\x07\xbb\xfd\x76\x7d\x77\x2d\xbf\xed\xd7\xb7\xe1\x2c\x59\x25\xc9\xfc\x70\x37\xa6\x16\xe0\xbf\x05\x3f\x2d\xf9\x23\xfd\xe7\xbf\x38\xf6\x3c\xbd\xf3\xb7\x21\xd5\x65\xab\x74\x79\x78\x1a\xb6\xdb\xcd\x76\x95\xbe\x4b\x16\xd7\x6f\xe5\x5b\x7a\xf5\x2a\xc5\xaa\x8b\xef\xc3\x7f\xd9\x24\x6c\x97\x62\x36\xdf\xbf\x7c\x98\xe7\xb0\x95\x6d\x57\xab\x64\xb1\x9e\x65\xc1\x67\xaf\xd2\xbb\xf5\x0d\x5b\x2c\xb6\x61\xff\xb0\xbd\xe3\xeb\x79\x3a\xdf\xee\x2f\xbe\x61\xf7\x79\x79\xc6\x46\xe9\xe7\xff\xb9\x4a\x3f\xff\xf9\x4c\x2d\x91\xb3\x56\xc9\xe2\x7d\x92\x2c\x7e\xf6\xdb\x74\x78\x98\x53\x3d\x47\x0f\x49\x16\x3f\xaa\x39\xaf\xd2\xf5\xe6\xe2\xab\xcd\xfd\x9b\xe5\x17\xc3\xc3\x7c\x9e\x5e\xbf\x5d\x25\x8b\xf1\xe6\x9b\x83\xa5\x17\x5f\xdd\x6c\x76\x61\xb9\x4a\x3e\x95\x3d\x6c\xa3\xfb\xff\xc2\x46\x61\xbb\x55\xbb\xed\xe1\xf0\x30\x5f\x7c\x89\xe9\xcb\xd5\x39\x6f\x24\xef\x93\x64\xff\xe6\x3e\xa4\x7e\xb7\x0b\x7b\x42\xfe\x30\xee\xd9\x45\xfc\xb3\x7c\x24\x8b\xf5\xdd\xbc\x49\xd3\xcd\xee\xe2\xdb\xf5\x4d\xf8\xee\x6e\xde\x1c\xd7\x59\x0a\x0f\xcf\x4f\x76\x90\x1c\xa6\xa9\xa5\x31\x59\xec\xd6\x6f\xe5\xfb\xfa\x6e\xdf\x54\xc9\xe2\x96\x8e\x4b\x8f\x9b\xfe\x75\x33\x05\x79\xf8\x7a\x7d\x1b\x52\xca\xe4\x82\xbf\x38\x47\x4a\x65\x39\xaf\x9f\x9f\xb5\x4a\xbf\xf7\xb7\x61\xb9\xb2\x13\x38\xd3\xbc\x9c\xd7\x17\x9c\x9e\xbc\xff\x95\xb5\x7f\x5f\xbf\x65\xad\x58\xf3\x74\x29\x86\xfe\xea\x52\x6c\x5d\xae\x4e\x2d\x7f\xba\x01\xae\xfd\xd6\x06\x38\xb7\x5c\x3d\x3a\xfa\xc1\x0e\xe6\xfd\x2f\x6f\xf2\xdd\xee\xeb\xf5\x76\xb9\x4a\x87\xcd\xe6\xe6\x74\xb5\xbf\xd9\xfd\x86\xe7\x6f\x76\xea\x78\xd8\xce\x7e\x0c\xef\xde\x9f\xac\xb6\x92\xa0\xca\x7f\x04\xbe\xbe\x15\x6c\x7b\x7d\x7b\x7f\x93\xbe\xb2\x6a\x58\x9e\xb9\x98\xcf\x2e\x76\x83\x8b\x59\xe7\x62\x96\xd9\xa7\x77\xb1\x09\x2e\x76\xf6\x6c\x9e\x5d\x1c\x0a\x17\xa7\xdc\xc5\x6a\x76\x71\xec\x5d\x2c\x46\x17\x87\xd2\xc5\x50\x3e\xfb\xcd\xeb\xff\xbe\x77\x31\xab\xf4\x79\xce\xfb\xb5\x8b\x43\xef\x62\xd9\xbb\xd8\x36\x2e\x76\xd9\xc9\x79\x76\x06\x9f\xa2\x75\xd1\x4f\xf6\xfb\xec\x62\xde\x9c\xbe\x77\x76\xc4\x9b\x27\x1e\x59\x1f\xbc\x84\x2f\x87\x6e\x39\xc1\xa7\x64\xb1\x78\x16\x91\xf3\x64\xb1\x38\x7b\xce\x00\x67\xe7\xc9\x62\x75\xac\xda\xa7\x0b\x38\xeb\x4f\xd2\x68\xa7\x67\x49\xa7\x1d\xe1\xec\x45\x13\x7f\x0b\x2e\x8e\x5d\x2e\x7d\xca\x2e\x4f\x73\xfe\x8e\x6e\xb8\x4a\x5f\x30\x36\xa5\xd8\xaf\xd2\xa2\x38\x4f\xa9\xda\xab\xd3\xa2\x5e\x56\x45\xb6\x92\xe7\xd4\xe2\x95\xd6\xea\x3f\xee\xd6\x71\x99\x57\x5d\xdd\x76\x65\x51\xd4\xe7\x69\xb6\x7a\x9f\x2c\x3c\x87\x7e\x21\xae\xbd\x13\x7f\xae\x52\x73\x0b\x8b\xae\xe4\xdf\xf7\xc7\xb0\xfa\xf3\x0f\xea\xec\x2f\xc1\x4f\x1f\x5d\x65\xfd\xe8\xe2\x38\xbb\x58\xe6\x2e\x36\xde\xc5\xb1\x76\xb1\xe4\xdd\xd1\xc5\xac\x71\x31\x64\x2e\x4e\x93\x8b\xbe\x75\x31\xe7\xef\xe0\x62\x33\xb8\x38\x52\x65\x83\x8b\xa5\x77\x31\xaf\x5c\x1c\x5b\x17\xdb\xd6\xc5\x39\x77\xb1\x2f\x5d\xac\x6b\x17\xfd\xe8\xe2\x54\xb9\xd8\xe6\x2e\x76\x85\x8b\xbe\xd6\x0a\x6d\x0b\x17\xe7\xc1\xc5\x89\x67\x95\x8b\x03\x55\x9b\xb9\x38\xe4\x2e\xfa\xd2\xc5\xa2\x72\x71\xe6\x33\xb9\x38\x8f\xfa\x7c\xf2\xfa\x7e\x5f\xa8\x5f\x7d\xed\x62\x5b\xba\x58\x51\xf5\xc1\xc5\x22\x73\xb1\xc4\xde\x5e\x7d\xaf\xf1\xa1\x75\x71\x98\xb5\x3b\xf2\xe0\xe2\xd0\xea\x9e\x53\xef\x62\x57\xe9\x3b\x61\x72\xb1\x19\x5d\xcc\x47\x17\xab\xce\xc5\xa9\x76\x71\x2c\xd5\x6f\xf6\x9b\x7b\xf5\x77\x6a\xb4\xd3\xe4\xdd\xe0\x62\x3b\xeb\x67\x0e\x2e\xf6\xec\xcd\xff\x16\xc3\xe1\x60\xc7\xe0\x62\x51\xa8\xad\xac\x69\x1a\x17\x0b\xce\x1f\x5d\x0c\x95\x8b\x79\xe7\xa2\xcf\xb5\xab\xf9\x7f\x36\xff\x86\x41\x73\x35\x4c\x2e\x86\x51\x63\xd7\x71\x56\xa6\xf9\xf4\xe4\x8b\xdc\x0d\x2e\x0e\x99\xda\x8d\x9f\xa1\x70\xb1\x08\x2e\xd6\xa3\x8b\x4d\xef\xe2\xd8\xe9\x99\x3e\x73\xb1\x2b\xd5\x56\xf6\x19\xd9\xd7\xbb\x58\x97\x2e\x8e\xc4\x61\x70\xb1\xf2\xba\x96\x3d\xc8\x37\xbe\x97\xc1\xc5\xa9\xd5\x7c\xb5\xd8\x5f\x6b\xdd\xb0\x06\xbf\x88\x2f\x31\x1c\x07\x17\xbd\xd7\xbc\x4f\xb3\x8b\x59\xed\x62\xd3\x69\x6c\xfb\x46\xf3\x3e\x97\x6a\x3f\x48\xd6\x4e\x5a\x5b\xcf\x91\x08\x7f\xc7\xc2\xc5\xba\x71\xb1\x9e\xec\x8c\xfc\x45\x24\x3a\xd4\xfc\xc7\xe1\xd0\x61\xf5\x23\x0a\x1d\x95\xe6\x87\x18\x74\x78\xf9\xf7\x22\xd0\x33\xd3\x3e\x29\xfe\x9c\x98\x79\x40\x9f\x3e\xfb\x3f\xc2\x8f\x28\xf1\x8f\xc6\x1e\xf0\x81\x9a\xa9\x72\xed\x31\x98\x0d\xec\x01\x67\xba\xda\xc5\x60\xfd\x95\xd7\x5a\xbf\xd4\x0e\xbd\x4b\x5d\xc0\x6a\xd4\x6b\x47\x4f\x66\x2e\xd6\xbd\x8b\x73\xe3\xe2\xe0\x95\x29\xa9\x7f\x7a\x90\x3a\x02\x3f\xc6\x46\xfb\xd3\x77\xfa\x3b\xbd\xc9\x3b\xf4\x7d\xd1\xb9\x58\x15\x8f\x35\x48\x3f\x09\x63\x82\x07\x83\xe2\x53\x01\x86\x81\x1f\x9c\x57\xb9\x18\xf8\x7d\xd2\x7a\xa7\x0f\x67\x63\x68\xf0\x53\x70\xa4\xd3\x5e\xa3\x96\xf3\x42\xf7\xa7\xee\xfb\x4a\x6b\xba\xef\x5d\xac\x1a\x65\x6d\x30\x83\x7e\xa9\x0b\xed\xa3\xc2\xbb\xe8\x0d\xaf\x82\xf5\x3e\x7d\x54\x95\xca\xd2\xf4\x62\x9b\x29\x0e\xcc\x9d\xf9\xd6\x2b\x36\x13\x0f\xf6\x60\x1d\x58\xea\x4f\x72\x30\x99\x2d\xbd\x3d\x03\xf3\x4b\xeb\x4f\x70\xba\x1c\x35\x46\xe0\x6f\x35\xaa\x6d\x85\xc5\x90\x77\x7b\xaf\x58\x8b\x42\x08\xb9\xe2\x7d\x35\x58\x2c\x46\x7d\x97\x5c\x11\x2b\xf0\xa9\x36\xec\x22\x2f\x93\xe1\xc1\x01\x4b\x59\x03\x06\x94\x86\xab\xac\x25\x8f\xd9\xa4\x6a\xa4\xb7\x7d\xc0\xbf\x30\x68\xee\xab\xcc\xc5\xc6\x38\x8b\x18\xf2\x77\x15\xd4\x2e\x30\x0e\x1c\xed\x8c\x3f\xea\x4a\x63\xc4\xbb\x52\x73\x60\x4a\xab\x75\x29\x79\xee\x5d\xec\x5b\x17\xcb\x52\xcf\x26\xbe\xe0\x31\xb9\xc6\x37\xc1\xf4\x5a\x79\x8d\x9a\x9c\x6b\xcd\x43\xeb\xb5\xbe\xc1\x4b\x30\x4d\x78\xc9\x62\x45\x6e\xc9\xdd\x18\x34\x27\xc3\xa8\xb8\x2c\x79\xe9\xf5\xbb\x2f\xac\x17\x2a\x5d\x3b\x66\x8f\xb9\x0b\xb5\xd6\x36\xbe\x92\x3b\x6a\x49\x78\x6e\x50\xbb\x89\x1b\xeb\x89\x69\x65\x5c\x4c\xdc\xc9\x31\xfe\x83\xf7\xd8\x09\x47\x61\x37\x7e\x51\x33\x70\x13\x67\xb3\x0f\x5c\xdc\x4f\x7a\x26\x1c\x0b\xdf\xf1\x37\x71\x80\x5f\xf1\x8d\x7a\xc8\x5b\xed\x0f\xd4\x21\x6b\x89\x0f\x3d\x07\x37\xb5\xa3\xd6\xbc\xe8\x80\x5a\x6b\x83\x5a\x06\xdf\x85\xa3\x27\xed\x61\x72\xdb\xe5\xa6\x21\x5a\xe5\x40\xfa\x81\xda\xc0\xff\xde\x6a\x89\x0f\xfd\xd1\xf3\xdc\xf8\x92\x9c\x61\x6b\x6e\x35\x3c\x9b\x2d\xf8\x40\x6d\x76\x66\x33\x3d\x53\x9b\xfa\x45\xf1\xc2\xc9\x70\x2c\x9a\x26\x37\x7e\x03\x87\x42\xa7\x3a\x85\x4f\x69\x5c\x06\x0f\x82\x33\x28\x66\xea\x09\x1e\x6c\x2b\xd5\x28\x70\xd8\x6c\xda\x01\x9e\x24\xef\xc2\x89\x93\xc6\x3d\x2b\xb4\x6e\x43\xab\x71\x68\x0f\xea\xb9\x50\x0e\xa3\x0f\xa4\x26\xf1\xa9\xd5\x7d\xf9\x10\x57\x7a\xa8\xb4\x78\xc2\xf9\xa2\xa3\xac\x47\xc6\x51\xf3\x4f\xad\x81\x5b\xd4\x29\x9f\xf6\xc0\xcb\x86\x8f\xe0\x10\xcf\x82\xd5\x4e\x56\x7e\xc8\xa7\x60\xc5\x60\x5a\x8e\x5c\xb3\xe7\xe3\x7b\x47\x3e\x3d\x82\xf8\x1f\x27\xd3\xe3\x52\x61\xd2\xc7\x7b\x99\xa7\x2c\x7a\x7c\xeb\xf7\x50\xe8\x73\x6b\x3e\x15\x7f\x9e\x1a\x67\xdc\xd9\xe7\xf9\x1f\xe5\xce\x26\xab\xda\xae\xea\x3e\x05\x77\xca\x6d\xd5\xc7\x4f\x87\x95\xe9\xa4\xd9\xf8\x61\xd4\x1a\xa2\x36\xe8\x81\xc9\x6a\x57\x7a\xd3\xf4\x76\xed\x95\x73\xd1\x9e\x3c\x87\x23\xfa\xec\x91\x6b\xe0\x33\xa9\x29\xaf\xbd\xc4\x77\xb0\x3b\x04\xc5\x2a\xea\xb8\x98\xb5\x9e\xb0\xb1\x36\x5e\x86\x33\xe8\x0b\xf0\x9e\x33\xe0\x62\x30\x62\x6e\xb5\x47\x46\xb3\xab\x06\x5f\x3b\xed\xcb\x9a\x35\xad\xda\x45\x8f\x82\x99\xf8\x4e\xdf\xf6\x66\xff\x68\xb3\x09\x7a\x1a\xfc\xa1\x96\xe1\x4a\xf0\x1d\x2c\x40\xc3\xd3\xd7\xd2\xe3\x93\x4e\xc5\xf4\x5f\xdb\x2b\xd6\xa0\x2b\xc0\xe6\xb6\x56\xdc\x82\xc7\xc0\x0b\xf0\xb0\x32\x1e\x10\xdc\xe9\x6d\x7a\xf6\x8a\x57\xb9\x71\x21\x9a\x9c\x0f\x1a\x40\xf0\xb1\x51\x8c\xc7\x0e\xfa\x56\xb4\x85\xd7\xbd\xe0\x20\xe9\xf1\xd6\xe6\x82\xee\x91\x73\xf1\x9f\x58\xa0\x1f\x88\x35\xfb\x11\x5f\x7c\x00\x83\x26\xeb\xed\xd6\xa6\x7b\x7e\xc3\x6f\x7c\xea\xcc\xae\xaa\xd5\x5e\x27\x36\xe0\x21\xb9\x41\x7b\xc3\x51\xc2\x6b\x07\xbd\x34\xa8\x4d\xfc\x06\x37\x4a\x3c\xbd\xf2\x7b\x55\x2b\x8e\xf5\xc6\x49\xa2\xa7\x2c\x37\xe4\x9c\x78\xf6\xb6\x0f\x18\xce\x77\xfc\xa8\x4c\x73\x09\x66\x1b\x5e\x61\x2b\x79\xe4\x7c\xb0\xb0\x2c\x34\x36\x12\x7f\xd3\x71\xde\xce\xa4\x46\xe4\x16\xa2\xd3\x5c\xf0\x1e\x35\x75\xa8\x6f\x59\x53\xd8\x2c\x67\xb9\xc7\x07\xf2\x43\x1f\xa0\x69\x64\x1e\x0c\x5a\xaf\xec\x5d\x18\xf6\x92\xf3\x72\xd0\x78\x48\x0f\x64\x5a\xa7\x32\xe7\x90\x47\xf8\xd0\xf8\x9c\xdf\x0e\x98\x8d\x1e\x20\xb7\xd4\x18\xb1\x23\x26\xd4\x86\xcc\xb3\xad\xae\x93\x9b\x91\x5a\x75\x82\xd4\x71\xa9\x9a\xab\xb3\x1c\xd0\x7b\xa2\xc3\xcc\x76\xf0\x1b\xfb\x3a\xd3\xb5\x70\x16\xb5\x84\x9e\xc9\x8c\x6f\x82\xd5\xd2\x68\x75\x08\x97\xe3\x73\xd9\x3e\xf6\x2e\xda\xa8\x36\xed\x45\xbd\x97\x36\x1f\x13\x3b\xd1\xc9\xbd\xf6\xf6\x64\x71\x13\x3e\x1d\xb4\xc6\xe8\x49\xe2\x17\x4c\x93\x94\xa6\x67\xea\x43\xef\x8c\x8a\x25\xe4\xb3\x68\x94\xff\xd1\xd4\xd4\x34\x3c\x08\xc6\xb0\x07\x73\x32\xeb\xf2\x5c\x7d\x62\xbe\x16\xce\x6d\xed\xbd\x52\x63\x85\x0e\x10\xfd\x3c\x69\xbc\xb1\x93\x3d\xe9\x2b\x74\x30\x5c\x8a\xaf\xad\xe5\x12\x5d\x46\xbf\x10\xeb\xc9\xb8\x19\x5b\x84\x63\xad\x36\xb0\x4b\xf4\x67\xa5\xd8\x47\x4f\xe0\x33\x38\xc0\x59\xe4\x06\xdf\x4b\xcb\xcf\x6c\xf3\x3d\x9a\x09\xdc\xe1\x5d\xe1\xbf\x52\xb5\x0b\x3e\x81\x63\xd8\x48\x3e\xc0\xbd\xc1\x66\x59\x72\x2b\x33\xf5\xa8\x76\xe7\x93\x6a\x2b\xf0\x82\xbd\x45\x2f\x16\x1a\x23\x39\xb3\xb2\xbb\x01\xaf\x79\x94\x3e\x69\x35\x7e\xa2\xf5\x0d\x1f\xbc\xcd\xe3\x92\xa7\x51\x6b\x9f\x33\x3c\xb5\x69\x38\x42\xde\x45\x5f\x83\xf7\x83\xe9\xb0\xdc\x7a\xbd\xd2\xfa\x41\x3f\x80\x8d\xf4\x61\x67\x33\x88\x68\x93\x4c\x7b\xb1\xb2\x19\x41\xf4\xbb\x57\xdb\xa8\x47\x74\x60\x65\x75\x14\x4c\xb3\x11\x0b\xb9\x53\x29\xf5\x9e\x06\xcd\x43\x9f\x51\x0f\xcc\x04\xcc\x0d\x72\x13\x38\xa9\x16\x95\x73\xc7\xc7\x58\x82\x6d\xec\x57\x76\xaa\x7f\xe5\x4e\xa1\x34\x6d\x52\x6a\x3f\xe4\xa6\xe9\x05\x73\x83\x6a\x97\xa2\xd4\x7e\x90\x5c\x99\x1f\x82\xc1\x66\x93\xcc\x46\xad\xde\x55\x8c\x83\xe6\x86\x0f\xbe\x11\x77\x7e\xf3\x07\x9d\xd5\x2a\x56\x31\x4b\x60\x2f\xf1\x68\x26\xb3\x31\xd7\x98\x64\xad\xe6\x55\xee\x77\x66\x5d\xc3\x79\xf4\x67\x6d\x77\x38\xcc\x50\x60\x96\xe8\xee\x52\x31\x12\xec\xa3\x4e\x98\x09\xd1\x87\xe8\x48\x66\x12\xc9\x71\x69\x5a\xaf\x54\x4c\x25\x97\x9d\xdd\x75\xe5\x16\xaf\x83\x26\xa6\x2e\x44\xd7\x61\x43\xb0\x79\xa2\x50\xdd\x09\x67\x90\x77\x30\x9b\x7e\x81\x77\xf3\x5e\xeb\xbc\xb6\x3d\x88\xbf\x60\xa7\x57\xdc\x92\x59\x66\x32\xac\x2e\x35\xaf\xd8\x24\xf7\x54\x36\xb3\x08\xe7\x8c\xaa\x2d\x65\x5e\xf0\x8a\x0b\xe4\xa6\x30\x6d\xcb\xbe\xd8\xc4\xcc\x21\xf7\x50\x9d\x62\x25\x76\xe0\x1f\xbd\xdb\xdb\x5d\x11\x1f\xb4\xb8\x70\x8b\x61\x3a\x31\xe2\x0c\xe1\xd7\x49\x79\x8d\x5e\x16\x4c\x68\xd4\x6f\x62\x09\xa6\xb2\x37\xb8\x2c\xb3\x48\x61\x5a\xde\x62\x4d\xbe\xf2\x43\x8d\x5a\x4d\x83\xe7\x72\xef\x65\x33\x2c\xf5\x4d\xfd\xcb\x7c\x5f\x9b\x9f\x68\xea\x41\xbf\xc3\xa1\xc2\x27\x76\x77\x27\x3a\x61\x50\x5e\xe9\x8c\xbf\x65\xe6\xaa\x35\xb6\xb2\xd7\x68\x5c\x9c\x69\xdd\x76\x36\x27\x77\xc6\xa7\xf4\xf7\x60\xf7\x95\x95\xdd\x4b\xa2\x49\xd0\x37\x87\xf9\x6c\x36\x0c\x66\x9e\x41\x13\x0d\xd4\x46\x50\xfe\xa8\xac\xa7\xc1\x5e\x72\xc7\x3c\x2a\x9a\x7f\x54\x9e\xa2\x77\xe8\x13\xe1\xa6\x4e\xf3\x44\x0e\xc1\x08\x6a\xbd\xb0\x58\x89\x46\xeb\xb4\x57\x8a\x41\x6b\x7f\xb0\xf9\x88\x1a\xa5\x47\xd1\x5b\x32\xc7\x14\x8a\x27\xa5\xc5\x12\x0c\x6a\x6d\xfe\x60\x46\x08\x76\x5f\x49\x1d\xd2\xcf\xde\xe6\x91\xdc\x7a\xc6\xdb\x9d\x49\x7b\x98\x65\xed\x7e\x91\xde\x81\xe3\xc6\x13\x9e\x63\xff\x60\x77\x0f\xad\xcd\x90\xc4\x0a\x5e\xe6\x3d\x99\x93\x83\xea\xbc\xe9\x30\x0f\x36\xda\x43\xa5\xdd\x7b\xa0\x7f\xf2\x13\xfc\x95\x59\x2d\xa8\xe6\x61\x7f\x6a\xb5\x37\xbd\xd6\xda\x3d\xc3\x64\xba\x02\x2c\xa1\x57\xa8\xc1\xe0\x1f\xe7\xdc\xc1\x30\x14\x1f\xe1\x6c\x6a\xbc\x32\xbc\xe0\x5c\xea\x6d\xb0\xdc\x09\x2f\x96\x5a\xb3\x32\x7f\x06\xbb\xe7\x0c\x3a\x2b\x83\x8f\xd4\xad\xf4\x8d\xf1\x98\xe8\x1a\xd3\x1e\x83\x71\xbc\xcc\xf7\x83\xe9\x2e\xc3\x6b\x99\x39\x8d\x07\xc1\x17\xd1\xdf\x8d\x69\xdb\xc1\x66\x36\xc3\x63\xb0\x63\xb6\x3b\x11\xf0\x9c\x67\x83\x69\x44\x7a\x00\x0e\xcf\xbd\x62\x7a\x66\xf7\x55\x82\xd5\x93\xc6\x29\x37\x2d\x8e\xde\xc3\xc6\xc2\x66\xc4\xde\x7c\x3f\xe8\xde\xd9\xee\x63\x9f\xcf\x86\xe0\xa0\x68\x80\xc1\xf8\xa2\x51\x0e\x7a\x36\x1b\x1e\x87\x94\x5f\x9a\x0d\xff\x17\x00\x00\xff\xff\x33\xc5\x59\xa9\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1486460989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

