// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x8f\x41\x6e\x84\x30\x0c\x45\xf7\x9c\x22\xca\xbe\xb1\xc4\xa2\x8b\x2a\x70\x97\xe0\xb8\x8a\x69\x08\x28\x36\x48\xdc\xbe\x29\x54\x33\xd2\x2c\x67\x69\x5b\x7e\xef\x7f\x9f\x74\xc9\x63\xe7\x13\x85\x38\x76\xc6\xf8\xcc\xe5\xc7\xa4\x4a\xdf\x83\x85\x6d\x9f\x32\x23\x88\x9e\x99\x1c\x8a\x58\x53\x29\x0f\xf6\x9a\x25\x11\xa9\x85\xe7\xcf\xeb\xe9\x1f\x92\x54\x37\xf9\x02\xc0\x58\xdc\x2c\x91\x32\x1f\xd5\x15\x52\x10\x5a\x42\x51\xc6\x8f\x9d\xa1\x77\xbd\xfb\x7c\x6c\xdc\xc2\xe5\xd2\x5d\x70\xc1\xca\x9b\x1a\xa9\xf8\x3e\x6c\x6e\x2c\x0f\x37\xa9\x95\x85\xbb\xad\x9f\xd6\x78\xfe\x39\x9a\x25\xf2\x61\x30\x07\x91\xc1\xee\x6c\x70\x2d\x1a\xb8\x50\x6d\x11\x7e\x03\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xc1\x6e\x9c\x30\x10\xbd\xef\x57\x8c\x50\xcf\xa0\xe6\x58\xb1\x48\x6d\x93\x4a\xbd\x54\x55\xd2\x1f\xf0\x9a\x21\x58\x0b\x36\xb2\x4d\xa4\xc8\xe5\xdf\x3b\xb6\x09\xeb\x65\x77\x51\x52\x5f\xd6\x3b\xf3\x98\x79\xbc\x79\x83\x73\x16\xfb\xa1\x63\x16\x21\x3b\x30\x83\x45\x8b\xac\xce\x20\x9f\xa6\xdd\xae\x64\xd0\x6a\x6c\xf6\x59\x91\x01\xef\x98\x31\xfb\x6c\x14\x40\x28\xc1\xa1\x17\x52\x80\x16\xcf\xad\x85\xa6\x53\xf4\x78\x0d\x87\xd1\x5a\x25\xb3\xea\x1b\xe3\xc7\xb2\x60\xd5\xae\x6c\x3f\x57\xdf\x5b\xa6\x0c\xf4\x4a\x1e\xf1\xb5\x2c\x28\x40\x65\x87\x6a\x07\x74\xd2\x14\x08\x03\xce\xe5\x21\x94\x3f\x59\xaa\x37\x4d\x79\x40\x39\x27\x1a\x98\x13\x5f\xb9\x15\x2f\x94\x09\x09\x7f\x4e\x0c\xb9\x07\x14\x03\x1b\x0d\xa6\x64\x37\x68\xfe\xf6\xd8\xc0\x33\xb6\xc1\xce\x6c\x95\xd6\x68\xc6\xfe\xbd\xb5\x1f\x03\x38\x2d\x2e\x6b\xaa\x5d\x16\x83\x7f\xff\xf6\xae\xf2\xaf\x28\x8c\x15\xdc\x90\x28\x77\x3e\x68\xd9\xa1\xc3\xa4\x3a\x57\xfd\xc0\xb8\x05\x8e\x5d\x47\x95\x8d\xd5\x62\xa0\xdf\x00\xcb\x62\xd9\xd2\xfa\x61\xbd\xdd\x75\x75\xe2\x6e\xdb\xca\x6b\xa5\x64\x59\xd0\xf5\x2c\xee\x3b\x8f\xe6\x4a\x7c\xe4\x1c\xb1\xc6\xfa\x32\xf5\x83\x89\xee\x5a\xfc\xe9\x28\x86\x21\x4d\xd0\x4d\x2f\xb7\xc8\xcd\x39\xd0\x4c\x3e\x23\x7c\x32\x16\xbe\xec\xd3\x49\x2a\x69\x60\x16\x7c\xc5\xbe\xae\x9c\x23\x7c\xfe\x8b\xf5\x34\x12\xaa\x55\x9f\x67\x97\x3f\x8b\x41\x3c\xfa\x41\x7a\x6d\x48\x67\x38\xcb\xfb\x33\xa7\x2e\xe2\xeb\x21\xc7\xb6\x3f\xef\xa7\xa9\xa8\x85\x09\x52\x27\x23\xb1\x42\xbe\xde\x18\xf8\x8c\x5e\x26\x7e\x22\xb7\xb2\xd5\xdb\xb9\x8f\x0f\x7c\x88\x12\xca\x0f\x30\x8a\xe0\x6b\x84\x82\x15\x97\x76\x17\xe2\xc6\x86\x8b\x1d\xae\xe9\x1f\x21\xd1\x16\xb7\xf3\xb3\x3d\x52\x40\x34\x08\x79\x82\x48\x40\x58\x88\xe0\xe7\x79\x29\x1e\x91\xa3\x24\xc7\xfb\xf7\xbe\xb9\x16\xff\xb9\x0e\x7f\x84\xdf\xc7\xb5\x83\xd7\x4b\xb2\x69\x60\x4c\xfc\xfb\xf0\x42\x4c\x37\xed\x8b\xb9\x6f\x09\x7f\xa1\x51\xba\x67\xd6\xff\xb9\x21\x15\xce\xdb\xf0\x3e\xa1\x2e\x3e\xd8\x8d\x52\x16\x75\xf8\x64\xff\x0b\x00\x00\xff\xff\x1a\x46\xdc\x95\xcd\x05\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 1485, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x5f\x6f\x9c\x46\x10\x7f\xf7\xa7\x58\xa1\xbc\x16\xd4\x3c\x46\x67\x24\xd7\x6e\x14\xab\x4e\x5a\x5d\xec\xf6\x79\x0f\x86\x63\xd5\x85\x45\xbb\x83\x53\x8b\xde\x77\xef\xec\xb2\xc7\x01\xcb\x9d\x70\xe3\x20\x25\x86\x9d\x7f\xcc\x6f\x66\x7e\xcc\x75\x1d\x42\xd5\x48\x8e\xc0\xa2\x1d\x37\x90\x94\xc0\xf3\x88\xc5\x87\xc3\xd5\xd5\xa6\xfc\x39\xfd\x0b\x64\xa6\x2a\x60\xa8\xd8\x23\x18\xbc\xd9\x43\x8d\x9b\x84\x04\x24\x46\xbe\x93\xc0\x32\xc9\x8d\xb9\x8e\x5a\xc1\x32\x25\x25\x6f\x8c\xa8\xf7\xec\x19\xf4\x0b\x3d\x57\x0d\xcf\x90\x19\xd4\xa2\x81\x9c\x39\xfd\x28\xbd\x62\x74\x6d\xd0\x06\x3a\xde\xeb\xfe\xa6\x7f\xc8\xd3\xfb\xbb\x4d\x82\xf9\xf4\xac\xeb\xe2\xfb\xbb\xc3\xe1\x24\xa0\x3b\x7d\xc6\xfe\xa9\x59\xb4\x7f\x6a\x50\x54\xb0\xd2\xc7\x9f\xa0\x8d\x50\xf5\xa2\x23\x2f\xbb\xaf\x0b\xb5\xd2\xdb\x8d\xe6\xf5\x5e\x31\x51\xf1\x3d\x2c\xba\xec\x15\xee\xad\x3c\x74\x49\xff\x5b\xe8\x2c\xe6\xe5\xfb\xf4\x56\xb6\x06\x41\x53\x15\xde\x2f\x56\x01\xa4\x24\xb0\x5f\x09\x7a\xd9\x83\x5e\x4e\xcf\x6e\x35\x50\x67\xe4\xc9\x57\xe4\x9a\xfe\xce\xdf\xbc\x4c\x7d\x3f\x04\x76\x4a\xe9\x5c\xd4\x1c\x95\x0e\x85\x77\xbf\x7c\x05\xfd\x0c\x23\xc9\x08\xb8\xc4\xbf\x62\xd7\x31\x8b\x08\xb0\x77\x15\xfb\x70\xcd\xe2\xcf\x3c\x2b\x45\x0d\x86\x51\x63\x2e\x22\x3c\x3c\xd8\xab\xeb\xde\x55\xae\x5d\x26\xa7\x1b\xce\x4a\x0d\xc5\x75\x94\x48\xb5\x37\xc9\xa0\x94\x54\xbd\xf3\x88\xa1\x40\x09\xd7\xd1\x03\x89\xa3\x74\x23\x8e\xa8\x16\x82\x10\x46\xf8\x07\x99\x6a\x51\x92\x26\x13\x99\xaa\x49\x23\x11\xf4\x8f\xa7\xeb\xa2\xd4\x80\xdf\x94\xfe\x7b\x88\xf2\xa5\x7f\x66\x72\x16\xed\x9b\x28\xc4\xb9\x00\x61\xef\x84\x79\xfb\xa2\xdd\xe0\x2c\xfd\x24\x54\xf5\x75\x9d\xa8\x4e\x43\x74\x9d\x28\xa8\x06\xf1\x27\x6e\x5c\xad\xc7\x8a\x98\x1f\x5f\x99\xaa\x95\x19\xb3\xa5\xca\xbd\x58\xe5\x07\xee\x99\xc2\x9d\x50\x10\x6c\x6d\xe1\xa2\x65\xa0\xc8\x98\x6c\x9c\xfe\xd3\xf6\x81\xf4\x8e\x5d\xb5\x16\x58\x6e\xd5\xbf\xbf\x78\xf3\xc4\x41\x1a\x98\xa6\x9b\xfe\x14\xe8\xd4\xf9\x6a\x44\x46\x43\xf1\x0a\x5c\x46\x56\x1e\x9d\xc9\x70\xad\xc5\x28\x3b\x19\xbd\x35\x52\x97\xb3\x3e\x4e\xfb\x2b\x52\x3e\x9a\xf8\x7c\x4f\x7c\xb1\x36\xd9\x7c\x67\x9c\xc5\x5b\x66\xda\x73\x14\xbd\x20\x95\xdc\x92\xd0\x94\x93\xed\xb7\xd1\x2c\x32\x32\x92\x84\x7d\x07\x2d\x7f\xe1\x15\x84\x1c\xda\x03\x19\x9e\x6f\xc1\xb4\x12\x17\x04\x37\x19\xd2\x17\xcb\xac\xe4\x5c\x74\x9c\xeb\x92\x1a\x11\xee\xb4\xca\x56\xfa\xfb\x6f\xa4\x1b\x7f\xe4\x42\xb6\x1a\x66\x75\x0d\xc8\x69\x28\x97\x85\xc4\x56\x0b\x63\x9b\x9c\x35\x1a\x3d\x9c\xaf\xf2\xdc\x2c\xe9\x89\x73\xa2\xec\x0c\x56\x95\x79\x1a\x63\x55\x77\x1b\x02\x1d\xa2\x39\xe3\x5a\x7e\xc4\xd8\xe2\xfb\x0c\x33\xc6\x1d\x2b\xfc\xc1\x5b\xbb\x19\x2d\x68\xd8\xcb\x4b\xe3\x38\x5e\x70\x30\x23\xa2\xf1\xb5\x6d\xeb\x9a\xec\x16\x65\xa7\xf1\x08\x90\x6b\x28\x1c\x7d\xee\x4e\x4b\x03\x8a\xfa\xa5\xdf\x4e\x98\xe4\x3b\x90\x0b\xb0\x0e\x6e\x07\x78\x9d\x97\x73\x90\x0e\xea\xf3\x7a\xfa\x9c\x26\xc4\x79\x31\x4f\x8b\x0d\xe4\x61\x99\xcf\xa7\x47\xbd\xd8\x56\xff\x27\xbf\x51\x6e\x92\xbf\x5c\x4a\x2d\x48\x2b\xf8\x16\x2c\x6c\x79\xa3\x59\x39\x1c\x58\xe1\x6f\xcf\x68\xfa\x89\x0d\xb7\xc1\x73\x1c\xf4\x71\xf0\xf7\xb6\x8b\xe1\xa3\x58\x62\xa0\xcf\x60\x4c\xbf\xcc\x06\x14\xd4\x28\x8d\x2b\x89\x46\x3b\xa2\xe9\x4d\xce\xef\x76\x84\x87\x8e\x1f\x67\xbb\xfb\x44\xe8\xdf\x66\x49\x3e\xf4\x89\x53\xfc\xb4\x85\xc2\x33\x8e\xa6\x99\xc4\xb2\x67\x9c\xb5\x18\x6f\x21\xa3\x5d\x83\x65\x25\x57\x1e\xe7\x4d\xd3\xdb\xf5\x8c\xfc\x81\xfa\x20\xbe\xb5\x52\xbb\x5b\xe1\xb1\x9d\x1d\x09\xf8\xf3\x80\x29\x4e\x8d\xec\xdc\x86\xc3\x59\x89\x5a\x30\x2d\xf6\x25\xb2\x42\x2a\xbb\xdb\xb1\x5d\x8b\x68\x7b\xd3\xcd\xc6\xd0\x8b\xe1\xce\x32\x73\x1d\x0e\xc6\x05\xdf\x5b\xa7\x3c\x76\x3e\x34\xf8\x66\xa7\x13\x0f\xd7\x34\x42\x94\xde\x01\x52\x1f\x1a\x67\xb6\x49\x9a\x1f\xdf\x88\xfd\x9c\xac\xec\x37\x70\xfd\xd6\x17\xe2\xd7\x67\x2a\xe5\xc5\xa6\x03\xd7\x74\xec\x5f\x56\x28\x5d\x71\xbc\xd0\x81\xe0\xc7\x75\xdd\xb4\x06\x3f\xba\x0b\xa5\xd0\xae\x2b\xf4\xb3\xfb\xbf\x00\x00\x00\xff\xff\xd4\x7f\xc8\xdd\x91\x0f\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3985, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8e\xc1\x6a\xc5\x20\x10\x45\xf7\x7e\xc5\x2c\x5b\xb0\x83\x3c\x08\x85\x17\xe8\xbf\x4c\xcc\xd4\x4a\x8c\xc2\x68\x16\xa5\xe4\xdf\x1b\x49\x6c\x13\x4a\xdf\xca\x01\xcf\xbd\xe7\xa2\x30\x8d\x9f\x1a\xf6\x17\x08\xbe\xc0\xa6\x90\xe4\x0e\x4e\x98\x63\x0f\xab\xc2\x98\x4a\xa3\xda\x79\x06\x93\x50\x74\x5c\x49\x85\x85\x73\x49\xd3\xf6\x37\x90\x9d\x9c\xa4\x25\x8e\x2f\x07\x26\x6e\xa0\x27\xa3\x6f\x5d\xa7\x8d\x36\x78\x7b\xae\xd5\x95\x7f\x27\x1f\x16\xe1\xfc\x7f\xea\xc8\xb4\x94\x42\xbb\x21\x85\x25\xc3\xaf\xf0\xba\xfa\x6f\x91\x8f\x1f\x2c\xbe\x54\xe9\x35\x7d\xd2\x37\x27\x8f\x8f\x1b\xf6\xdd\x80\xb9\x50\x61\xc0\xc5\x63\xa0\x81\xc3\x1b\x7a\x9b\xe2\xd6\x33\x93\x38\x1f\xef\x60\xc0\xe0\x6b\xc7\xf3\xcf\xd1\xaf\xea\x3b\x00\x00\xff\xff\x42\xde\x01\x3f\x71\x01\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 369, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcb\xae\x9b\x30\x10\xdd\xf3\x15\x23\x94\x35\x56\xb7\x11\x41\x6a\x2b\x75\x53\xf5\xa1\xde\xfe\x80\x63\x26\xc1\x2a\x2f\xe1\xe1\x76\x61\xe5\xdf\x7b\x6c\x70\x02\xbd\x7d\xb2\x49\x66\xe6\xcc\x9c\x73\xc6\x60\xef\x85\xbb\xb1\xd5\xc2\x94\x9f\xb5\x63\xd5\xb0\xae\x73\x2a\x6e\xb7\x2c\x2b\x6b\xfb\x4c\xa6\xd5\xce\x9d\x72\x61\x27\x79\x95\x79\xff\xdd\x4a\x43\x07\x39\x9e\xa8\xf8\x8a\x1c\x70\xa5\xa6\x66\xe2\xcb\x29\x57\x79\x42\xcf\x96\x30\xcc\x1a\xea\x6c\x6f\x69\xb2\xd7\x46\xe8\xd2\x0e\x60\xa9\xe9\x3c\x8b\x0c\x7d\x5e\xbd\xd1\xe6\x5b\xa9\x74\x95\x95\xcd\xab\xca\xfb\x83\x14\x1f\x75\xc7\xb7\x5b\xa9\x10\x67\xe5\x98\x66\x39\x41\x1b\xa8\x09\xcf\x53\xf8\x7f\x24\xc8\xb0\x17\x88\x28\x5e\x1b\xb1\xcf\xe8\x89\xc5\x94\xfc\xac\x67\x67\xfb\xeb\x9a\x0d\xcf\xb8\x64\x8a\xa2\x58\x81\xdc\x3a\xde\xd4\xa7\xb9\xef\x51\xbf\xc7\x0f\x47\xc1\xb6\xda\x88\x53\x61\x14\x6f\x7d\xfe\xc1\x61\x10\xc2\xd1\xe2\xca\xda\xd7\x20\xdd\xb1\xc7\x71\x75\xf6\x17\xd2\x89\xdd\xdc\xfd\x2b\xeb\x97\x08\x8e\xb4\x89\xb2\x54\x63\x85\xe3\x14\x7d\x6e\x79\x33\xc4\x0c\xdd\xa8\x8d\x90\xe1\xb6\xc5\x00\x27\x93\x1d\xf1\x1b\x61\xeb\xc2\x4b\x99\xaa\xc7\x5a\xa4\xae\xde\x69\xdb\xce\xd0\x73\xa4\x28\x30\x85\xe1\xd8\x50\x5d\x7a\x54\x6a\xf2\x7e\xd2\xfd\x95\xe9\xd0\x11\xde\x17\xc0\x3f\xb0\x73\xfa\x1a\xe1\xc0\x84\x79\x98\xd2\xc5\x66\x84\x2a\xc6\x49\x72\x94\xf1\xbf\xb2\x51\x9c\x7b\xe1\xc9\xdd\xf5\x87\xf7\xf9\x97\x5e\x9a\xea\xed\x82\x05\x55\xb3\x2f\x3c\xcd\xc6\x30\xd7\x5c\xbf\x2c\x05\xc3\xdb\xfc\xc3\x6c\xc8\x45\x2e\xef\x69\xb5\x6d\x56\xdb\x2b\x91\xa3\xf5\xd4\xa1\x24\xf9\x01\xd8\x38\x17\xbe\xa4\x4f\xef\xd1\x50\x2c\xf3\x01\xcc\xf7\x7b\xc7\x9e\xcc\xfd\x03\x49\x9b\xde\x15\xef\xa2\x7f\x8b\x58\x66\xbf\x3c\x2a\x68\xc0\xd2\x69\xb7\xf5\xc7\x39\xe0\x12\x88\xf1\x4f\xf7\xc4\x65\x18\x60\x29\xde\x14\x3f\x02\x00\x00\xff\xff\x4a\xe0\x06\x19\x44\x04\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 1092, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

