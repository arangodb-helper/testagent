// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x51\x4f\xdb\x30\x10\x7e\xe7\x57\x9c\xa2\xbe\xce\x16\x3c\x4e\x6e\x24\x06\x43\xa0\xc1\x36\x15\xa6\x3d\x9b\xe4\xd2\x58\x73\xec\xca\xbe\xa2\x21\x2b\xff\x7d\xb2\x93\x94\xb0\x86\x2e\x48\x5d\x9f\x92\xbb\xef\x7c\x77\xdf\x17\x7f\x6a\x08\x84\xcd\x46\x4b\x42\xc8\x1e\xa5\x47\x5e\xa3\x2c\x33\x60\x6d\x7b\x72\x22\xea\xd3\xfc\x27\xea\xc2\x36\x08\x64\xe1\x01\x3d\x9d\xaf\xd1\x90\xe0\xf5\x69\x1e\xd3\x67\xf9\x85\xde\x7a\x42\x27\x78\x7d\x16\x23\x24\x1f\x35\x42\xa1\xa5\xf7\xcb\x6c\xab\xa0\x40\xad\xb1\x04\x4f\x4e\x6d\xb0\x84\x94\xce\xf2\x13\x00\x00\x41\xb1\xd3\xf0\xec\xba\x87\x3e\x91\xdf\x5c\x0a\x4e\xf5\xeb\x58\xdf\xfa\xef\xf0\x85\xb5\xae\x54\x46\x92\x75\xfb\xc9\xcb\x4f\xf7\xe8\x9e\x70\x94\x11\x7c\xe8\x15\x63\x69\x82\x10\xc0\x49\xb3\x46\x58\x34\xf0\x71\x09\xec\x4e\x16\xb5\x32\xe8\xa1\x6d\xa7\xa6\x2b\x5f\x5e\xe2\x2f\x84\x45\xc3\x6e\x2e\x7b\xec\x0e\x26\xa1\x76\x58\x2d\x33\xae\xed\xda\xf3\x1d\x88\x37\xdd\xe1\x19\x90\x22\x8d\xcb\xec\xd6\xae\x7d\x96\x0b\x35\x90\x56\x29\x8d\x40\xf8\x9b\xc0\x6e\x49\x2b\x83\xa0\x0a\x6b\xb2\x5c\x70\x95\x0b\x2e\x47\x83\xf0\xf1\x24\x21\xa8\x0a\x16\x0d\xbb\x96\x3e\xf1\x34\x1a\x47\x50\x39\x1c\x1e\x02\x14\xde\xaf\x50\x96\xcf\x11\x7c\x2b\x7b\x41\x53\xe4\x9e\x24\x6d\xe3\xd2\x59\x3e\xb9\x4a\x08\xb1\x26\xe1\x7f\xac\x6e\xa1\x6d\x07\x45\xe4\x34\x7e\x6f\x75\x19\xe1\xc7\x5f\x1c\xb5\xc7\xd7\xeb\xe6\x1f\xf6\x30\xa6\x9c\xcd\xc8\xe8\x83\x7a\x07\x2f\xa3\xaa\x9e\x9d\x57\x1f\xe6\x5c\x8e\x8a\x97\xa2\x63\x33\x75\x78\xeb\xe1\xa6\xbc\x63\xe5\xa1\xa4\xdf\xf7\xe5\xae\xcd\x5d\xb6\x7c\xf4\xa9\xe2\x98\x9b\x76\xf7\x3b\x04\x40\x53\xc6\x0b\x2c\x78\x32\x9d\xde\xae\xa2\x85\xf9\x63\x9b\xd5\x57\xd9\xe0\xbe\xf5\x44\x0e\x71\xa6\xef\x50\xf2\x9d\x34\xdc\x9b\xa6\xb3\x63\x91\xd0\x53\x24\x91\x58\x6c\x1c\x35\x1a\xbd\xfc\x43\xf2\xd8\xe2\xdb\x17\x58\x10\xbb\x92\x4a\x6f\x1d\x76\x22\xa7\x03\x86\x48\xdb\x42\xd5\x3f\xce\xa5\xf5\x6a\x87\x3f\x2e\xb3\x0f\x6a\x8a\xd9\x3b\xf4\x5e\xae\x27\x12\x2b\xdc\x58\x47\x33\x39\x77\x89\xf3\xae\xe4\x6d\xd6\x43\x58\x38\x16\xc7\x98\xa0\xb6\x4b\xf6\xd3\x4c\xe5\x77\x92\x25\xe0\xf5\x0a\xab\x9e\x6c\xc7\xbe\x4b\xaa\x63\x89\xcc\xe7\x72\xbc\xc2\x02\x0d\x41\x51\x4b\xdb\xf3\x2c\x36\x5d\x5d\xf2\x7e\x76\x11\x13\xec\xbc\x20\xf5\x84\x6d\x9b\xde\xa0\xb1\xe6\x17\x3e\x83\xf2\x60\x0d\xeb\xb1\x9d\x5d\xee\xe5\xab\x6a\x07\x48\x5e\x29\xf8\x26\xff\xdf\x42\xc6\x61\xad\x99\xa9\x17\x26\xbd\xba\x2d\x3f\x3f\xa1\x39\x2c\x1a\x1e\x12\x0d\x59\xd7\x79\x9c\x7e\x9b\xfc\xbd\x7f\x48\x95\xb5\x14\x4d\x8b\xb5\xed\x9f\x00\x00\x00\xff\xff\x14\xa2\x36\x0c\x3e\x09\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 2366, mode: os.FileMode(420), modTime: time.Unix(1485857440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x43\x21\x10\x84\xe1\xbb\x55\x4c\x01\x89\x05\x24\xd5\x6c\x74\x23\x41\xd9\x85\x55\x0f\x41\xec\x3d\x48\x10\x3c\xbc\xd3\xcc\xe1\xe3\xf7\xc6\x14\xbf\x37\xfc\x17\x84\x81\xa0\x45\xed\x81\x64\xcc\xf2\xc4\x74\x5e\xb4\x6d\xb5\xef\x09\xd5\x48\x12\x2f\xe9\x7c\xe3\xda\x34\x63\xe0\x45\x21\x27\xd3\x2e\xf1\x7e\xf6\x56\x6e\x99\x37\x7d\x4a\x37\xae\x97\xd2\x38\x62\xba\x5f\x00\x00\x00\xff\xff\x5d\xf4\x8d\x91\x9a\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 154, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x5d\x8f\xdb\xc6\x15\x7d\x26\x7f\xc5\x44\x40\x02\xa9\x50\x25\x7e\x7f\x08\xf0\x4b\x6c\x07\xf5\x43\x1d\xa0\x75\x9f\x7a\x8b\x60\x66\x38\xb3\x21\x2a\x89\x2a\x49\xa5\x77\x6d\xec\x7f\x2f\x0e\x2f\xa5\xd5\xae\x37\x71\x61\x04\xc8\x83\x44\x72\x38\xf7\xfb\x9c\x33\xdc\x6e\xd5\xeb\xae\x71\xea\xce\x1d\x5d\xaf\x47\xd7\x28\x73\xaf\xee\xba\x3f\x9b\xf6\xd8\xe8\x51\x6f\xc2\xed\x56\x0d\xdd\xb9\xb7\x6e\xd8\xe1\x7e\x74\x87\xd3\x5e\x8f\x6e\xd8\x1a\x3d\xb8\xad\xef\xba\xd1\xf5\x9b\xf1\x70\xda\xbf\xf0\xf6\x67\xa7\x9b\x17\xde\xb5\xc7\xc6\xf1\x0b\xeb\xa7\xb3\xd9\xb7\x76\x3b\x8c\xf7\x7b\xb7\xb1\xc3\xf0\xf4\xed\xf5\x6e\x73\xd7\x3d\x7f\x33\x8c\x57\x77\x6f\x7e\x54\xef\x7f\xfc\xa0\xde\xbe\x79\xf7\xe1\x9b\x30\x3c\x69\xfb\x6f\x7d\xe7\x1e\x37\x87\x61\x7b\x38\x75\xfd\xa8\x96\x61\xb0\x30\xf7\xa3\x1b\x16\x61\xb0\xb0\xdd\xe1\xd4\xbb\x61\xd8\xde\x7d\x6c\x4f\x58\xf0\x87\x11\x97\xb6\x93\xff\x6d\xdb\x9d\xc7\x76\x8f\x87\x6e\x32\x38\xe9\xf1\xe7\xad\x6f\xf7\x0e\x37\x58\x18\xc6\xbe\x3d\xde\x4d\xef\xc6\xf6\xe0\x16\xe1\x2a\x0c\xfd\xf9\x68\xd5\xdc\xc8\xbf\x39\xdd\x2c\x71\xa3\xfe\xf9\x2f\x84\x5d\xab\xa3\x3e\x38\x25\x66\x2b\xb5\xbc\xac\xba\xbe\xef\xfa\x95\xfa\x14\x06\x77\x1f\xa7\x27\xb5\x7b\xa5\x90\xd5\xe6\xbd\xfb\x2f\x9c\xb8\x7e\x39\xa5\x8d\xe7\xef\xcf\xde\xbb\x7e\x72\xbb\x5a\x85\x41\xeb\x27\x83\x6f\x5e\xa9\x63\xbb\x87\x8b\xa0\x77\xe3\xb9\x3f\xe2\x71\xad\xfc\x61\xdc\xbc\x85\x77\xbf\x5c\xc0\x91\xfa\xf6\x3f\x3b\xf5\xed\x2f\x0b\xc9\x64\x8a\xb5\x0a\x83\x87\x30\x0c\x7e\xd1\xbd\x32\x67\xaf\x24\x8e\x04\x09\x83\x9f\x24\x9d\x57\xaa\xed\x36\xaf\xbb\xd3\xfd\xf2\x3b\x73\xf6\x6b\x75\xf7\x71\x15\x06\x76\xff\xf6\x92\xe9\xe6\xf5\xbe\x1b\xdc\x72\x15\xfe\x5e\xf9\xc0\x8d\xf8\xff\x15\x47\xae\xef\x25\xef\x79\xd1\x9c\xfd\xe6\x7b\xa4\xbe\x5c\xad\xb1\x23\x7c\x08\xc3\xf1\xfe\xe4\x94\x1e\x06\x37\xa2\xe5\x67\x3b\xc2\xcb\x54\xdf\x3c\x8f\x30\x68\x8f\xbe\x53\xaa\x1b\x36\x3f\xb4\x7b\xf7\xee\xe8\xbb\xab\xdd\x3c\xc2\xcb\xfa\x8d\x87\x69\x86\x4a\xcd\x63\x0c\x83\xa1\xfd\x38\x3d\xb7\xc7\xb1\xc8\xc2\xe0\x00\x66\xa9\xab\xd3\xbf\x76\x8d\x9b\x16\x3f\xb4\x07\xa7\x00\x93\x0d\xee\x10\x67\x82\xca\xd2\xb7\xcf\x63\xad\xd4\x7b\x7d\x70\xcb\xd5\x1c\x01\x31\xe7\x2a\x7d\xbb\x41\xf4\xf0\xe1\x37\x6c\xff\xde\x7e\x84\xed\x94\xcd\x53\x53\x24\xfa\x9b\xa6\xc8\x75\xb9\xba\xcd\xfc\xa9\x03\x94\xf6\x25\x07\x28\x6e\xb9\x7a\x2c\xf4\x33\x0f\x73\xf5\xbf\xee\xe4\xdd\xf0\xa6\xed\x97\x2b\x65\xba\x6e\x7f\x6b\xad\xf7\xc3\x17\x2a\xbf\x1f\xa4\x70\xd7\x7b\x6d\xdd\xa7\x87\x1b\xeb\x19\x12\x40\xf9\x4f\x90\xa9\x1f\x26\x0d\xfb\x70\x38\xed\xd5\xab\x19\x0d\xcb\x05\x71\xec\x89\x2b\x43\x1c\x55\xc4\x51\x34\xff\x6a\xe2\xc2\x11\x57\xf3\x9a\xf7\xc4\x26\x21\x6e\x62\xe2\xcc\x13\xdb\x9a\x38\xb1\xc4\x26\x25\x76\xe9\xb3\x77\x5a\xae\xba\x26\x8e\x32\x59\x8f\xb1\x3f\x27\x36\x35\x71\x5a\x13\x97\x05\x71\x15\xdd\xc4\x9b\x63\xe0\x97\x94\xc4\xba\x99\xdf\x7b\xe2\xb8\xb8\xdd\xb7\xb8\xea\xcd\x93\x8a\x66\x1e\xbc\xa4\x2f\x17\xb6\xdc\xe8\x53\x18\x04\xcf\x3a\xb2\x0e\x83\x60\xf1\x5c\xe9\x17\xeb\x30\x58\x5d\x51\xfb\xd4\x00\xb1\xfe\x34\x11\xed\x36\xd6\xc4\xb4\xab\x9c\xbd\x98\xe2\x97\xe4\xe2\xca\xf2\x89\xa7\xf0\xf2\x74\xe6\x9f\xc0\x86\x9d\x7a\x21\x59\x05\xb0\xef\x54\x92\xac\x15\x50\xbb\xbb\x05\xf5\x32\x4b\xa2\xd5\xb4\x0e\x2c\xee\x04\xab\xff\x38\xb6\xbc\x8c\xb3\x2a\x2f\xab\x34\x49\xf2\xb5\x8a\x56\x0f\x61\xa0\x11\xf4\xbb\xa9\xb4\x4f\x53\x3d\x3b\x35\x97\x85\x8c\x76\xd3\xff\xc3\xb5\xad\x7a\xfd\x19\xce\xfe\xe2\x74\xf3\xd5\x28\xab\x2d\xb1\xf5\xc4\x69\x4c\x5c\x68\x62\x9b\x13\xa7\xd8\x6b\x89\xa3\x82\xd8\x45\xc4\x4d\x43\xac\x4b\xe2\x18\xf7\x8e\xb8\x30\xc4\x16\x28\x33\xc4\xa9\x26\x8e\x33\x62\x5b\x12\x97\x25\xb1\x8f\x89\xeb\x94\x38\xcf\x89\xb5\x25\x6e\x32\xe2\x32\x26\xae\x12\x62\x9d\x0b\x42\xcb\x84\xd8\x1b\xe2\x06\x6b\x19\xb1\x01\x6a\x23\x62\x13\x13\xeb\x94\x38\xc9\x88\x3d\x7e\x0d\xb1\xb7\xb2\xde\x68\xd9\x5f\x27\x52\x57\x9d\x13\x97\x29\x71\x06\xd4\x3b\xe2\x24\x22\x4e\x91\x6f\x2d\xb5\xe7\xa8\xa1\x24\x36\x5e\xd8\x11\x3b\x62\x53\x8a\xcf\xa6\x26\xae\x32\xd9\xe3\x1a\xe2\xc2\x12\xc7\x96\x38\xab\x88\x9b\x9c\xd8\xa6\x52\x37\xfc\xf9\x5a\xea\x6d\x0a\x61\xda\xb4\xd7\x11\x97\x5e\x7e\xde\x11\xd7\xf0\x8d\xeb\xdc\x43\x73\xc9\xc3\x10\x27\x89\xe4\x0a\x9b\xa2\x20\x4e\x10\xdf\x12\xbb\x8c\x38\xae\x88\x75\x2c\xac\xc6\xd5\xcf\xf5\x19\x23\xb3\x32\x0d\xb1\xb3\xd2\xbb\x0a\xb1\x22\x99\xa7\xc6\xbc\x30\x3b\x43\x6c\x22\xc9\x1b\x75\xba\x84\x38\x71\xc4\xb9\x25\x2e\x6a\x62\x5b\x49\x4c\x1d\x11\x57\xa9\xe4\x0a\x3f\x16\x7e\x35\x71\x9e\x12\x5b\xf4\xc1\x10\x67\x5a\x6c\xe1\x03\xf3\x46\xed\xa9\x23\x6e\x4a\x99\x57\x89\xfc\x73\xc1\x0d\x6c\x50\x17\xfa\x8b\x1e\x5a\x43\xac\xb5\xcc\xbd\xf1\xc4\x51\x4e\x5c\x54\xd2\xdb\xba\x90\xb9\xfb\x54\xf2\x87\x92\x95\x8d\x60\xeb\xb9\x12\xa1\x5e\x9b\x10\xe7\x05\x71\xde\xcc\x31\xe2\x17\x95\xe8\x82\xf9\xaf\xd3\xa1\x8b\xf5\xa3\x0a\x5d\xbf\x28\x3f\xd7\xa0\xcb\xe6\xff\x57\x81\x9e\xa5\xf6\xbb\xea\xcf\x4d\x9a\x17\xf5\xa9\xa3\x3f\x50\x7e\xa6\x2f\xee\xaf\x3f\xe1\xb2\x79\xd6\xf3\x49\xd6\x18\xd1\x1e\xe8\x0c\xf0\xe6\x80\xaf\x52\x34\x4a\x27\xc2\x31\xeb\xe4\x84\x4a\xc1\x57\x27\x3e\xa1\x17\xc0\x53\x96\x0a\xd6\xa1\x4d\xc0\x6f\x0c\x0d\xc2\xde\x46\xb8\x02\xce\x41\x43\xf2\x4a\xb4\x03\xdc\x02\xa7\xe1\x17\xfe\x93\x98\x38\x31\x92\x1b\x30\x8a\x53\x16\x98\xae\x33\xe1\x59\x55\x08\x47\xc0\x37\xe0\xb3\xf6\x8f\x7c\x75\xb0\xb1\xa2\x81\xe0\x40\x5c\x8a\x3e\x40\x0f\xd0\x07\xe8\x0d\x78\x97\x21\x4f\xf0\x2d\x11\x7e\x42\x17\xc0\x8f\x0c\xb5\xba\x59\xff\x2c\x71\x9a\x12\x17\x11\x71\xd1\x10\x97\x46\x38\x08\x3e\x80\xb7\x4d\x2a\xba\x88\x93\x1b\xcf\xe0\x0c\xea\x45\x9c\x22\x23\x76\xb1\xf0\x66\xaa\xbb\x11\xbd\xc0\x57\x41\x1d\x89\xae\xf9\x5c\xf4\x01\xb1\xe1\xab\x28\x45\xe7\xaa\x5c\xf4\xbd\xd4\x92\x1f\xfc\x97\x95\xf4\x02\x3d\x4f\x66\x6d\xc6\x7c\xd3\x5c\xf6\x40\xb7\x26\x7e\x97\xa2\x03\xd0\x47\x6d\x64\x0e\x59\x24\x5f\x16\xd0\x6f\xe8\x3e\x66\x3c\xcd\xac\x99\xfb\x99\x49\x6f\x31\x53\x68\x5f\x9c\x3e\xe2\x25\x8b\x67\xdd\x9f\x75\x03\xb3\x32\x9a\xb8\x2a\x45\x97\xa0\xb5\xe8\x33\xb4\x2e\xd2\xe2\x17\x75\x39\x23\xf3\xc5\x3b\xaf\x65\x2e\xb0\x47\x6d\x06\x78\x80\x3e\x66\x32\x07\xcc\xae\xcc\xe5\x2c\x82\x2e\x21\x7f\xe4\x88\x5a\x5c\x25\xba\x5e\x46\x92\x63\x1c\xcb\x7c\xb1\x0e\x5c\x15\xa9\xf4\x10\xda\x0c\xbc\xda\x48\xce\x22\x68\x39\x7c\x23\x87\x34\x93\xd8\x38\xff\x80\x7f\x37\x63\x16\xbd\x44\x2e\x69\x22\xfe\xd0\xc3\x62\x3e\x63\x81\x57\x60\x30\xf7\x82\x87\x49\xd3\xbd\xf4\x2a\x9b\xcf\xa6\x09\xf3\x4e\x70\x01\x9f\xd3\xf9\x57\x88\x9f\x72\x8e\x8d\x73\x06\x18\x42\xbd\xd0\x61\x9c\x9f\xd0\xe0\xb8\x11\x0e\xa6\xa5\xe8\xbc\x9b\xbf\x16\x81\x0d\xe0\xab\x6a\xa4\x0f\xf0\x8b\x33\x0f\xf6\xe5\xac\xe3\x91\x91\xb9\x63\x2f\x78\x9b\xd4\xb2\x1f\x73\xf6\x95\x70\x0c\x7d\x40\x7e\xff\x0b\x00\x00\xff\xff\x10\x05\xf5\xab\x00\x10\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1485857445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

