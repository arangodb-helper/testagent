// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x83\xc9\xd9\x22\x39\x2e\x8a\x60\x59\xf6\xba\x2c\x69\xe9\x5d\xb1\xc6\x91\xa8\x2c\x1b\x69\x1c\x28\x42\xff\xbd\x48\x76\x88\xdb\xb4\x21\x87\xfa\x64\xe6\x8d\xdf\x9b\xf9\x2c\xc5\x48\xd8\x8f\x56\x12\x42\x7d\x94\x01\x99\x46\xa9\x6a\x68\x52\xaa\x2a\xae\xb7\xe2\x8f\x96\x43\x80\x7e\x70\xaf\xf8\xc6\x99\xde\x8a\xaa\xe2\xa3\xa8\x00\x00\xd6\x12\x98\x00\x31\x36\xa5\xd4\x3c\x91\x24\x4c\xa9\x29\x5d\x31\x9a\x0e\x16\xe1\x77\x4b\xe6\x8c\x29\x15\x21\x3f\x5c\x82\xf6\xd8\xed\x6b\xd6\xe6\x06\x36\xca\x29\x60\x0d\xad\x95\x21\xec\xeb\xc9\x40\x6f\x9c\x01\x6f\x4e\x9a\xa0\xb3\x83\x24\x54\x70\x9c\x88\x06\x57\x8b\xff\xb9\x97\x33\x29\x96\x18\xb4\xe1\x9e\xb5\xc7\x30\xf5\x8f\x7a\x1f\x4a\xf3\xda\xdc\xa9\x94\x2a\xce\xc6\xbc\xbf\xde\x89\xbc\xa2\x09\x64\xda\xc0\x99\xde\xe5\x22\xc9\xa3\xc5\x95\x7b\x8b\xd6\xa2\x82\x40\xde\x8c\xa8\xa0\xc8\xf5\x6c\xc7\x29\x43\xbe\xbc\x7b\x71\x9d\x99\xf4\xd5\x99\x33\xd2\x1f\xa5\x17\x69\x27\xbc\x96\x39\xbb\x7c\x9b\x6b\xc5\x31\x46\xf0\xd2\x9d\x10\x36\x81\xe0\xd7\x1e\x56\x3f\x64\x9e\x16\x16\x42\x9f\x62\x95\x88\x71\x13\xa8\xf9\x27\x7b\x4c\x89\x33\x52\x5f\xa9\x25\x7f\x2d\xcf\x13\xc4\x08\xe8\x14\x14\x3e\x65\xcd\x85\xd1\x01\x5b\x74\x04\x05\xff\x4f\x53\x7a\x36\x3d\xde\x02\xca\xe7\x6b\x70\x0f\x12\xc2\x15\xa0\xbf\x67\x74\x74\x17\x0e\x36\x39\xf2\x1b\x36\xd8\xcc\xc9\x8f\xb1\xb9\xb9\x72\xdd\x30\x10\xfa\x72\xe9\xde\x03\x00\x00\xff\xff\x80\xb0\x0c\xf4\x8f\x03\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 911, mode: os.FileMode(420), modTime: time.Unix(1486047848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x41\x4f\xeb\x38\x10\xbe\xe7\x57\x8c\xa2\x5e\x37\xd6\x7b\x47\x94\x5a\x62\xe9\x22\xd0\xc2\x2e\x2a\xa0\x3d\xbb\xc9\xb4\xb1\xd6\x89\x23\x7b\x82\x16\x59\xf9\xef\x2b\x3b\x49\x49\x49\xe0\x05\xa9\x70\x0a\x33\xdf\x8c\x67\xbe\x19\x7f\xb5\x73\x84\x65\xad\x04\x21\xc4\x3b\x61\x91\x15\x28\xf2\x18\x92\xb6\x8d\xa2\xb4\xf8\xc1\xff\x41\x95\xe9\x12\x81\x34\x3c\xa1\xa5\xcb\x03\x56\x94\xb2\xe2\x07\x8f\xd2\x9a\x47\xb7\x9b\x0b\x70\x2e\xb9\xdd\xb4\x6d\x94\xee\x0c\xe3\xd1\x73\x1d\x2c\xcf\x35\xc9\x12\xbd\x95\xd5\xdc\x67\xfa\xc9\xaf\x54\x63\x09\x4d\xca\x8a\x9f\xde\x42\x62\xa7\x10\x32\x25\xac\x5d\xc7\x8d\x84\x0c\x95\xc2\x1c\x2c\x19\x59\x63\x0e\xc1\x1d\xf3\x08\x00\x20\x25\x5f\xd4\xf0\x6d\xba\x8f\xde\xc1\x6f\x37\x29\xa3\xe2\xd4\x76\x65\x50\x10\xe6\xec\x91\x84\x21\xcc\x53\x46\xf9\x29\xa0\x6f\x63\x12\xa7\xb5\xc9\x65\x25\x48\x9b\xa9\x73\xf3\xfb\x23\x9a\x17\x1c\x79\x52\x36\x14\xe3\x6d\xa1\x44\xe7\xc0\x88\xea\x80\xb0\x2a\xe1\x62\x0d\xc9\xbd\xc8\x0a\x59\xa1\x85\xb6\x9d\x2b\x7f\x54\x96\xff\x73\x6e\x55\x76\x64\x8e\xad\xa9\x80\xc2\xe0\x7e\x1d\x33\xa5\x0f\x96\x1d\x41\xac\xec\x92\xc7\x40\x92\x14\xae\xe3\x3b\x7d\xb0\x31\x4f\xe5\xc0\xea\x5e\x2a\x04\xc2\xff\x08\x74\x43\x4a\x56\x08\x32\xd3\x55\xcc\x53\x26\x79\xca\xc4\xa8\x90\x77\x04\xcd\x95\xd5\x73\x7a\x49\xef\xaa\x63\x53\x68\x4f\xfb\x09\xf4\xf4\x08\xe7\xe4\x1e\x56\x65\x72\x23\x6c\x18\xc5\x18\x48\xf9\x50\xbf\x73\x90\x59\xbb\x45\x91\xbf\x7a\xf0\x9d\xe8\xf7\x2f\x58\x1e\x49\x50\xe3\x79\x8d\xf9\x2c\x5b\xce\xf9\x98\x80\x7f\xde\xde\x41\xdb\x0e\x43\x17\xf3\xf8\x09\xbb\xc2\xc3\xcf\xcd\xad\x73\xa8\x2c\x9e\xb6\xcb\x7f\x9b\x60\xaa\x7c\x31\x23\xa3\x9d\xfd\x02\x2f\xa3\xa8\x9e\x9d\x93\xdd\x5f\xca\x51\xf6\x16\xf4\x0d\x5b\xf8\x49\xd7\xc3\x65\xfc\x42\xcb\x43\x48\xdf\xef\xdb\x75\x5e\xda\x6c\xbe\xb3\x21\xe2\x9c\x9d\x76\x12\xe2\x1c\x60\x95\x43\x90\xcb\x20\x7c\xbd\x64\x7a\xc5\xb5\xe7\x16\xcc\xbf\x44\x89\x53\x75\xf3\x1c\xe2\x42\x69\xa3\x20\x6d\xa1\xb8\x0f\x75\xed\xc8\x22\xa1\x25\x4f\x22\x25\xfe\x60\x3f\xa3\xd1\x3f\xbf\x18\xb9\x3f\xe2\xef\x3f\x61\x45\xc9\xb5\x90\xaa\x31\xd8\x0d\x39\x24\x18\x2c\x6d\x0b\xfb\xfe\x73\x29\xad\xd7\x47\xfc\x79\x99\x7d\x92\x73\xcc\xde\xa3\xb5\xe2\x30\xe3\xd8\x62\xad\x0d\x2d\xe4\xdc\x04\xce\xbb\x90\x8f\x59\x77\x6e\x65\x92\x27\x39\x4b\x6d\xe7\xec\xab\x99\xf3\x1f\x47\x16\x80\x37\x5b\xdc\xf7\x64\x9b\xe4\x41\x50\xe1\x43\x04\x5f\xca\xf1\x16\x33\xac\x08\xb2\x42\xe8\x9e\x67\xff\x5e\xf0\x71\x57\xde\x04\xa5\xae\xfe\xc5\x57\x90\xd6\xbf\x16\x82\x29\x09\x2b\xd8\xb6\x49\x04\xc3\x2f\x44\xef\xb8\xcc\x48\xbe\x9c\x88\xe6\xf1\x8a\x86\xfc\xac\x16\x8d\xc5\x78\x34\xc1\x52\x56\x12\x8c\x3c\x14\x04\x7b\xa5\xfd\xef\x16\xec\x1a\x22\x7f\x19\x1f\x3c\xf6\x78\x1b\xa7\x7a\xfc\x2e\xb5\x41\xdb\x94\x4b\x73\x6f\x03\x78\x9c\xfc\x28\xe4\xdd\xeb\x68\xe6\x84\x98\x6f\x90\x84\x54\x36\x84\xf5\xcf\xa5\xef\xdd\x48\xcf\xa7\xae\x16\x2e\x1e\x86\xc5\xeb\x06\xf1\xc7\x0b\x56\x9f\x6f\x1f\x7e\xb6\x7d\x98\x74\x27\x8f\xdd\x1f\x6f\xd1\xe4\x65\xba\xd7\x9a\xbc\xfa\x26\x6d\xfb\x7f\x00\x00\x00\xff\xff\x6b\xe6\xc0\x58\xb6\x0a\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 2742, mode: os.FileMode(420), modTime: time.Unix(1486047905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x43\x21\x10\x84\xe1\xbb\x55\x4c\x01\x89\x05\x24\xd5\x6c\x74\x23\x41\xd9\x85\x55\x0f\x41\xec\x3d\x48\x10\x3c\xbc\xd3\xcc\xe1\xe3\xf7\xc6\x14\xbf\x37\xfc\x17\x84\x81\xa0\x45\xed\x81\x64\xcc\xf2\xc4\x74\x5e\xb4\x6d\xb5\xef\x09\xd5\x48\x12\x2f\xe9\x7c\xe3\xda\x34\x63\xe0\x45\x21\x27\xd3\x2e\xf1\x7e\xf6\x56\x6e\x99\x37\x7d\x4a\x37\xae\x97\xd2\x38\x62\xba\x5f\x00\x00\x00\xff\xff\x5d\xf4\x8d\x91\x9a\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 154, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x99\xdb\x6f\x1b\xc7\x15\xc6\x9f\xb9\x7f\xc5\x46\x40\x02\xb2\x50\xa5\xbd\x5f\x04\xf8\x25\x37\x34\x0f\x4d\x80\xd6\x7d\xea\x14\xc1\xce\xec\x8c\x42\x54\x12\x55\x92\x4a\xc7\x36\xfc\xbf\x17\xbf\x39\x87\x14\x25\x2b\x37\xc3\x40\x1f\x68\x91\xbb\x3b\x33\xe7\xfa\x7d\xdf\x59\x5f\x5e\xe6\x5f\x6d\x66\x9f\x5f\xfb\x3b\xbf\x9d\xf6\x7e\xce\xed\x9b\xfc\x7a\xf3\x67\xbb\xbe\x9b\xa7\xfd\x74\x91\x5d\x5e\xe6\xbb\xcd\xc3\xd6\xf9\xdd\x15\xdf\xf7\xfe\xf6\xfe\x66\xda\xfb\xdd\xa5\x9d\x76\xfe\x32\x6c\x36\x7b\xbf\xbd\xd8\xdf\xde\xdf\xbc\x70\xf7\x27\x3f\xcd\x2f\xdc\x73\x3f\x4d\x9b\xdd\x0b\xd7\xd7\x77\xb3\x8f\x2f\x5c\xbf\x7f\xb0\x37\x6b\x77\xb9\xdb\xbf\xb9\xf1\x17\x6e\xb7\x7b\x7a\xf7\xf8\xed\xe2\x7a\xf3\xfc\xce\x6e\x7f\xdc\xee\xeb\x1f\xf2\xef\x7f\x78\x9d\x7f\xf3\xf5\x77\xaf\x3f\xcb\xb2\xfb\xc9\xfd\x7b\xba\xf6\x8f\x0f\x67\xd9\xfa\xf6\x7e\xb3\xdd\xe7\xcb\x6c\x71\x66\xdf\xec\xfd\xee\x2c\x5b\x9c\xb9\xcd\xed\xfd\xd6\xef\x76\x97\xd7\x6f\xd7\xf7\x5c\x08\xb7\x7b\xfe\xac\x37\xf2\xef\xe5\x7a\xf3\xb0\x5f\xdf\xf0\x63\x93\x16\xdc\x4f\xfb\x9f\x2e\xc3\xfa\xc6\xf3\x85\x0b\xbb\xfd\x76\x7d\x77\x9d\xee\xed\xd7\xb7\xfe\x2c\x5b\x65\x59\x78\xb8\x73\xb9\x06\xf8\x6f\x7e\x9a\x97\x7c\xc9\xff\xf9\x2f\x8e\x3d\xcf\xef\xa6\x5b\x9f\xcb\xb2\x55\xbe\x3c\x5c\xf5\xdb\xed\x66\xbb\xca\xdf\x65\x8b\xeb\xb7\xe9\x57\x7e\xf5\x2a\xc7\xaa\x8b\xef\xfd\x7f\xd9\xc4\x6f\x97\xc9\x6c\x7e\x7f\xf9\x10\x82\xdf\xa6\x6d\x57\xab\x6c\xb1\x0e\x69\xc1\x67\xaf\xf2\xbb\xf5\x0d\x5b\x2c\xb6\x7e\xff\xb0\xbd\xe3\xe7\x79\x1e\x6e\xf7\x17\xdf\xb0\x7b\x58\x9e\xb1\x51\xfe\xf9\x7f\xae\xf2\xcf\x7f\x3e\x13\x4b\xd2\x59\xab\x6c\xf1\x3e\xcb\x16\x3f\x4f\xdb\xdc\x3e\x84\x5c\xce\x91\x43\xb2\xc5\x8f\x62\xce\xab\x7c\xbd\xb9\xf8\x6a\x73\xff\x66\xf9\x85\x7d\x08\xe7\xf9\xf5\xdb\x55\xb6\x70\x37\xdf\x1c\x2c\xbd\xf8\xea\x66\xb3\xf3\xcb\x55\xf6\xa9\xec\x61\x1b\xd9\xff\x17\x36\xf2\xdb\xad\xd8\xad\x17\xed\x43\xb8\xf8\x12\xd3\x97\xab\x73\x9e\xc8\xde\x67\xd9\xfe\xcd\xbd\xcf\xa7\xdd\xce\xef\x09\xf9\x83\xdb\xb3\x4b\xf2\x4f\xf3\x91\x2d\xd6\x77\x61\x93\xe7\x9b\xdd\xc5\xb7\xeb\x1b\xff\xdd\x5d\xd8\x1c\xd7\x69\x0a\x0f\xd7\x4f\x76\x48\x39\xcc\x73\x4d\x63\xb6\xd8\xad\xdf\xa6\xdf\xeb\xbb\x7d\xd7\x64\x8b\x5b\x3a\x2e\x3f\x6e\xfa\xd7\xcd\xec\xd3\xc5\xd7\xeb\x5b\x9f\x53\x26\x17\x7c\xe3\x9c\x54\x2a\xcb\xb0\x7e\x7e\xd6\x2a\xff\x7e\xba\xf5\xcb\x95\x9e\xc0\x99\xea\x65\x58\x5f\x70\x7a\xf6\xfe\x57\xd6\xfe\x7d\xfd\x96\xb5\xc9\x9a\xa7\x4b\x31\xf4\x57\x97\x62\xeb\x72\x75\x6a\xf9\xd3\x0d\x70\xed\xb7\x36\xc0\xb9\xe5\xea\xd1\xd1\x0f\x76\x50\xef\x7f\x79\x93\xef\x76\x5f\xaf\xb7\xcb\x55\x6e\x37\x9b\x9b\xd3\xd5\xd3\xcd\xee\x37\x3c\x7f\xb3\x13\xc7\xfd\x36\x4c\xce\xbf\x7b\x7f\xb2\x5a\x4b\x82\x2a\xff\x11\xf8\xfa\x36\x61\xdb\xeb\xdb\xfb\x9b\xfc\x95\x56\xc3\xf2\xcc\xc4\x32\x98\x38\x58\x13\x8b\xc1\xc4\xa2\xd0\xcf\x68\x62\xe7\x4d\x1c\xf4\x5a\x08\x26\xda\xca\xc4\xb9\x34\xb1\x09\x26\xba\xd1\xc4\xca\x99\x68\x6b\x13\x7d\xfd\xec\xde\x24\x7f\xa7\xd1\xc4\xa2\x91\xeb\x25\xcf\xb7\x26\xda\xd1\xc4\x7a\x34\xb1\xef\x4c\x1c\x8a\x93\xf3\xf4\x0c\x3e\x55\x6f\xe2\x34\xeb\xfd\x60\x62\xd9\x9d\x3e\x77\x76\xc4\x9b\x27\x1e\x69\x1f\xbc\x84\x2f\x87\x6e\x39\xc1\xa7\x6c\xb1\x78\x16\x91\xf3\x6c\xb1\x38\x7b\xce\x00\x67\xe7\xd9\x62\x75\xac\xda\xa7\x0b\x38\xeb\x4f\xa9\xd1\x4e\xcf\x4a\x9d\x76\x84\xb3\x17\x4d\xfc\x2d\xb8\x38\x76\x79\xea\x53\x76\x79\x9a\xf3\x77\x74\xc3\x55\xfe\x82\xb1\x39\xc5\x7e\x95\x57\xd5\x79\x4e\xd5\x5e\x9d\x16\xf5\xb2\xa9\x8a\x55\xba\x4e\x2d\x5e\x49\xad\xfe\xe3\x6e\x1d\x97\x65\x33\xb4\xfd\x50\x57\x55\x7b\x9e\x17\xab\xf7\xd9\x62\xe2\xd0\x2f\x92\x6b\xef\x92\x3f\x57\xb9\xba\x85\x45\x57\xe9\xdf\xf7\xc7\xb0\x4e\xe7\x1f\xd4\xd9\x5f\xfc\x34\x7f\x74\x95\x8d\xce\x44\x17\x4c\xac\x4b\x13\xbb\xc9\x44\xd7\x9a\x58\xf3\xac\x33\xb1\xe8\x4c\xf4\x85\x89\xf3\x6c\xe2\xd4\x9b\x58\xf2\xdd\x9b\xd8\x59\x13\x1d\x55\x66\x4d\xac\x27\x13\xcb\xc6\x44\xd7\x9b\xd8\xf7\x26\x86\xd2\xc4\xb1\x36\xb1\x6d\x4d\x9c\x9c\x89\x73\x63\x62\x5f\x9a\x38\x54\x26\x4e\xad\x54\x68\x5f\x99\x18\xac\x89\x33\xd7\x1a\x13\x2d\x55\x5b\x98\x68\x4b\x13\xa7\xda\xc4\xaa\x31\x31\xf0\x99\x4d\x0c\x4e\xae\xcf\x93\x3c\x3f\x56\xe2\xd7\xd8\x9a\xd8\xd7\x26\x36\x54\xbd\x37\xb1\x2a\x4c\xac\xb1\x77\x14\xdf\x5b\x7c\xe8\x4d\xb4\x41\xba\xa3\xf4\x26\xda\x5e\xf6\x9c\x47\x13\x87\x46\x9e\xf1\xb3\x89\x9d\x33\xb1\x74\x26\x36\x83\x89\x73\x6b\xa2\xab\xc5\x6f\xf6\x0b\xa3\xf8\x3b\x77\xd2\x69\xe9\x59\x6f\x62\x1f\xe4\x13\xbc\x89\x23\x7b\xf3\x57\x63\x68\x0f\x76\x58\x13\xab\x4a\x6c\x65\x4d\xd7\x99\x58\x71\xbe\x33\xd1\x37\x26\x96\x83\x89\x53\x29\x5d\xcd\xdf\xa0\xfe\x59\x2b\xb9\xb2\xb3\x89\xde\x49\xec\x06\xce\x2a\x24\x9f\x13\xf9\x22\x77\xd6\x44\x5b\x88\xdd\xf8\xe9\x2b\x13\x2b\x6f\x62\xeb\x4c\xec\x46\x13\xdd\x20\x67\x4e\x85\x89\x43\x2d\xb6\xb2\x8f\x63\xdf\xc9\xc4\xb6\x36\xd1\x11\x07\x6b\x62\x33\xc9\x5a\xf6\x20\xdf\xf8\x5e\x7b\x13\xe7\x5e\xf2\xd5\x63\x7f\x2b\x75\xc3\x1a\xfc\x22\xbe\xc4\xd0\x59\x13\xa7\x49\xf2\x3e\x07\x13\x8b\xd6\xc4\x6e\x90\xd8\x8e\x9d\xe4\x3d\xd4\x62\x3f\x48\xd6\xcf\x52\x5b\xcf\x91\x08\x7f\x5d\x65\x62\xdb\x99\xd8\xce\x7a\x46\xf9\x22\x12\x1d\x6a\xfe\xe3\x70\xe8\xb0\xfa\x11\x85\x8e\x4a\xf3\x43\x0c\x3a\x3c\xfc\x7b\x11\xe8\x99\x69\x9f\x14\x7f\x4e\xcc\x3c\xa0\xcf\x58\xfc\x1f\xe1\x27\x29\xf1\x8f\xc6\x1e\xf0\x81\x9a\x69\x4a\xe9\x31\x98\x0d\xec\x01\x67\x86\xd6\x44\xaf\xfd\x55\xb6\x52\xbf\xd4\x0e\xbd\x4b\x5d\xc0\x6a\xd4\xeb\x40\x4f\x16\x26\xb6\xa3\x89\xa1\x33\xd1\x4e\xc2\x94\xd4\x3f\x3d\x48\x1d\x81\x1f\xae\x93\xfe\x9c\x06\xb9\x4f\x6f\xf2\x0c\x7d\x5f\x0d\x26\x36\xd5\x63\x0d\xd2\x4f\x89\x31\xc1\x03\x2b\xf8\x54\x81\x61\xe0\x07\xe7\x35\x26\x7a\xee\xcf\x52\xef\xf4\x61\x50\x86\x06\x3f\x13\x8e\x0c\xd2\x6b\xd4\x72\x59\xc9\xfe\xd4\xfd\xd8\x48\x4d\x8f\xa3\x89\x4d\x27\xac\x0d\x66\xd0\x2f\x6d\x25\x7d\x54\x4d\x26\x4e\x8a\x57\x5e\x7b\x9f\x3e\x6a\x6a\x61\x69\x7a\xb1\x2f\x04\x07\xc2\xa0\xbe\x8d\x82\xcd\xc4\x83\x3d\x58\x07\x96\x4e\x27\x39\x98\xd5\x96\x51\xaf\x81\xf9\xb5\xf6\x27\x38\x5d\x3b\x89\x11\xf8\xdb\x38\xb1\xad\xd2\x18\xf2\xec\x38\x09\xd6\xa2\x10\x7c\x29\x78\xdf\x58\x8d\x85\x93\x67\xc9\x15\xb1\x02\x9f\x5a\xc5\x2e\xf2\x32\x2b\x1e\x1c\xb0\x94\x35\x60\x40\xad\xb8\xca\x5a\xf2\x58\xcc\xa2\x46\x46\xdd\x07\xfc\xf3\x56\x72\xdf\x14\x26\x76\xca\x59\xc4\x90\xef\x8d\x17\xbb\xc0\x38\x70\x74\x50\xfe\x68\x1b\x89\x11\xcf\xa6\x9a\x03\x53\x7a\xa9\xcb\x94\xe7\xd1\xc4\xb1\x37\xb1\xae\xe5\x6c\xe2\x0b\x1e\x93\x6b\x7c\x4b\x98\xde\x0a\xaf\x51\x93\xa1\x95\x3c\xf4\x93\xd4\x37\x78\x09\xa6\x25\x5e\xd2\x58\x91\x5b\x72\xe7\xbc\xe4\xc4\x3a\xc1\xe5\x94\x97\x51\x7e\x4f\x95\xf6\x42\x23\x6b\x5d\xf1\x98\x3b\xdf\x4a\x6d\xe3\x2b\xb9\xa3\x96\x12\xcf\x59\xb1\x9b\xb8\xb1\x9e\x98\x36\xca\xc5\xc4\x9d\x1c\xe3\x3f\x78\x8f\x9d\x70\x14\x76\xe3\x17\x35\x03\x37\x71\x36\xfb\xc0\xc5\xe3\x2c\x67\xc2\xb1\xf0\x1d\xdf\x89\x03\xfc\x8a\x6f\xd4\x43\xd9\x4b\x7f\xa0\x0e\x59\x4b\x7c\xe8\x39\xb8\xa9\x77\x52\xf3\x49\x07\xb4\x52\x1b\xd4\x32\xf8\x9e\x38\x7a\x96\x1e\x26\xb7\x43\xa9\x1a\xa2\x17\x0e\xa4\x1f\xa8\x0d\xfc\x1f\xb5\x96\xf8\xd0\x1f\x23\xd7\x95\x2f\xc9\x19\xb6\x96\x5a\xc3\x41\x6d\xc1\x07\x6a\x73\x50\x9b\xe9\x99\x56\xd5\x2f\x8a\x17\x4e\x86\x63\xd1\x34\xa5\xf2\x1b\x38\xe4\x07\xd1\x29\x7c\x6a\xe5\x32\x78\x10\x9c\x41\x31\x53\x4f\xf0\x60\xdf\x88\x46\x81\xc3\x82\x6a\x07\x78\x92\xbc\x27\x4e\x9c\x25\xee\x45\x25\x75\xeb\x7b\x89\x43\x7f\x50\xcf\x95\x70\x18\x7d\x90\x6a\x12\x9f\x7a\xd9\x97\x0f\x71\xa5\x87\x6a\x8d\x27\x9c\x9f\x74\x94\xf6\x88\x73\x92\x7f\x6a\x0d\xdc\xa2\x4e\xf9\xf4\x07\x5e\x56\x7c\x04\x87\xb8\xe6\xb5\x76\x8a\xfa\x43\x3e\x05\x2b\xac\x6a\x39\x72\xcd\x9e\x8f\xcf\x1d\xf9\xf4\x08\xe2\x7f\x9c\x4c\x8f\x4b\x13\x93\x3e\xbe\x97\x79\xca\xa2\xc7\xa7\x7e\x0f\x85\x3e\xb7\xe6\x53\xf1\xe7\xa9\x71\xca\x9d\x63\x59\xfe\x51\xee\xec\x8a\xa6\x1f\x9a\xe1\x53\x70\x67\x7a\x5b\xf5\xf1\xd3\x61\x23\xbd\xd4\xe8\x14\x08\x46\xd6\x83\xd4\x06\xfd\x4e\x5d\x26\xbc\x53\xcc\x69\xa9\xb9\x5e\x30\x24\xf5\x50\x2f\x78\xd5\x4e\xd2\x73\x5e\x79\x15\x1d\xee\x54\x47\x56\x8a\xab\xd4\xbc\x55\x0c\xe6\xdc\xa4\xc7\x3b\xe9\xc1\xaa\x56\x7c\xaa\xa4\x8f\x13\x0f\x8f\xc2\xdd\x15\x36\x59\xd1\xe8\x87\x0f\x58\x40\x6f\xd1\xaf\xa9\x67\x26\xc5\x9e\x20\xb6\xd2\x2b\xd8\xcf\x04\x4b\x2f\x5b\xd5\xf9\xe8\x75\x7a\x16\x6e\x28\x94\x8f\xe9\x6d\xf6\xef\x4a\xe1\xad\xc4\x3d\x83\xf6\xd4\xa0\x5a\x5a\x79\x9a\x18\x60\x7b\xe2\xcb\x52\x7b\xbb\x14\xac\x49\x5a\xbd\x12\xac\xaa\x95\x07\xd1\xe3\xe0\x20\xda\x96\x9e\x21\xd6\xc4\x8b\xc9\xdb\xab\xf6\xa5\x9f\x12\xde\x4d\x12\x4f\xf8\x1a\x5c\x2c\x14\x0f\x88\x21\xbd\x4b\xdf\x72\x76\xa7\xfc\xef\xbd\xf4\x24\x7a\x07\xec\xc1\xbf\x72\x56\xfd\x80\xb6\x6f\x25\xd6\xd8\x64\x95\x0b\xc1\xe9\x59\xe3\x43\xef\x27\x8e\x08\xc2\x73\x5d\x2d\x35\xd2\xcc\x82\x49\x68\x80\x51\x79\x07\x5c\x25\xbf\x87\xf9\xad\xae\x04\x27\xd1\x5e\xf0\x3a\x3c\x41\x7c\x88\x2f\x36\x71\x56\xc2\x2f\xa7\x3a\x69\x94\x9c\xa6\x33\xbc\xce\x7d\xb3\x70\xdf\xa1\x46\x99\xbd\xd8\x13\x1c\x46\x47\xc0\x03\xf8\x8a\x16\x1b\xd4\x0e\xa7\x7c\x5d\x2b\x2f\xc1\x6f\x69\xd6\x68\x44\x6b\x91\xdb\x56\xb1\x0d\x6d\xe0\x55\x8b\x0c\x87\x5c\x3b\xc1\xe1\x46\x67\xb2\xb4\x87\xea\x01\x6c\x2b\xd5\x47\xab\xb1\x63\xbf\x4a\xb5\x18\x39\x49\xf5\x56\xeb\x1c\x62\xa5\x6e\xc9\x1b\x78\x8c\xaf\xfd\x28\x5c\x02\x0e\xc3\x11\xe4\x06\x1f\xa8\x83\xa6\x91\x7e\x82\xab\xe9\x41\x66\xa7\x03\xb6\xd2\x23\xe8\x05\x62\x8c\x76\x71\x3a\xb7\xc1\xc5\xd4\x36\xb1\x63\x0f\x78\x86\x5a\x84\x1b\xe9\x8b\x5e\x73\x07\xaf\x52\x8b\xd8\x46\x8f\x33\x37\xa7\x78\x80\xd7\x5e\xea\x1d\xdb\x07\xed\x4b\xaf\xfa\x8f\x1c\xd0\x37\x69\xa6\x56\x7d\xc8\x35\x6a\x9a\xdc\xa6\xf8\x55\x92\x5f\xb4\x02\xdf\xf1\x0b\x5d\x99\x74\xb6\x15\x3d\x6a\x55\x07\x26\x0c\x69\xc5\xc7\x34\x1b\x6a\xff\xd3\x6b\x4e\xb5\x31\xf9\x86\xc3\xd0\x14\xe8\x1f\x7a\x82\x6b\xd4\xd4\xac\x33\xff\x21\x4f\x55\x27\x31\xa5\x1e\xe9\x53\x38\x7c\x2c\x44\x33\xa6\x3d\x4f\xea\xba\x57\x7e\x6d\x14\x37\xd0\xaf\xe4\x94\x7d\xd0\xc5\xd8\x16\x74\x26\x0e\xfa\x6e\x20\x71\x7a\xaf\x73\xb4\xea\x0a\x72\x0e\x27\x92\xdb\x34\xa7\x0f\xa2\x4f\xf8\xdb\xa8\x86\x68\x95\x93\x39\x73\xd4\xb9\x01\x6c\x6b\x5a\xa9\x37\xab\x1a\x8f\x1a\x26\x57\xe8\x86\x40\xcd\x92\xaf\x41\xce\x6a\x74\x1f\xe2\x88\x8f\xf4\xcf\x41\xff\xa3\x21\xd0\x7f\xfc\x46\x67\x27\xbd\xae\x3d\x90\xfa\xb1\x94\x99\x82\x5e\x22\x8e\xd4\x5f\xaa\xc9\x41\x67\x7e\x2b\xf1\x76\xb5\x60\x81\x53\x3d\xdc\xd7\x8f\xb3\x4b\xd2\xa6\x9d\x60\x53\xaf\xf3\x07\xda\x99\xb8\xa1\xcd\xc8\x27\x31\xa0\xc7\xf0\x21\xcc\xa2\x57\xf0\xe1\x30\x13\xb0\x47\xd2\x81\xb5\xe0\x53\xab\x6f\x12\xdb\x52\xf4\x3a\x58\x9e\xe2\x3c\x8b\x4f\xd8\x87\xdf\xe8\x38\x6c\x23\xd6\xc1\x09\xbe\x60\x47\xaa\x89\x41\x70\x9c\x1c\xe2\x63\xdf\x4a\x1d\xcd\xfa\xde\x24\xe9\xd0\x5a\x75\x7d\x25\xda\x1c\x1b\x7a\x9d\x4b\xbc\xe2\x0e\xbe\x50\x1b\x8d\xe6\x88\xfd\xc1\x18\x7c\xa3\xb7\xe8\x8d\x5e\xdf\x55\xd1\xef\xd4\x01\xf6\x3a\xd5\xdb\xf4\x2b\xdc\x94\x74\x9b\xbe\x7b\x60\x5f\xaf\x73\x58\xa7\xf8\x53\x15\x8f\x3d\x6e\x07\xe9\x23\x9e\xf7\xda\xbf\xf0\x21\xf7\x12\x8e\x04\xf9\xcd\x77\x66\x52\x6c\xac\x35\x9e\xb3\xce\x3b\x9c\x9d\x66\x88\x51\x7e\x73\x9e\xd7\x77\x35\x70\x54\xa3\xd8\x84\xcd\xa3\xe6\x8b\x5c\xa1\xfb\x88\x73\x9a\x69\xf5\xbd\x50\x9a\x61\x67\xe1\x12\x6a\x9f\x33\x7b\x9d\x55\xa8\x07\xf2\x00\xe7\x04\xc5\xae\x51\xdf\xab\xd0\xe7\x3c\x47\x2c\xa8\x37\xec\x4b\x31\xaa\x44\x3b\x26\xce\x19\x94\x13\x66\x39\x17\xbd\x4c\x1f\xc1\x2f\xa9\x37\xbd\xd4\x21\x36\xa6\x19\x76\x94\xbe\xed\x54\x37\x73\x06\x5a\x1c\x7b\x99\xff\xb0\x33\xf5\x22\xbc\x69\x75\xb6\xa8\x75\x4e\xd2\xdc\xd0\x07\x60\x3f\xb5\xc4\x39\xf4\x54\x9a\x01\xac\x9c\x4d\x5f\xa4\x9e\x2a\x25\xef\xd8\x71\xa8\xc9\x50\xca\x1e\x09\xef\x9c\xf4\xbe\xd5\x5c\x7a\xad\xe5\xc4\x8b\x41\xea\x8d\xde\x65\x76\x40\xff\x24\x6d\xdc\x08\x4e\x82\x7d\xc4\x91\xba\xe1\xde\xa8\x33\xb1\xd5\xb7\xde\x68\x18\xe2\x4b\x1f\x82\xd1\xc4\x89\x3e\x6b\xf4\xcd\x3a\x75\x5f\x69\x7d\x91\x57\xab\x7a\x3d\xbd\x7f\xf3\x8f\xb3\x26\xfc\x85\xcd\xf0\xf0\xd0\x49\x8e\xb0\xbb\x54\x2d\xc2\xf9\xfd\x20\x5a\x03\x5e\x6c\xab\xc7\xf7\x04\x68\x20\xf4\x47\xa9\x73\x08\xda\x2a\xbd\x3f\x9b\xe5\xcc\x52\xb9\xb1\x9c\xa4\x1e\xe9\xff\x52\xdf\x79\xb2\x8e\xde\x65\x6f\x66\x0a\xf8\x30\x61\x99\x53\x2d\xd2\x3e\xe2\x0f\x3a\x84\xdc\x25\xde\xd1\xb9\x80\x75\xf8\x10\xf4\x9d\x48\xaa\x89\x59\xb4\x65\xa7\x7e\xc1\xc7\xe0\x5a\x9a\xc3\x0b\x7d\x8f\xda\xe8\xac\xd7\xc8\xfc\xe9\x74\x86\x4c\x38\xa0\xef\x53\xd2\xb5\x5e\x72\x80\x0f\xd8\x03\x96\x12\x1f\xe2\xc1\x19\x85\xc6\x0d\xce\xa2\xee\x93\xe6\x0a\x72\x16\xfe\xf5\x8a\x7b\xa9\xce\x95\x8b\xaa\x83\x0e\x9b\xe5\x19\x9e\xa5\x1f\xbd\xea\x45\x34\x08\xbd\x02\xd7\x33\xc7\xa2\x9d\xe0\x26\x6a\x36\x28\x7e\xbe\xf4\xbf\x22\x9d\xbe\xd7\x80\x0f\x5b\xad\x03\xf8\xfc\xd9\xec\x74\x14\xf1\x7f\x7c\x76\x3a\x2e\x4d\xb3\xd3\xe3\xff\x5d\x3f\x9d\x9d\x8e\x4f\xfd\x9e\xd9\xe9\xb9\x35\x9f\x6a\x76\x3a\x35\xee\xf0\xde\xb1\x6f\xd2\xff\x7b\xfc\x2f\x00\x00\xff\xff\xd2\xb8\x50\x7f\x00\x20\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1486048064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

