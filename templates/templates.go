// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x0c\x26\x67\x8b\xe4\x58\xb4\x86\xd2\xa4\xd0\x4b\x29\x49\xff\x80\x56\x1a\x47\x22\xb6\x64\xac\x71\x20\xa8\xfa\xef\x45\xb2\xd7\xf1\x7a\x3f\x48\xa2\xd3\x7a\xde\xdb\x99\xd1\x9b\x37\x0a\x81\xb0\xeb\x5b\x41\x08\xe5\x5e\x78\x64\x1a\x85\x2a\xa1\x8a\xb1\x28\xb8\xbe\xad\x7f\x68\xe1\x3c\x74\xce\xbe\xe0\x1b\x67\xfa\xb6\x2e\x0a\xde\xd7\x05\x00\xc0\x1a\x02\xe3\x21\x84\x2a\x87\xaa\x27\x12\x84\x31\x56\x99\x15\x82\x69\x60\x06\xbe\x4b\x32\xaf\x18\x63\x06\xd2\xe1\x02\xf4\x80\xcd\xae\x64\x32\x11\x58\x2f\x46\x8f\x25\xc8\x56\x78\xbf\x2b\x47\x03\x9d\xb1\x06\x06\xf3\xac\x09\x9a\xd6\x09\x42\x05\xfb\x91\xc8\xd9\xb2\xfe\x93\xb8\x9c\x89\x7a\x2e\x83\xad\xbf\x96\x7a\x40\x3f\x76\x1f\xcd\xfd\x98\xc9\xeb\xe4\x56\xc5\x58\x70\xd6\xa7\xfb\xeb\xbb\x3a\x5d\xd1\x78\x32\xd2\x73\xa6\xef\x52\x90\xc4\xbe\xc5\x55\x76\xe9\xba\x5e\x48\x02\x89\x6d\x8b\x0a\x3c\x0d\xa6\x47\x05\x99\x56\x4e\x69\x39\x25\xb1\x0f\xbf\x87\xfa\xbd\x77\xd2\x75\xd2\xca\x59\xce\x48\x1f\xc7\x53\xe5\xd1\x9f\x89\x8f\x52\x22\x2a\x54\xa7\xd0\x4f\x61\xda\x73\xf1\xa7\x17\xd3\xf7\x6b\x80\xb3\x43\x17\x29\x96\x7b\x0b\x01\x06\x61\x9f\x11\x6e\x3c\xc1\xb7\xdd\x7a\x92\xce\x7a\x98\x05\xdf\x74\xaf\xea\x10\x6e\x3c\x55\xbf\x45\x87\x31\x72\x46\xea\x18\x5d\x3e\x16\x83\x24\xf6\x83\x4d\xda\xa8\x18\xe1\x08\x4f\x67\x86\x4e\xe2\xdb\x21\x4f\x65\x7f\xdd\xc7\xc8\x94\xf1\x59\xea\xd5\x48\xc8\xd8\xb7\x0b\x03\x9f\xd9\xcb\xc4\xdf\x9b\xdb\xd8\xea\x70\xee\xa7\x3f\x7c\xaa\x25\xb4\x9f\xe8\x68\x22\x9f\x6b\x28\x5b\x71\x29\x77\x22\xee\x54\x70\xb1\xc3\x39\xfd\x27\xca\x64\x8b\xcb\xf8\x6c\x8f\x35\x61\x32\x48\x08\x80\x56\x41\x5e\x88\xec\xe7\x79\x29\x1e\x51\xa2\x25\xc8\xf7\xbe\xb8\x16\x5f\x5c\x87\xbf\x26\xed\xe3\xd6\xc1\xdb\x25\xb9\x6a\x60\x5c\xf9\xf7\xe1\x15\x2d\x5d\xb5\x2f\x56\xa9\x24\xfc\x83\xc6\x0d\x9d\xa0\xf4\x71\x41\x2a\x9c\xb7\xe1\x63\x42\x9d\x3c\xb8\x8d\x73\x84\x43\x7e\x72\xff\x07\x00\x00\xff\xff\xe1\x00\xa0\x42\x8d\x05\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 1421, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x4d\x6f\xdc\x36\x10\xbd\xef\xaf\x18\x08\x7b\xad\x88\xe4\x18\xc8\x02\x5c\xbb\x41\x8c\x3a\x69\xb0\xb6\xdb\x33\x57\x1a\xad\x88\x52\xa2\x40\xce\x3a\x35\x58\xfd\xf7\x82\x14\x57\xd6\xd7\x1a\x32\xba\xf1\x49\xe4\x7c\x71\xde\x3c\x3e\xae\xad\x25\xac\x1a\xc9\x09\x21\xda\x73\x83\xac\x44\x9e\x47\x10\xb7\xed\x66\x93\x94\x1f\xd2\xbf\x50\x66\xaa\x42\x20\x05\x8f\x68\xe8\xfa\x80\x35\x25\xac\xfc\x90\x6e\x36\x09\xf1\xbd\x44\xc8\x24\x37\xe6\x2a\x3a\x0a\xc8\x94\x94\xbc\x31\xa2\x3e\xc0\x33\xea\x17\xc8\x54\xd5\xf0\x8c\xc0\x90\x16\x0d\xe6\xe0\xfd\xa3\x74\x03\x00\x90\x90\x2b\x74\xfa\xd6\xdd\x47\xb7\xc8\xd3\xbb\xdb\x84\x51\x3e\xde\xb3\x36\xbe\xbb\x6d\xdb\x57\x43\xc2\x4e\x61\xb3\xf8\xa7\x66\x31\xfe\xa9\x21\x51\xe1\xca\x1c\x7f\xa2\x36\x42\xd5\x8b\x89\x82\xed\xae\x2e\xd4\xca\x6c\xd7\x9a\xd7\x07\x05\xa2\xe2\x07\x5c\x4c\xd9\x39\xdc\x39\xfb\x3c\x65\xc2\x3c\x74\x0e\xf3\xf2\x63\x7a\x23\x8f\x86\x50\x27\xac\xfc\xb8\x38\x05\x94\x12\xf3\xf7\x82\x5e\x76\xa0\x97\xe3\xbd\x1b\x8d\x9c\x30\x67\x0f\xc4\x35\x61\x3e\x3d\x79\x99\x06\x3e\xcc\xe2\x94\xd2\xb9\xa8\x39\x29\x3d\x37\xde\xfe\xfa\x80\xfa\x19\x07\x96\x01\x70\x2c\x1c\xd1\x5a\x70\x88\x20\x6c\x2b\xf8\x74\x05\xf1\x57\x9e\x95\xa2\x46\x03\x6d\xbb\x8c\x70\xbf\x70\x7f\xd6\x6e\x2b\x4f\x97\xd1\x6e\xc2\xa1\xd4\x58\x5c\x45\x4c\xaa\x83\x61\xbd\x13\xab\xba\xe4\x11\x90\x20\x89\x57\xd1\xbd\x3a\x98\x28\x4d\xc4\x09\xd5\x42\x48\x04\xc2\x7f\x08\xd4\x91\xa4\xa8\x11\x44\xa6\xea\x28\x4d\x98\x48\x13\xc6\xd3\x75\x55\x6a\xa4\x1f\x4a\xff\xdd\x57\xf9\xd6\xad\x41\x4e\xaa\xfd\x10\x85\x38\x57\x60\xce\x9d\x79\xdf\x61\x68\xd7\x34\x69\x9f\xcd\x5d\xc3\x5c\x47\xae\xe3\x12\xd6\x8a\x02\xb6\x55\xfc\x85\x1b\x3f\xeb\xa1\x23\xe5\xa7\x23\x5b\x0b\x99\x31\x3b\xe4\xf9\x8b\x73\xbe\xe7\x41\x29\xfc\xce\x03\x71\x3a\xba\xc1\x45\xcb\x40\x59\xeb\x62\xbc\xff\xd3\xee\x1e\xda\xf6\xc4\xaa\xb5\xc0\x72\xe7\xfe\xff\x87\x37\x6d\x1c\xa5\xc1\x71\xbb\xe9\x2f\x33\x9f\x3a\x5f\x8d\xc8\xe0\x52\xbc\x03\x97\x41\x54\x40\x67\x74\xb9\xd6\x62\x94\xbd\x06\x5d\x1a\xa9\xb7\xbb\x3e\xdd\xf6\x77\xb4\x7c\x0a\x09\xfd\xbe\xea\xc5\xda\x66\xf3\xbd\xf1\x11\x97\xec\xb4\xd3\x28\x6b\x01\xeb\xdc\x89\xd0\x58\x93\xdd\xdb\x68\x2e\xad\xc8\xdf\x78\x85\x73\xf9\x74\x18\x2e\x6c\x5f\x67\x24\x54\x6d\x56\x8a\x2a\x79\x51\xf5\xa7\x1e\x28\xea\x78\x8c\xce\xfa\xc7\xef\xb0\xa5\xf8\x33\x17\xf2\xa8\x71\x32\xb8\x99\xfa\xf4\xf3\x20\x34\xe4\xc6\x41\xb1\x6b\xc1\x05\x0d\x16\xe7\xc7\x38\x0d\x63\x9d\x32\x8e\x9c\x7d\xc0\xaa\x39\x8e\x6b\xbc\x2d\xa2\xbe\xe8\xa9\xcb\xb6\x85\x22\x7c\x9e\xf1\x0c\x58\xcf\x1f\xea\x73\xf4\xf8\xdc\xe7\xbb\x2c\x43\x1e\xc5\x12\x43\xbe\xa2\x31\xdd\xef\x8c\x89\x61\x87\x8d\xd2\xb4\x92\x22\xda\x53\xa4\x0b\x39\xff\xec\x5a\xbb\xd5\xf1\xe3\xe4\x67\xd5\xc8\x18\x4e\xb3\x64\xef\x27\xef\x1d\xbf\xec\xb0\x08\x5c\xd1\xf1\x77\x4e\x65\xc7\x95\xb5\x18\xef\x30\xc3\x9a\x20\x2b\xb9\x0a\x38\x27\x4d\x17\xd7\xa9\xce\x27\xb0\x36\xbe\x71\xd6\xd8\x5f\xa1\xd0\x91\x7f\xe0\xc2\xbe\x9b\xeb\xf3\x48\xf3\x7b\x85\xf1\x69\x59\xc3\x8f\x06\xa3\xc1\xe0\x2a\x51\x0b\xd0\xe2\x50\x12\x14\x52\xb9\x67\x17\xf6\x47\x22\xc7\xc1\xef\xce\xb7\xe7\xdd\xfc\x39\x99\xa4\xd6\x68\x8e\xd5\xda\xdc\x3b\xef\x3c\x4c\xde\xbf\x43\xc9\x5e\xb3\x00\xd7\xb8\x42\x94\xde\x22\x71\x21\x8d\x0f\x4b\x58\xf3\xf3\x89\xd8\xdd\x93\x95\x7c\x43\xcf\xb7\x6e\x10\xbf\x3d\x63\xfd\x36\xe9\xd0\x93\x0e\xfe\x85\x42\xe9\x8a\xd3\x1b\x0c\xc4\x70\x5d\xd7\xdd\xd6\xd9\xff\x43\x85\x52\xe4\x5e\x92\xb8\x6d\xff\x0b\x00\x00\xff\xff\x23\xa4\x2b\xf6\x2c\x0d\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3372, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\x31\x0a\xc3\x30\x0c\x85\xe1\x3d\xa7\x78\x63\x0b\xae\x31\x81\x2c\xed\x69\x94\x44\x15\x25\x41\x02\xc5\x19\x4a\xe8\xdd\x8b\xa9\x0d\x5d\x32\x49\xc3\xf7\xbf\xe8\x4c\xf3\x3b\xe0\x77\x41\x38\x30\xd9\x6a\x7e\x87\x38\xb3\x3e\xf0\xe9\xa2\x5a\x6e\xaa\xbd\xff\xd0\x9c\x54\xb8\xc8\x2e\x66\xde\xb2\x2d\x38\x30\xd2\xb4\x88\xdb\xae\xf3\xad\x32\x97\x91\x2e\x29\xf4\xc3\x10\x52\x48\xb1\xbf\x96\xe9\xe2\x9f\xf4\x5a\x77\xe7\xed\xbc\xaa\x4d\xab\xbe\x01\x00\x00\xff\xff\x74\xca\x77\x00\xb4\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 180, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

