// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x16\x82\xaf\xa5\x90\x1c\x0b\x5a\x40\x6a\x37\x48\xd0\xa4\x2d\x9c\x14\x3d\x33\xd2\xca\x12\x2a\x91\x06\xb9\x36\x10\x10\xfc\xf7\x82\x14\xe5\xc8\x8f\xa8\x3a\xa4\x37\x6a\x67\xd7\x33\x9a\x59\x53\xd6\x12\xb6\xdb\x46\x10\x42\xf2\x22\x0c\xa6\x15\x8a\x22\x01\xe6\xdc\x6c\xc6\xab\xab\xec\x37\x36\xb9\x6a\x11\x48\xc1\x33\x1a\xba\xd9\xa0\x24\x9e\x56\x57\x99\x87\xaf\xb3\x65\xb3\x33\x84\x9a\xa7\xd5\xb5\xaf\x90\x78\x69\x10\xf2\x46\x18\xb3\x48\x76\x35\xe4\xd8\x34\x58\x80\x21\x5d\x6f\xb1\x80\x00\x27\xd9\x0c\x00\x80\x93\x67\xea\xcf\xba\x3b\x44\x20\xbb\x5f\xf1\x94\xaa\xe3\x5a\xa4\x3e\x2d\x2f\x95\xd2\x45\x2d\x05\x29\x7d\x0e\xae\xbe\x3c\xa1\xde\xe3\x00\xe1\x69\xcf\xe5\x6b\x41\x81\xb5\xa0\x85\xdc\x20\xcc\x5b\xf8\xbc\x00\xf6\x28\xf2\xaa\x96\x68\xc0\xb9\x4b\xea\x8a\xcc\xda\x79\xcb\xee\x57\xce\xf1\x94\x8a\x37\xc8\xda\xba\x84\x79\xcb\xee\x84\x09\x5a\xe3\x78\x9c\xea\x5d\xb1\x16\x72\x63\xd6\x28\x8a\x57\xdf\xfc\x20\xa2\xa9\xa1\xf2\x44\x82\x76\x9e\x38\xc9\xb8\x80\x4a\x63\xb9\xb0\xd6\xb7\x85\x96\x5f\xeb\x07\x70\xae\x37\x42\x64\xa7\xf4\xd8\x18\x3c\x26\xcd\x3e\x9d\xf5\xc8\x62\xb2\xae\x81\xb5\xe3\xea\x06\x8d\x51\xe3\x51\x2a\xa7\x4a\xc7\x59\xfb\xcc\xc6\x29\xfb\xae\xc8\xf7\x16\xf4\x90\xac\x0b\xdb\x5a\x40\x59\xf8\x34\x79\x1a\x36\x30\xee\xae\xdf\x67\xf3\xd1\x9b\xfb\x5d\xb4\x78\xbe\x87\xfe\x35\x70\xe2\x12\x52\x58\xc2\x20\xee\xdd\x0d\xec\xbd\x48\x08\x0d\xa5\xd6\xce\x89\x79\x62\x6f\xd3\xe0\xe1\x1f\xae\x7b\x8a\x1f\xdf\x60\x4e\xec\x56\xd4\xcd\x4e\x63\xe7\x73\xf8\x81\xbe\xe2\x1c\x94\xf1\x38\xd5\xd6\xdb\x43\xff\xc7\x3a\xfb\x5c\x5f\x72\xf6\x11\x8d\x11\x9b\x0b\xc0\x1a\xb7\x4a\xd3\x44\xcf\x75\xf0\xbc\x1b\x19\xfd\xdf\x6b\xe6\x65\x5c\xb0\xb6\x03\xa3\x9a\x4b\xf8\x21\xb2\xd0\x78\xb7\xc6\x32\x9a\xad\xd9\x4f\x41\x95\x1f\x99\xbe\xba\x6b\xcc\x51\x12\xe4\x95\x50\xd1\x67\xbe\xed\xe6\xc2\x25\xc4\x96\x1e\x60\x37\x39\xd5\x7b\x74\x2e\x3c\x41\xab\xe4\x1f\x7c\x85\xda\x80\x92\x6c\x36\xbc\x31\xce\xf0\xb2\x3c\x34\x84\xeb\x82\xa7\xdb\xec\x7f\x07\xe9\xc5\x2a\x39\x31\x2f\x0c\x79\x75\x6f\xf9\x75\x8f\x72\x3c\x34\x1c\x0b\x0d\x59\xc7\x3c\x84\xdf\x37\xff\xec\x73\x59\x2a\x45\xa8\xc3\x07\xf3\x6f\x00\x00\x00\xff\xff\x1d\x08\x71\x0f\x4b\x07\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 1867, mode: os.FileMode(420), modTime: time.Unix(1485790888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x43\x21\x10\x84\xe1\xbb\x55\x4c\x01\x89\x05\x24\xd5\x6c\x74\x23\x41\xd9\x85\x55\x0f\x41\xec\x3d\x48\x10\x3c\xbc\xd3\xcc\xe1\xe3\xf7\xc6\x14\xbf\x37\xfc\x17\x84\x81\xa0\x45\xed\x81\x64\xcc\xf2\xc4\x74\x5e\xb4\x6d\xb5\xef\x09\xd5\x48\x12\x2f\xe9\x7c\xe3\xda\x34\x63\xe0\x45\x21\x27\xd3\x2e\xf1\x7e\xf6\x56\x6e\x99\x37\x7d\x4a\x37\xae\x97\xd2\x38\x62\xba\x5f\x00\x00\x00\xff\xff\x5d\xf4\x8d\x91\x9a\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 154, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x5d\x8f\xdb\xc6\x15\x7d\x26\x7f\xc5\x44\x40\x02\xa9\x50\x25\x7e\x7f\x08\xf0\x4b\x6c\x07\xf5\x43\x1d\xa0\x75\x9f\x7a\x8b\x60\x66\x38\xb3\x21\x2a\x89\x2a\x49\xa5\x77\x6d\xec\x7f\x2f\x0e\x2f\xa5\xd5\xae\x37\x71\x61\x04\xc8\x03\x25\x72\x38\xf7\xfb\x9c\x33\xdc\x6e\xd5\xeb\xae\x71\xea\xce\x1d\x5d\xaf\x47\xd7\x28\x73\xaf\xee\xba\x3f\x9b\xf6\xd8\xe8\x51\x6f\xc2\xed\x56\x0d\xdd\xb9\xb7\x6e\xd8\xe1\x7e\x74\x87\xd3\x5e\x8f\x6e\xd8\x1a\x3d\xb8\xad\xef\xba\xd1\xf5\x9b\xf1\x70\xda\xbf\xf0\xf6\x67\xa7\x9b\x17\xde\xb5\xc7\xc6\xf1\x0b\xeb\xa7\xb3\xd9\xb7\x76\x3b\x8c\xf7\x7b\xb7\xb1\xc3\xf0\xf4\xed\xf5\x6e\x73\xd7\x3d\x7f\x33\x8c\x57\x77\x6f\x7e\x54\xef\x7f\xfc\xa0\xde\xbe\x79\xf7\xe1\x9b\x30\x3c\x69\xfb\x6f\x7d\xe7\x1e\x37\x87\x61\x7b\x38\x75\xfd\xa8\x96\x61\xb0\x30\xf7\xa3\x1b\x16\x61\xb0\xb0\xdd\xe1\xd4\xbb\x61\xd8\xde\x7d\x6c\x4f\x58\xf0\x87\x11\x7f\x6d\x27\xbf\xdb\xb6\x3b\x8f\xed\x1e\x0f\xdd\x64\x70\xd2\xe3\xcf\x5b\xdf\xee\x1d\x6e\xb0\x30\x8c\x7d\x7b\xbc\x9b\xde\x8d\xed\xc1\x2d\xc2\x55\x18\xfa\xf3\xd1\xaa\xb9\x91\x7f\x73\xba\x59\xe2\x46\xfd\xf3\x5f\x08\xbb\x56\x47\x7d\x70\x4a\xcc\x56\x6a\x79\x59\x75\x7d\xdf\xf5\x2b\xf5\x29\x0c\xee\x3e\x4e\x4f\x6a\xf7\x4a\x21\xab\xcd\x7b\xf7\x5f\x38\x71\xfd\x72\x4a\x1b\xcf\xdf\x9f\xbd\x77\xfd\xe4\x76\xb5\x0a\x83\xd6\x4f\x06\xdf\xbc\x52\xc7\x76\x0f\x17\x41\xef\xc6\x73\x7f\xc4\xe3\x5a\xf9\xc3\xb8\x79\x0b\xef\x7e\xb9\x80\x23\xf5\xed\x7f\x76\xea\xdb\x5f\x16\x92\xc9\x14\x6b\x15\x06\x0f\x61\x18\xfc\xa2\x7b\x65\xce\x5e\x49\x1c\x09\x12\x06\x3f\x49\x3a\xaf\x54\xdb\x6d\x5e\x77\xa7\xfb\xe5\x77\xe6\xec\xd7\xea\xee\xe3\x2a\x0c\xec\xfe\xed\x25\xd3\xcd\xeb\x7d\x37\xb8\xe5\x2a\xfc\xbd\xf2\x81\x1b\xf1\xff\x2b\x8e\x5c\xdf\x4b\xde\xf3\xa2\x39\xfb\xcd\xf7\x48\x7d\xb9\x5a\x63\x47\xf8\x10\x86\xe3\xfd\xc9\x29\x3d\x0c\x6e\x44\xcb\xcf\x76\x84\x97\xa9\xbe\x79\x1e\x61\xd0\x1e\x7d\xa7\x54\x37\x6c\x7e\x68\xf7\xee\xdd\xd1\x77\x57\xbb\x79\x84\x97\xf5\x1b\x0f\xd3\x0c\x95\x9a\xc7\x18\x06\x43\xfb\x71\x7a\x6e\x8f\x63\x91\x85\xc1\x01\xcc\x52\x57\xa7\x7f\xed\x1a\x37\x2d\x7e\x68\x0f\x4e\x01\x26\x1b\xdc\x21\xce\x04\x95\xa5\x6f\x9f\xc7\x5a\xa9\xf7\xfa\xe0\x96\xab\x39\x02\x62\xce\x55\xfa\x76\x83\xe8\xe1\xc3\x6f\xd8\xfe\xbd\xfd\x08\xdb\x29\x9b\xa7\xa6\x48\xf4\x37\x4d\x91\xeb\x72\x75\x9b\xf9\x53\x07\x28\xed\x4b\x0e\x50\xdc\x72\xf5\x58\xe8\x67\x1e\xe6\xea\x7f\xdd\xc9\xbb\xe1\x4d\xdb\x2f\x57\xca\x74\xdd\xfe\xd6\x5a\xef\x87\x2f\x54\x7e\x3f\x48\xe1\xae\xf7\xda\xba\x4f\x0f\x37\xd6\x33\x24\x80\xf2\x9f\x20\x53\x3f\x4c\x1a\xf6\xe1\x70\xda\xab\x57\x33\x1a\x96\x0b\xe2\xd8\x13\x57\x86\x38\xaa\x88\xa3\x68\xbe\x6a\xe2\xc2\x11\x57\xf3\x9a\xf7\xc4\x26\x21\x6e\x62\xe2\xcc\x13\xdb\x9a\x38\xb1\xc4\x26\x25\x76\xe9\xb3\x77\x5a\xfe\x75\x4d\x1c\x65\xb2\x1e\x63\x7f\x4e\x6c\x6a\xe2\xb4\x26\x2e\x0b\xe2\x2a\xba\x89\x37\xc7\xc0\x95\x94\xc4\xba\x99\xdf\x7b\xe2\xb8\xb8\xdd\xb7\xb8\xea\xcd\x93\x8a\x66\x1e\xbc\xa4\x2f\x17\xb6\xdc\xe8\x53\x18\x04\xcf\x3a\xb2\x0e\x83\x60\xf1\x5c\xe9\x17\xeb\x30\x58\x5d\x51\xfb\xd4\x00\xb1\xfe\x34\x11\xed\x36\xd6\xc4\xb4\xab\x9c\xbd\x98\xe2\x97\xe4\xe2\xca\xf2\x89\xa7\xf0\xf2\x74\xe6\x9f\xc0\x86\x9d\x7a\x21\x59\x05\xb0\xef\x54\x92\xac\x15\x50\xbb\xbb\x05\xf5\x32\x4b\xa2\xd5\xb4\x0e\x2c\xee\x04\xab\xff\x38\xb6\xbc\x8c\xb3\x2a\x2f\xab\x34\x49\xf2\xb5\x8a\x56\x0f\x61\xa0\x11\xf4\xbb\xa9\xb4\x4f\x53\x3d\x3b\x35\x97\x85\x8c\x76\xd3\xef\xc3\xb5\xad\x7a\xfd\x19\xce\xfe\xe2\x74\xf3\xd5\x28\xab\x2d\xb1\xf5\xc4\x69\x4c\x5c\x68\x62\x9b\x13\xa7\xd8\x6b\x89\xa3\x82\xd8\x45\xc4\x4d\x43\xac\x4b\xe2\x18\xf7\x8e\xb8\x30\xc4\x16\x28\x33\xc4\xa9\x26\x8e\x33\x62\x5b\x12\x97\x25\xb1\x8f\x89\xeb\x94\x38\xcf\x89\xb5\x25\x6e\x32\xe2\x32\x26\xae\x12\x62\x9d\x0b\x42\xcb\x84\xd8\x1b\xe2\x06\x6b\x19\xb1\x01\x6a\x23\x62\x13\x13\xeb\x94\x38\xc9\x88\x3d\xae\x86\xd8\x5b\x59\x6f\xb4\xec\xaf\x13\xa9\xab\xce\x89\xcb\x94\x38\x03\xea\x1d\x71\x12\x11\xa7\xc8\xb7\x96\xda\x73\xd4\x50\x12\x1b\x2f\xec\x88\x1d\xb1\x29\xc5\x67\x53\x13\x57\x99\xec\x71\x0d\x71\x61\x89\x63\x4b\x9c\x55\xc4\x4d\x4e\x6c\x53\xa9\x1b\xfe\x7c\x2d\xf5\x36\x85\x30\x6d\xda\xeb\x88\x4b\x2f\x97\x77\xc4\x35\x7c\xe3\x7f\xee\xa1\xb9\xe4\x61\x88\x93\x44\x72\x85\x4d\x51\x10\x27\x88\x6f\x89\x5d\x46\x1c\x57\xc4\x3a\x16\x56\xe3\xdf\xcf\xf5\x19\x23\xb3\x32\x0d\xb1\xb3\xd2\xbb\x0a\xb1\x22\x99\xa7\xc6\xbc\x30\x3b\x43\x6c\x22\xc9\x1b\x75\xba\x84\x38\x71\xc4\xb9\x25\x2e\x6a\x62\x5b\x49\x4c\x1d\x11\x57\xa9\xe4\x0a\x3f\x16\x7e\x35\x71\x9e\x12\x5b\xf4\xc1\x10\x67\x5a\x6c\xe1\x03\xf3\x46\xed\xa9\x23\x6e\x4a\x99\x57\x89\xfc\x73\xc1\x0d\x6c\x50\x17\xfa\x8b\x1e\x5a\x43\xac\xb5\xcc\xbd\xf1\xc4\x51\x4e\x5c\x54\xd2\xdb\xba\x90\xb9\xfb\x54\xf2\x87\x92\x95\x8d\x60\xeb\xb9\x12\xa1\x5e\x9b\x10\xe7\x05\x71\xde\xcc\x31\xe2\x17\x95\xe8\x82\xf9\xaf\xd3\xa1\x8b\xf5\xa3\x0a\x5d\xbf\x28\x3f\xd7\xa0\xcb\xe6\xff\x57\x81\x9e\xa5\xf6\xbb\xea\xcf\x4d\x9a\x17\xf5\xa9\xa3\x3f\x50\x7e\xa6\x2f\xee\xaf\x3f\xe1\x32\xd1\x09\xe0\x07\xef\x1a\x23\xda\x03\x9d\x31\x56\x34\x22\x31\x72\x22\x4d\xfa\xe1\x05\x4b\x75\x24\x7c\x8d\x0c\x71\x8e\xd3\x2f\x12\xde\xa5\xe5\xcc\xe1\x48\x74\x05\x5c\x83\xbe\x41\x9f\x52\x60\x3a\x15\x0d\x01\x8f\x63\x70\x45\x0b\x67\x81\xc5\xe9\xa4\x2c\x24\x36\x2e\xe8\x8e\x2f\x25\x2e\xec\x5d\x2e\x7c\x02\x7f\x74\x25\xba\x87\x18\x88\x89\xd8\x45\x29\x5c\x41\x8c\x1a\xdc\xaa\x85\x5f\xd0\x0d\xc4\x82\x26\xa0\xbe\x6c\x8e\x91\x25\xc2\xf7\x09\xe3\x96\x58\x63\x3d\x27\xae\xf4\x23\xee\x5d\x21\x5a\x01\xcd\xb1\xe0\x91\x91\x0b\x9a\x80\xb8\xe9\x9c\x37\xe2\xc7\xb1\xd4\x0e\x5d\x46\x0e\x31\x74\x48\x8b\xd6\x81\xff\xd0\x54\xe8\xd4\xc4\xad\x92\xb8\x86\x06\x96\xd2\x53\xe8\x0f\xb8\x8d\x7f\xd8\x42\x1b\x51\x03\x34\x1f\x7a\x68\x72\xd9\x87\xbe\x97\x95\x68\xcb\xd4\xa3\x64\xae\xa7\x12\x5b\xc4\xc7\x97\x46\x9a\x8b\xbe\x35\xe8\x13\x66\x5c\xc9\xd7\x45\x12\x0b\xaf\x0b\x2f\x9a\x7e\xf9\x22\xc1\x17\x08\xf2\x9c\xce\x9c\x48\xd6\xa1\x25\xe8\x29\x74\x0a\xe7\x13\x6a\x49\xd1\xbf\x4c\xb4\x1e\x1a\x99\xfb\xf9\xbc\xc9\x44\x7f\xf0\x65\x94\x5f\xe6\xe2\x64\xfe\x89\x17\xfd\xc5\xdc\xb3\x5c\xd6\xa0\x4f\xc9\x45\x87\x1c\xb1\x9e\xf5\x3b\xb5\xa2\xc3\x38\xe3\xe0\x0b\xb9\xb8\x78\xd6\x52\x2f\x18\xc0\x59\x90\x21\xf7\x78\xee\x0b\xf2\xcd\x65\x4e\xc8\xcb\x5a\xd1\x53\x5f\x09\x86\x27\xac\x43\xf7\x2b\xe9\xd7\xa4\x93\x85\xe8\xa3\x8d\x64\x7e\x99\x91\x3a\x31\x7b\xd8\xe3\xac\x2b\x6b\xe1\x85\x73\x32\x2f\xeb\x1e\x6b\xad\x66\xac\x03\x8f\xcd\x3c\x67\xcc\xec\xd6\x06\xcf\xe0\x5c\x3e\xf7\x05\x73\x03\x17\x26\xdd\x6f\xa4\xff\xe0\x15\xb4\xbd\x98\x71\x8a\x1c\xe1\x1b\xf1\xa0\xe3\x7e\xae\x49\x27\xf2\x75\x79\x39\xa3\x30\x03\xf0\x02\xb3\x06\xa6\xd2\x4a\x74\xdd\xcc\x73\xc6\x59\xf2\xbf\x00\x00\x00\xff\xff\xc5\x61\xf3\x76\x00\x10\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1485790894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

