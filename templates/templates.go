// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x83\xc9\xd9\x22\x39\x2e\x8a\x60\x59\xf6\xba\x2c\x69\xe9\x5d\xb1\xc6\x91\xa8\x2c\x1b\x69\x1c\x28\x42\xff\xbd\x48\x76\x88\xdb\xb4\x21\x87\xfa\x64\xe6\x8d\xdf\x9b\xf9\x2c\xc5\x48\xd8\x8f\x56\x12\x42\x7d\x94\x01\x99\x46\xa9\x6a\x68\x52\xaa\x2a\xae\xb7\xe2\x8f\x96\x43\x80\x7e\x70\xaf\xf8\xc6\x99\xde\x8a\xaa\xe2\xa3\xa8\x00\x00\xd6\x12\x98\x00\x31\x36\xa5\xd4\x3c\x91\x24\x4c\xa9\x29\x5d\x31\x9a\x0e\x16\xe1\x77\x4b\xe6\x8c\x29\x15\x21\x3f\x5c\x82\xf6\xd8\xed\x6b\xd6\xe6\x06\x36\xca\x29\x60\x0d\xad\x95\x21\xec\xeb\xc9\x40\x6f\x9c\x01\x6f\x4e\x9a\xa0\xb3\x83\x24\x54\x70\x9c\x88\x06\x57\x8b\xff\xb9\x97\x33\x29\x96\x18\xb4\xe1\x9e\xb5\xc7\x30\xf5\x8f\x7a\x1f\x4a\xf3\xda\xdc\xa9\x94\x2a\xce\xc6\xbc\xbf\xde\x89\xbc\xa2\x09\x64\xda\xc0\x99\xde\xe5\x22\xc9\xa3\xc5\x95\x7b\x8b\xd6\xa2\x82\x40\xde\x8c\xa8\xa0\xc8\xf5\x6c\xc7\x29\x43\xbe\xbc\x7b\x71\x9d\x99\xf4\xd5\x99\x33\xd2\x1f\xa5\x17\x69\x27\xbc\x96\x39\xbb\x7c\x9b\x6b\xc5\x31\x46\xf0\xd2\x9d\x10\x36\x81\xe0\xd7\x1e\x56\x3f\x64\x9e\x16\x16\x42\x9f\x62\x95\x88\x71\x13\xa8\xf9\x27\x7b\x4c\x89\x33\x52\x5f\xa9\x25\x7f\x2d\xcf\x13\xc4\x08\xe8\x14\x14\x3e\x65\xcd\x85\xd1\x01\x5b\x74\x04\x05\xff\x4f\x53\x7a\x36\x3d\xde\x02\xca\xe7\x6b\x70\x0f\x12\xc2\x15\xa0\xbf\x67\x74\x74\x17\x0e\x36\x39\xf2\x1b\x36\xd8\xcc\xc9\x8f\xb1\xb9\xb9\x72\xdd\x30\x10\xfa\x72\xe9\xde\x03\x00\x00\xff\xff\x80\xb0\x0c\xf4\x8f\x03\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 911, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x5f\x8f\x9c\x36\x10\x7f\xdf\x4f\x31\x42\xfb\x5a\xac\xe4\x31\xe2\x90\xae\xb7\x8d\x72\xea\x25\x8d\xf6\xee\xda\x67\x2f\x0c\x8b\x55\x83\x91\x3d\x5c\x5a\x59\x7c\xf7\xca\xc6\x10\x58\xb8\x13\x51\x37\xfb\xc4\xce\x1f\xcf\x9f\xdf\xcc\xcf\xb6\x96\xb0\x6a\x24\x27\x84\xe8\xc4\x0d\xb2\x12\x79\x1e\x41\xdc\x75\xbb\x5d\x52\xbe\x4b\xff\x42\x99\xa9\x0a\x81\x14\x3c\xa1\xa1\xdb\x33\xd6\x94\xb0\xf2\x5d\xba\x4b\x9a\x74\x77\x7f\xf8\x00\xd6\xc6\xf7\x87\xae\xdb\x25\x27\xcd\xd2\xdd\x73\xe3\x25\xcf\x0d\x89\x0a\x47\xe9\x9f\xa8\x8d\x50\xb5\x57\x85\xef\xfb\xba\x50\x4e\xcf\x9a\xd4\x45\x7a\x9f\xde\xc9\xd6\x10\xea\x84\x95\xef\x9d\x84\xf8\x49\x22\x64\x92\x1b\x73\x13\xb5\x02\x32\x94\x12\x73\x30\xa4\x45\x83\x39\x78\x75\x94\xee\x00\x00\x12\x72\x49\x0f\xdf\xba\xff\x08\x8a\xf4\xfe\x90\x30\x2a\xe7\xb2\x3b\x8d\x9c\x30\x67\x8f\xc4\x35\x61\x9e\x30\xca\xe7\x06\xa1\xcc\x85\x9f\x52\x3a\x17\x35\x27\xa5\x97\xca\xc3\xaf\x8f\xa8\x5f\x70\xa2\x49\xd8\x90\x8c\x93\xf9\x14\xad\x05\xcd\xeb\x33\xc2\xbe\x82\x0f\x37\x10\x7f\xe6\x59\x29\x6a\x34\xd0\x75\x6b\xe9\x4f\xd2\x72\x3f\x6b\xf7\x55\xdf\xec\xa9\x34\xe1\x50\x6a\x2c\x6e\x22\x26\xd5\xd9\xb0\xd1\x88\x55\xfd\xe1\x11\x90\x20\x89\x37\xd1\x83\x3a\x9b\x28\x4d\xc4\xd0\xd5\x42\x48\x04\xc2\x7f\x08\x54\x4b\x52\xd4\x08\x22\x53\x75\x94\x26\x4c\xa4\x09\xe3\xe9\xb6\x28\x35\xd2\x37\xa5\xff\x1e\xa3\x7c\xe9\xff\x83\xbc\x88\xf6\x4d\x14\xe2\xb5\x00\x97\x08\xac\xd5\x1d\x40\xbb\xa5\x8b\xf2\xd9\xd2\x34\xe0\x3a\x33\x9d\x87\xb0\x56\x14\xb0\xaf\xe2\x4f\xdc\x78\xac\xa7\x86\x94\x0f\x29\x5b\x0b\x99\x31\x47\xe4\xf9\xbf\xce\xf8\x81\x87\x05\xf0\x92\x47\xe2\xd4\x3a\xe0\xa2\xf5\x46\x59\xeb\x7c\xbc\xfd\xf3\xf1\x01\xba\x6e\x98\xaa\xad\x8d\xe5\xce\xfc\xff\x83\x77\x59\x38\x4a\x83\xf3\x72\xd3\x5f\x16\x36\x75\xbe\xb9\x23\x93\xa5\xf8\x81\xbe\x4c\xbc\x42\x77\x66\xcb\xb5\xb5\x47\xd9\x77\xa7\x6b\x77\xea\xed\xaa\x87\x6d\xff\x81\x92\x07\x97\x50\xef\x77\xbe\xd8\x5a\x6c\x7e\x32\xde\xe3\x9a\x95\xf6\x1c\x65\x2d\x60\x9d\x83\xe7\x63\xcf\xac\x81\x93\x1d\xe5\x9b\x6b\x33\xf2\x17\x5e\xe1\x92\x3e\x5d\x0f\x57\xc4\xb7\x19\x09\x55\x9b\x8d\xa4\x4a\x9e\x54\x7d\xd6\x13\x46\x9d\xc3\xe8\xb4\x7f\xfc\x0e\x7b\x8a\x3f\x72\x21\x5b\x8d\x17\xc0\x2d\xd8\x67\xc4\x83\xd0\x90\x83\x83\x62\x57\x82\x73\x9a\xfc\x79\x1d\xc6\x4b\x37\xd6\x33\xe3\xcc\xd8\x3b\x6c\xc2\x71\x1e\xe3\x6d\x12\xf5\x41\x87\x2a\xbb\x0e\x8a\xf0\xf9\x8a\x65\xe8\xb5\xab\x65\xdb\x78\x7c\x1c\xcf\xbb\xee\x84\x3c\x89\xb5\x09\xf9\x8c\xc6\xf0\xf3\x8a\xe2\x88\x8d\xd2\xb4\x71\x44\xb4\x1f\x91\xde\xe5\xf5\x6b\xd7\xda\xbd\x8e\x9f\x44\x0f\xec\x4a\xb3\x74\x1c\xb2\x59\xd3\x8f\xc8\x7b\xc3\x4f\x47\x2c\xc2\xac\xe8\xf8\x2b\xa7\xb2\x9f\x95\xad\x3d\x3e\x62\x86\x35\x41\x56\x72\x15\xfa\xec\x1e\x5e\xce\xaf\x67\x1d\xff\xa6\xba\x73\xda\xd8\xaf\x50\xa8\xc8\x5f\x70\x41\xee\x70\x7d\x99\x71\xfe\xc8\x30\xfe\x58\xd6\xf0\xd6\x60\x34\x01\xae\x12\xb5\x00\x2d\xce\x25\x41\x21\x95\xbb\x76\xe1\xd4\x12\xb9\x19\xfc\xea\x6c\xc7\xb9\x5b\x5e\x27\x17\x47\x6b\x34\x6d\xb5\xf5\xec\xa3\x37\x9e\x1e\x3e\xde\x43\xfd\x3b\x72\x25\x42\x94\x1e\x90\xb8\x90\xc6\xbb\x85\xe7\xe4\xcf\x1d\xc4\x7e\x4f\x36\xce\x1b\xfa\x79\xeb\x81\xf8\xed\x05\xeb\xb7\x87\x0e\xdf\x1a\x3a\x0c\x1b\xba\x6d\x41\x17\x2f\xfb\x42\x29\x72\x97\x47\xdc\x75\xff\x05\x00\x00\xff\xff\x5a\x22\x2b\xa2\xf6\x0b\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3062, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\x31\x0a\xc3\x30\x0c\x85\xe1\x3d\xa7\x78\x63\x0b\xae\x31\x81\x2c\xed\x69\x94\x44\x15\x25\x41\x02\xc5\x19\x4a\xe8\xdd\x8b\xa9\x0d\x5d\x32\x49\xc3\xf7\xbf\xe8\x4c\xf3\x3b\xe0\x77\x41\x38\x30\xd9\x6a\x7e\x87\x38\xb3\x3e\xf0\xe9\xa2\x5a\x6e\xaa\xbd\xff\xd0\x9c\x54\xb8\xc8\x2e\x66\xde\xb2\x2d\x38\x30\xd2\xb4\x88\xdb\xae\xf3\xad\x32\x97\x91\x2e\x29\xf4\xc3\x10\x52\x48\xb1\xbf\x96\xe9\xe2\x9f\xf4\x5a\x77\xe7\xed\xbc\xaa\x4d\xab\xbe\x01\x00\x00\xff\xff\x74\xca\x77\x00\xb4\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 180, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

