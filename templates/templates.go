// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(436), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(436), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\x06\xc4\xde\x02\x98\xb1\x93\xd3\x96\x12\xb0\xed\xa6\x45\x81\xa2\x28\x36\xfb\x03\x34\x39\x8e\x08\x53\xa4\x2a\x8e\xbc\x08\x54\xfd\x7b\x41\x4a\x72\x14\x5b\x72\x77\xab\x93\xc8\x79\x9c\x37\x24\xdf\x1b\xa9\xeb\x08\xab\xda\x4a\x42\x60\x7b\x19\x90\x97\x28\x35\x83\x4d\xdf\x67\x99\x90\x50\x36\x78\xc8\x19\x67\xa0\xac\x0c\x21\x67\xad\x81\xbd\x0c\x46\x41\x65\x9c\x81\xc6\xbc\x94\x04\x07\xeb\x25\xa1\x86\x7d\x4b\xe4\x1d\x2b\x7e\x96\xea\x28\xb8\x2c\x32\x51\x6e\x8b\x5f\x4a\xe9\x03\x54\xde\x1d\xf1\x55\xf0\x72\x5b\x64\x99\xa8\x8b\x0c\x00\x60\x1e\x02\x13\xa0\xeb\x36\x69\x6a\xf3\x4c\x92\xb0\xef\x37\x09\xd5\x75\xe6\x00\x63\xe0\x93\x22\x73\xc2\xbe\x4f\x81\xf8\xbc\x55\xa8\x22\x80\xd7\xb2\x0d\x38\x2f\xf6\x46\x99\x7f\x45\x6c\xaa\x73\xa0\x41\x1b\x6e\xa5\x6e\x30\xb4\xd5\xf7\xe6\xfe\x92\xc0\xf3\xe4\x4e\xf7\x7d\x26\x78\x5d\x64\xe2\xe0\x9b\x0a\xa4\x22\xe3\xdd\x39\xbb\xc5\x13\x5a\xce\xa0\x42\x2a\xbd\xce\xd9\x6f\x4f\x5f\x19\x78\x17\xda\x7d\x65\x28\x67\x54\x9a\xb0\x19\x96\x40\x0e\xf3\xd1\xdd\x30\x4a\xeb\x37\x27\x69\x5b\xfc\x89\x45\x52\x61\xe5\x1e\x2d\x1c\x7c\x93\xb3\x14\x64\xe3\x55\xa4\xc1\x47\xc1\x53\x3c\x21\x03\x5a\x54\x04\x4e\x56\x38\x61\xc1\xe8\xf3\xb2\xb4\x03\xe1\xeb\x44\x97\x18\x72\x76\xcf\x86\x7b\xc1\xbf\xa7\xab\xf9\x23\x82\xe1\x1e\xfa\x1e\x86\x7c\xa8\xa7\x6d\x17\xf7\x90\x83\x36\x41\xee\x2d\x42\xda\xae\xe0\x43\xba\xc5\xdc\xdb\x95\xdc\xdb\xc5\xdc\x5b\xc8\xa1\xc1\x40\xb2\x21\xa8\x1b\xaf\x30\x04\x0c\xf0\xd2\x48\x85\x87\xd6\xda\xd7\x9b\x54\xbb\x15\xaa\xdd\x22\xd5\x0e\x72\xd8\xc2\x1d\x1c\x8d\xb5\x6f\x5c\x37\x09\x1e\x56\x08\x1e\x16\x09\x1e\x20\x87\x1d\xdc\x81\xd4\x9a\x37\x58\xf9\x13\xf2\x69\x6b\xdf\x4a\x6f\x11\x2a\xa9\x4a\xe3\xfe\x83\xf3\x71\x85\xf3\x71\x91\xf3\x11\x72\x78\x80\x3b\x30\x8e\x1a\xaf\x5b\x85\xe0\x90\xbe\xf9\xe6\x78\x7d\x53\x82\x0f\xab\xd3\xbb\x71\x75\x4b\x40\xaf\x35\xe6\x6c\x50\x29\x9b\x0a\x78\x46\x62\x45\x26\x78\xd4\x79\xb4\x7b\xb9\x2b\xa2\xa3\x4d\x20\xa3\x82\xe0\xe5\x2e\x4e\xd2\xa0\x86\xb3\x99\x94\xaf\x6a\xa9\x08\x14\x5a\x8b\x1a\x02\x35\xa6\x46\x0d\x09\x36\x69\x90\x62\x6f\x9a\xde\x9b\xe2\xcd\xaa\x54\x16\x9f\x92\x1d\x04\xa7\xf2\xfd\x7c\x64\x6e\xc3\xc2\x7c\xab\x14\xa2\x46\x7d\x1d\xfa\x55\x1a\xbb\x34\xff\x7c\x34\x75\x3d\x0f\x08\x3e\x55\x11\xe7\x52\x6d\x5d\x07\x8d\x74\x2f\x08\x1f\x02\xc1\xc7\x7c\xde\xb8\xbc\x0b\x30\xf6\x97\x8b\xea\x75\xd1\x75\x1f\x02\x6d\xfe\x94\x15\xf6\xbd\xe0\xa4\xdf\x47\xcf\x83\x73\x3f\x8c\xe8\x27\x17\xcf\x46\xf7\x3d\xbc\x8b\xc7\x67\x0c\x5d\xcd\x5f\xf6\xb4\x81\xf6\xf7\xcf\x7d\xcf\x47\x7f\xce\xfb\x1b\x19\xf7\xba\xd2\xdf\x46\xf4\xb9\xc1\xbd\x15\x77\xd1\x45\xa7\xe7\xf3\xb0\xe0\x87\x4a\x42\xf7\x03\x15\x0d\xe0\xa5\x82\x52\xe7\x3d\xd3\x5d\x1d\xee\x40\x78\x96\xc3\xd2\xf9\x0f\x90\x41\x16\xeb\xf1\x51\x1e\x73\xc0\x20\x90\xae\x03\x74\x1a\x52\xff\x4f\x7a\x1e\x4d\xf1\x05\x15\x3a\x9a\x7c\xb6\x62\x8b\xff\x69\x87\xaf\x26\x7e\x7e\x2e\x15\x7c\x69\x92\x9b\x02\xc6\x99\x7e\x9f\x4e\xe8\xe8\xa6\x7c\x71\x13\x29\xe1\x9f\xf8\xc5\xa9\x24\xc5\xc1\xca\x51\xe1\xe8\x86\xef\x3b\xa8\xab\xff\x93\x83\xf7\x84\x4d\xfa\x43\xf9\x37\x00\x00\xff\xff\x89\x78\xb2\xda\xbc\x08\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 2236, mode: os.FileMode(436), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xa4\x36\x10\x7f\xdf\x4f\x31\x42\x79\x2d\xe8\xee\xf1\x44\x90\xd2\xa4\xa7\x8b\x9a\xbb\x9e\x36\x49\xfb\xec\x85\x61\xb1\x6a\xec\x95\x3d\x24\x8d\x5c\xbe\x7b\x65\x03\x1b\xc0\xec\x8a\xf4\x72\xfb\x84\x3d\xff\x98\xdf\xcc\xfc\x98\xb5\x96\xb0\x3e\x08\x46\x08\xd1\x8e\x19\x4c\x2a\x64\x45\x04\x71\xdb\x6e\x36\x69\xf5\x21\xfb\x0b\x45\xae\x6a\x04\x52\xf0\x80\x86\xae\xf6\x28\x29\x4d\xaa\x0f\xd9\x66\x93\x12\xdb\x09\x84\x5c\x30\x63\x2e\xa3\x86\x43\xae\x84\x60\x07\xc3\xe5\x1e\x9e\x50\xbf\x40\xae\xea\x03\xcb\x09\x0c\x69\x7e\xc0\x02\xbc\x7e\x94\x6d\x00\x00\x52\x72\x81\x86\x67\xdd\x3d\x74\x87\x22\xbb\xbd\x49\x13\x2a\xa6\x77\xd6\xc6\xb7\x37\x6d\xfb\x2a\x48\x93\xc1\x2c\xb0\x7f\x3c\x2c\xda\x3f\x1e\x88\xd7\xb8\xd2\xc7\x9f\xa8\x0d\x57\x72\xd1\x51\x2f\xbb\x95\xa5\x5a\xe9\xed\x4a\x33\xb9\x57\xc0\x6b\xb6\xc7\x45\x97\x9d\xc2\xad\x93\x87\x2e\xd3\xc4\x43\xe7\x30\xaf\x3e\x66\xd7\xa2\x31\x84\x3a\x4d\xaa\x8f\x8b\x55\x40\x21\xb0\x78\x2b\xe8\x55\x07\x7a\x35\xbd\xbb\xd6\xc8\x08\x8b\xe4\x9e\x98\x26\x2c\xe6\x6f\x5e\x65\x7d\x3f\x04\x76\x4a\xe9\x82\x4b\x46\x4a\x87\xc2\x9b\x5f\xef\x51\x3f\xe1\x48\x32\x02\x2e\xe9\x5f\xd1\x5a\x70\x88\x20\x5c\xd4\xf0\xe9\x12\xe2\xaf\x2c\xaf\xb8\x44\x03\x6d\xbb\x8c\xf0\xf1\xe0\x7e\xd6\x5e\xd4\xbe\x5d\x26\xb7\x29\x83\x4a\x63\x79\x19\x25\x42\xed\x4d\x72\x54\x4a\xea\xce\x79\x04\xc4\x49\xe0\x65\x74\xa7\xf6\x26\xca\x52\x3e\xa0\x5a\x72\x81\x40\xf8\x0f\x81\x6a\x48\x70\x89\xc0\x73\x25\xa3\x2c\x4d\x78\x96\x26\x2c\x5b\x17\x45\x22\x3d\x2b\xfd\xf7\x31\xca\xb7\xee\x0c\x62\x16\xed\x99\x97\xfc\x54\x80\xb0\x77\xc2\xbc\xfb\xa2\x5d\xd1\x2c\xfd\x24\x54\xed\xeb\x3a\x51\x9d\x86\xb0\x96\x97\x70\x51\xc7\x5f\x98\xf1\xb5\x1e\x2b\x52\x31\xbc\xb2\xb5\x90\x1b\xb3\x45\x56\xbc\x38\xe5\x3b\xd6\x33\x85\xbf\xb9\x27\x46\x8d\x2b\x5c\xb4\x0c\x94\xb5\xce\xc6\xeb\x3f\x6e\xef\xa0\x6d\x87\xae\x5a\x0b\x2c\x73\xea\x3f\x5e\xbc\x79\xe2\x28\x0c\x4e\xd3\xcd\x7e\x09\x74\x64\xb1\x1a\x91\xd1\x50\xbc\x01\x97\x91\x55\x8f\xce\x64\xb8\xd6\x62\x94\xbf\x1a\xbd\x37\x52\xe7\xb3\x1e\xa6\xfd\x0d\x29\x0f\x26\x7d\xbe\xaf\x7c\xb1\x36\xd9\x62\x67\xbc\xc5\x7b\x66\xda\x71\x94\xb5\x80\xb2\x70\x24\x34\xe5\x64\xf7\x6d\x34\x8b\x8c\x4c\x68\x08\x7e\x80\x96\xbf\xb1\x1a\x43\x0e\xed\x80\x0c\xef\xb7\x68\x1a\x41\x0b\x82\xab\x9c\xb8\x92\x66\x25\xe7\x92\xe7\x5c\x9f\xd4\x88\x70\xa7\x55\x76\xd2\x3f\x7e\x87\x0b\x8a\x3f\x33\x2e\x1a\x8d\xb3\xba\x06\xe4\x74\x2c\x97\x83\xc4\x55\x8b\x62\x97\x9c\x33\x1a\x1d\x4e\x57\x79\x6e\x96\x74\xc4\x39\x51\xf6\x06\xab\xca\x3c\x8d\xb1\xaa\xbb\x0d\x31\xc2\x68\xce\xb8\x8e\x1f\x29\x76\xf8\x3e\xe1\x8c\x71\xc7\x0a\xdf\x59\xe3\x36\xa3\x05\x0d\xf7\xeb\xa5\x71\x1c\x2f\x38\x98\x11\xd1\xf8\xb7\x6d\xa4\xe4\x72\xbf\x28\x7b\x1d\x8f\x00\xb9\x03\x6b\x0c\x46\xa3\xa5\x81\xb8\x7c\xe9\xb6\x13\x10\x6c\x87\x62\x01\xd6\x10\x5e\xef\xe5\x14\xa4\x47\xf5\x79\x3d\x61\x81\x38\xcf\xe6\xe9\xb0\xc1\x22\x2c\xf3\xe9\xf4\x34\x9a\xa6\xfe\x3f\xf9\x8d\x72\x13\xec\xe5\x5c\x6a\x41\x5a\xc1\xb7\x60\x61\xcb\x1b\xcd\x4a\xdb\x42\xd9\x3f\x9e\xd0\xec\x27\x36\xdc\x06\x4f\x71\xd0\xe7\xa3\xbf\xf7\x5d\x0c\x1f\xf8\x12\x03\xb9\xf1\x0f\x6f\xbf\xa2\x31\xdd\x8a\x1b\x10\xd3\x41\x69\x5a\x49\x3f\xda\xd3\x4f\x67\x72\x7a\xe3\xb3\xf6\x42\xc7\x0f\xb3\x8d\x7e\x2a\x44\x43\x27\x85\xfd\xab\xb6\x6d\x37\xa1\xc7\x8b\x07\xdd\xc8\xdc\x2d\x50\x6d\x1b\xc7\xf1\xb1\xcb\xc6\x36\x5f\xb6\x58\x3a\xda\x7a\xe2\xf8\x0c\x65\x23\x04\xd4\x43\xde\x2c\x1b\x3a\x21\x0c\x3b\xf5\x35\x38\xf1\x87\xef\x8c\xaa\x8e\xfb\xd6\x56\x7b\x8b\x39\x4a\x82\xbc\x62\xaa\xaf\x78\x7a\xe8\xec\xba\x6f\xc3\x27\xb0\x36\xbe\x76\x52\xb7\xe5\xd1\x30\x58\x3e\xd9\xfe\x3e\xe0\xac\xd7\x91\xf2\x6e\x43\x9a\xa8\xb9\xe4\xa0\xf9\xbe\x22\x28\x85\x72\x20\xc1\xae\x21\x72\x53\xe2\xa7\xf4\x38\x15\xe1\xf6\x34\x73\x1d\x8e\xe8\x19\xdf\x5b\xaf\x3c\x76\x7e\x1c\xb5\x74\xa7\x93\x1e\xae\x69\x84\x28\xbb\x41\x62\x5c\x18\x6f\x96\x26\x87\x9f\x3f\x12\xdd\xc4\xae\xec\x71\xf4\x3d\xde\x15\xe2\xb7\x27\x94\xe7\x1b\x1d\x7d\xa3\xc3\xbf\x50\x2a\x5d\x33\x3a\xd3\xf5\xd8\x13\xc7\x3a\xde\x08\xfe\xfe\x97\x4a\x91\x5b\x9c\xe2\xb6\xdd\xfc\x17\x00\x00\xff\xff\xa1\x35\xcf\x52\x1c\x10\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 4124, mode: os.FileMode(436), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x41\x6a\x03\x31\x0c\x45\xf7\x73\x0a\x2d\x5b\x70\x85\x09\x0c\x85\x04\x7a\x17\x8d\x47\x75\x4d\x1c\x09\x64\x7b\x51\x86\xdc\xbd\x98\xc4\x6d\x86\xd2\xae\xa4\xc5\xfb\xff\x7d\x34\xa6\xf5\xd3\xc1\xed\x02\xc1\x06\x41\xb3\xda\x11\xa2\x31\xcb\x09\xae\x13\x8a\xd6\x41\x8d\xf7\x11\x54\x23\x89\xdc\xc9\x09\x2b\x97\xaa\x67\xd8\x60\xa1\x70\x8e\xa6\x4d\xd6\x97\x3b\x66\x71\xa1\x27\xef\x0e\xf3\xec\xbc\xf3\x78\x78\xee\xd5\x9d\x7f\xa7\x94\x9b\x71\xf9\x3b\x75\xcf\x8c\xd4\x84\x41\x9b\x54\xb6\x02\x3f\xc2\xfd\xea\xdf\x45\x49\x3e\xd8\x52\xed\xd2\x7d\xfa\x41\x3f\x9c\xbc\xfe\xdf\x70\xdb\x0d\x58\x2a\x55\x06\x6c\x09\x33\x2d\x9c\xdf\x30\x05\x15\xd8\xe0\x42\x16\x93\x1c\xc1\x83\xc7\xd7\x99\x2f\xdf\xcf\xe9\x3a\x7d\x05\x00\x00\xff\xff\x42\xde\x01\x3f\x71\x01\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 369, mode: os.FileMode(436), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcb\xae\x9b\x30\x10\xdd\xfb\x2b\x46\x88\x35\xe8\x6e\x23\xc7\x52\x5b\xa9\x9b\xaa\x0f\xf5\xf6\x07\x1c\x7b\x12\xac\x82\x41\xf6\x90\x2e\x46\xfe\xf7\xca\x0e\x04\xd2\xdb\xd7\xcd\x2a\x9e\x39\x3e\x8f\x19\x80\x99\x70\x98\x7a\x4d\x08\xd5\x49\x47\x6c\x3b\xd4\xb6\x82\x26\x25\x21\xa4\x75\x57\x30\xbd\x8e\xf1\x58\x11\x46\xaa\x94\x60\xfe\xe1\xa8\x83\x9a\x0e\x47\x68\xbe\x61\xa4\x94\x84\xd4\xd0\x05\x3c\x1f\xab\xb6\x5a\xd1\xb3\x83\x93\x8e\xce\xc0\xe0\xbc\x83\xe0\x2e\x1d\xc1\xb9\x1f\x35\xa1\x85\xd3\x4c\x34\xfa\x4a\xbd\xd5\xe6\xbb\x6c\xb5\x12\xb2\x7b\x52\xcc\x35\x35\x9f\xf4\x80\x29\xc9\xb6\x7b\x52\x42\x4e\x2b\x57\x24\x4d\x58\x29\x01\x00\xf0\x9c\xff\x1f\x40\x30\xbb\x33\xd4\xd4\xbc\x31\xe4\xae\x98\x52\x69\xae\xc5\x2f\x7a\x8e\xce\x5f\x96\x6a\xfe\x4d\xb7\x4a\xd3\x34\x0b\x10\xfb\x88\xbb\x7e\x98\xbd\x77\xfe\x72\x3f\x6f\x89\x72\xec\x76\x67\xae\xcd\x54\xb8\xcf\xf9\x97\x84\xd9\x08\x96\x88\x8b\xaa\xb7\x29\x89\x07\xf5\x42\x67\xc5\x3f\x44\x03\xc6\x79\xf8\x5f\xd5\xaf\x05\x5c\x64\x57\x49\xd9\x4e\x4a\x08\x49\xfa\xd4\xe3\x8e\xc4\x8c\xc3\xa4\x0d\x81\xc1\xbe\x47\x0b\x91\x82\x9b\xd0\x42\x81\x2d\x03\x97\x14\xd4\x36\x16\xb2\xea\xbd\x76\xfd\x1c\x30\x1e\xa0\x18\x5c\x8f\x79\x6d\x64\x97\x3b\xed\x7a\x89\x39\x68\x7f\x41\xa8\x07\x38\x1c\xf3\x6a\x3e\x62\x8c\xfa\x52\xe0\x14\x54\xe6\x63\xae\x87\x72\x39\xa8\xc2\xb0\x59\x2e\x36\x5e\x6b\x1b\xcc\x38\x7b\xc2\x10\xef\xfe\xf3\xf3\xfc\xdb\x2c\x9d\x7a\x77\xc3\xca\x96\xba\xc7\xc6\xf3\x6c\x0c\xa2\x45\xfb\xb2\x95\x03\xef\xeb\x5b\xd8\x5c\x2b\x5a\xcc\xb0\xc4\x36\x4b\xec\x45\x28\xc2\xb2\x75\x49\x61\xcd\xc3\x0c\x26\xc6\xfc\x26\x7d\xfe\x00\xb5\x69\x6e\xfc\x90\x52\xf5\x38\x77\xe6\xda\xdc\x5f\x90\x75\xd2\x0f\xcd\xbb\xe9\x3f\x22\x6e\xdc\x2f\x57\xc5\x0c\xe8\xb3\xe6\x6e\xea\xdb\x1e\xac\xbb\x96\xf3\x2f\xdf\x89\xf3\x38\x12\x86\xf2\xa5\xf8\x19\x00\x00\xff\xff\x4a\xe0\x06\x19\x44\x04\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 1092, mode: os.FileMode(436), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

