// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x41\x6e\xdb\x30\x10\xbc\xfb\x15\x0b\x41\xd7\x52\x48\x8e\x05\x4d\x20\xb5\x5b\x34\x68\xda\x02\x4e\x8a\x9e\x19\x69\x15\x09\x95\x48\x83\x5c\x1b\x08\x08\xfe\xbd\x20\x45\x35\xb2\xe5\xb8\x3e\xf8\x46\xed\x2c\x3d\xa3\x99\xb1\x9c\x23\xec\xb7\x9d\x24\x84\xec\x59\x5a\x2c\x1a\x94\x55\x06\xcc\xfb\xc5\x82\x37\x37\xe2\x37\x76\xa5\xee\x11\x48\xc3\x13\x5a\xba\x7b\x41\x45\xbc\x68\x6e\x44\x80\x6f\xc5\xaa\xdb\x59\x42\xc3\x8b\xe6\x36\x4c\x48\x3e\x77\x08\x65\x27\xad\x5d\x66\xbb\x16\x4a\xec\x3a\xac\xc0\x92\x69\xb7\x58\x41\x84\x33\xb1\x00\x00\xe0\x14\x98\xc6\xb3\x19\x0e\x09\x10\xf7\x6b\x5e\x50\x73\x38\x4b\xd4\xc7\xe3\x95\xd6\xa6\x6a\x95\x24\x6d\xe6\xe0\xfa\xd3\x23\x9a\x3d\x4e\x10\x5e\x8c\x5c\x61\x16\x15\x38\x07\x46\xaa\x17\x84\xbc\x87\x8f\x4b\x60\xdf\x65\xd9\xb4\x0a\x2d\x78\x7f\x4a\x5d\x25\x9c\xcb\x7b\x76\xbf\xf6\x9e\x17\x54\xbd\x41\xce\xb5\x35\xe4\x3d\xfb\x2a\x6d\xd4\x9a\xae\xa7\x5b\xa3\x2b\xce\x41\x69\xed\x06\x65\xf5\x1a\x96\x1f\x64\x32\x35\x4e\x1e\x49\xd2\x2e\x10\x67\x82\x4b\x68\x0c\xd6\x4b\xe7\xc2\x5a\x5c\xf9\xb5\x79\x00\xef\x47\x23\xa4\x38\xa6\xc7\xce\xe2\x21\xa9\xf8\x30\xdb\x51\xd5\xc5\xba\x26\xd6\x9e\x57\x37\x59\x4c\x1a\x0f\x52\x39\x56\x7a\x9e\x75\xcc\xec\x3c\xe5\xb8\x95\xf8\xde\x82\x9e\x92\x0d\x61\x3b\x07\xa8\xaa\x90\x26\x2f\x62\x03\x53\x77\x43\x9f\xed\xb5\x9b\xfb\x43\xf6\x38\xef\x61\x78\x0d\xbc\xb0\x84\x14\x4b\x18\xc5\xbd\xdb\xc0\xd1\x8b\x8c\xd0\x52\xe1\x5c\x4e\x2c\x10\x07\x9b\x26\x0f\xff\x71\x3d\x50\xfc\xfc\x06\x39\xb1\x2f\xb2\xed\x76\x06\x07\x9f\xe3\x0f\x8c\x13\xef\xa1\x4e\xc7\x4b\x6d\xdd\x60\x89\x8a\xa0\x6c\xa4\x4e\xee\xf2\xed\x70\x2f\xfe\x41\xd8\x2a\x00\xec\xae\xa4\x76\x8f\xde\xc7\x27\xe8\xb5\xfa\x83\xaf\xd0\x5a\xd0\x8a\x2d\xa6\x6d\x9e\xe1\x75\xfd\x6f\x21\x56\x99\x17\x5b\x71\xbd\xf8\x9e\xda\x53\xf1\x05\xb1\x5a\x5d\x98\x1f\xc6\xfc\x86\xb7\xfc\xbc\x47\x75\x26\x46\xe7\x72\x64\x81\xf2\x44\x56\x03\x38\x30\x4f\xe1\xf7\xcd\x9f\x7d\xca\x6b\xad\x09\x4d\xfc\x98\xff\x0d\x00\x00\xff\xff\xd0\xa0\xdd\x54\xe7\x05\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 1511, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x43\x21\x10\x84\xe1\xbb\x55\x4c\x01\x89\x05\x24\xd5\x6c\x74\x23\x41\xd9\x85\x55\x0f\x41\xec\x3d\x48\x10\x3c\xbc\xd3\xcc\xe1\xe3\xf7\xc6\x14\xbf\x37\xfc\x17\x84\x81\xa0\x45\xed\x81\x64\xcc\xf2\xc4\x74\x5e\xb4\x6d\xb5\xef\x09\xd5\x48\x12\x2f\xe9\x7c\xe3\xda\x34\x63\xe0\x45\x21\x27\xd3\x2e\xf1\x7e\xf6\x56\x6e\x99\x37\x7d\x4a\x37\xae\x97\xd2\x38\x62\xba\x5f\x00\x00\x00\xff\xff\x5d\xf4\x8d\x91\x9a\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 154, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x5d\xaf\xdb\xc6\x11\x7d\x26\x7f\xc5\x46\x40\x02\xa9\x50\x25\x7e\x7f\x08\xf0\x4b\x6c\x07\xf5\x43\x1d\xa0\x75\x9f\x3a\x45\xb0\xbb\xdc\xbd\x21\x2a\x89\x2a\x49\xa5\x73\xaf\x71\xff\x7b\x71\x38\x94\xac\x7b\x7d\x13\x17\x46\x80\x3c\x48\x24\x97\xbb\x33\x73\x66\xce\x9c\xe1\x76\xab\x5e\x77\x8d\x53\x77\xee\xe8\x7a\x3d\xba\x46\x99\x7b\x75\xd7\xfd\xd9\xb4\xc7\x46\x8f\x7a\x13\x6e\xb7\x6a\xe8\xce\xbd\x75\xc3\x0e\xf7\xa3\x3b\x9c\xf6\x7a\x74\xc3\xd6\xe8\xc1\x6d\x7d\xd7\x8d\xae\xdf\x8c\x87\xd3\xfe\x85\xb7\x3f\x3b\xdd\xbc\xf0\xae\x3d\x36\x8e\x5f\x58\x3f\x9d\xcd\xbe\xb5\xdb\x61\xbc\xdf\xbb\x8d\x1d\x86\xa7\x6f\xaf\x77\x9b\xbb\xee\xf9\x9b\x61\xbc\x9a\x7b\xf3\xa3\x7a\xff\xe3\x07\xf5\xf6\xcd\xbb\x0f\xdf\x84\xe1\x49\xdb\x7f\xeb\x3b\xf7\x69\x73\x18\xb6\x87\x53\xd7\x8f\x6a\x19\x06\x0b\x73\x3f\xba\x61\x11\x06\x0b\xdb\x1d\x4e\xbd\x1b\x86\xed\xdd\x43\x7b\xc2\x82\x3f\x8c\xb8\xb4\x9d\xfc\x6f\xdb\xee\x3c\xb6\x7b\x3c\x74\xd3\x81\x93\x1e\x7f\xde\xfa\x76\xef\x70\x83\x85\x61\xec\xdb\xe3\xdd\xf4\x6e\x6c\x0f\x6e\x11\xae\xc2\xd0\x9f\x8f\x56\xcd\x89\xfc\x9b\xd3\xcd\x12\x37\xea\x9f\xff\x82\xdb\xb5\x3a\xea\x83\x53\x72\x6c\xa5\x96\x97\x55\xd7\xf7\x5d\xbf\x52\x1f\xc3\xe0\xee\x61\x7a\x52\xbb\x57\x0a\x51\x6d\xde\xbb\xff\xc2\x88\xeb\x97\x53\xd8\x78\xfe\xfe\xec\xbd\xeb\x27\xb3\xab\x55\x18\xb4\x7e\x3a\xf0\xcd\x2b\x75\x6c\xf7\x30\x11\xf4\x6e\x3c\xf7\x47\x3c\xae\x95\x3f\x8c\x9b\xb7\xb0\xee\x97\x0b\x18\x52\xdf\xfe\x67\xa7\xbe\xfd\x65\x21\x91\x4c\xbe\x56\x61\xf0\x18\x86\xc1\x2f\xba\x57\xe6\xec\x95\xf8\x11\x27\x61\xf0\x93\x84\xf3\x4a\xb5\xdd\xe6\x75\x77\xba\x5f\x7e\x67\xce\x7e\xad\xee\x1e\x56\x61\x60\xf7\x6f\x2f\x91\x6e\x5e\xef\xbb\xc1\x2d\x57\xe1\xef\x15\x0f\xcc\x88\xfd\x5f\x31\xe4\xfa\x5e\xe2\x9e\x17\xcd\xd9\x6f\xbe\x47\xe8\xcb\xd5\x1a\x3b\xc2\xc7\x30\x1c\xef\x4f\x4e\xe9\x61\x70\x23\x52\x7e\xb6\x23\xac\x4c\xf8\xe6\x7a\x84\x41\x7b\xf4\x9d\x52\xdd\xb0\xf9\xa1\xdd\xbb\x77\x47\xdf\x5d\xcf\xcd\x25\xbc\xac\xdf\x58\x98\x6a\xa8\xd4\x5c\xc6\x30\x18\xda\x87\xe9\xb9\x3d\x8e\x45\x16\x06\x07\x74\x96\xba\x1a\xfd\x6b\xd7\xb8\x69\xf1\x43\x7b\x70\x0a\x34\xd9\xe0\x0e\x7e\x26\xaa\x2c\x7d\xfb\xdc\xd7\x4a\xbd\xd7\x07\xb7\x5c\xcd\x1e\xe0\x73\x46\xe9\xdb\x0d\xbc\x87\x8f\xbf\x71\xf6\xef\xed\x03\xce\x4e\xd1\x3c\x3d\x8a\x40\x7f\xf3\x28\x62\x5d\xae\x6e\x23\x7f\x6a\x00\xd0\xbe\x64\x00\xe0\x96\xab\x4f\x40\x3f\xb3\x30\xa3\xff\x75\x23\xef\x86\x37\x6d\xbf\x5c\x29\xd3\x75\xfb\xdb\xd3\x7a\x3f\x7c\x01\xf9\xfd\x20\xc0\x5d\xef\xb5\x75\x1f\x1f\x6f\x4e\xcf\x94\x00\xcb\x7f\x82\x4c\xfd\x30\x69\xd8\x87\xc3\x69\xaf\x5e\xcd\x6c\x58\x2e\x88\x63\x4f\x5c\x19\xe2\xa8\x22\x8e\xa2\xf9\x57\x13\x17\x8e\xb8\x9a\xd7\xbc\x27\x36\x09\x71\x13\x13\x67\x9e\xd8\xd6\xc4\x89\x25\x36\x29\xb1\x4b\x9f\xbd\xd3\x72\xd5\x35\x71\x94\xc9\x7a\x8c\xfd\x39\xb1\xa9\x89\xd3\x9a\xb8\x2c\x88\xab\xe8\xc6\xdf\xec\x03\xbf\xa4\x24\xd6\xcd\xfc\xde\x13\xc7\xc5\xed\xbe\xc5\x55\x6f\x9e\x20\x9a\xfb\xe0\x25\x7d\xb9\x74\xcb\x8d\x3e\x85\x41\xf0\x2c\x23\xeb\x30\x08\x16\xcf\x95\x7e\xb1\x0e\x83\xd5\x95\xb5\x4f\x0f\xc0\xd7\x9f\xa6\x46\xbb\xf5\x35\x75\xda\x55\xce\x5e\x0c\xf1\x4b\x72\x71\xed\xf2\xa9\x4f\x61\xe5\x69\xcd\x3f\xa2\x1b\x76\xea\x85\x60\x15\xc8\xbe\x53\x49\xb2\x56\x60\xed\xee\x96\xd4\xcb\x2c\x89\x56\xd3\x3a\xb8\xb8\x13\xae\xfe\xe3\xd8\xf2\x32\xce\xaa\xbc\xac\xd2\x24\xc9\xd7\x2a\x5a\x3d\x86\x81\x86\xd3\xef\x26\x68\x1f\x27\x3c\x3b\x35\xc3\x42\x44\xbb\xe9\xff\xf1\x9a\x56\xbd\xfe\x8c\x67\x7f\x71\xba\xf9\x6a\x96\xd5\x96\xd8\x7a\xe2\x34\x26\x2e\x34\xb1\xcd\x89\x53\xec\xb5\xc4\x51\x41\xec\x22\xe2\xa6\x21\xd6\x25\x71\x8c\x7b\x47\x5c\x18\x62\x0b\x96\x19\xe2\x54\x13\xc7\x19\xb1\x2d\x89\xcb\x92\xd8\xc7\xc4\x75\x4a\x9c\xe7\xc4\xda\x12\x37\x19\x71\x19\x13\x57\x09\xb1\xce\x85\xa1\x65\x42\xec\x0d\x71\x83\xb5\x8c\xd8\x80\xb5\x11\xb1\x89\x89\x75\x4a\x9c\x64\xc4\x1e\xbf\x86\xd8\x5b\x59\x6f\xb4\xec\xaf\x13\xc1\x55\xe7\xc4\x65\x4a\x9c\x81\xf5\x8e\x38\x89\x88\x53\xc4\x5b\x0b\xf6\x1c\x18\x4a\x62\xe3\xa5\x3b\x62\x47\x6c\x4a\xb1\xd9\xd4\xc4\x55\x26\x7b\x5c\x43\x5c\x58\xe2\xd8\x12\x67\x15\x71\x93\x13\xdb\x54\x70\xc3\x9e\xaf\x05\x6f\x53\x48\xa7\x4d\x7b\x1d\x71\xe9\xe5\xe7\x1d\x71\x0d\xdb\xb8\xce\x39\x34\x97\x38\x0c\x71\x92\x48\xac\x38\x53\x14\xc4\x09\xfc\x5b\x62\x97\x11\xc7\x15\xb1\x8e\xa5\xab\x71\xf5\x33\x3e\x63\xa4\x56\xa6\x21\x76\x56\x72\x57\xc1\x57\x24\xf5\xd4\xa8\x17\x6a\x67\x88\x4d\x24\x71\x03\xa7\x4b\x88\x13\x47\x9c\x5b\xe2\xa2\x26\xb6\x95\xf8\xd4\x11\x71\x95\x4a\xac\xb0\x63\x61\x57\x13\xe7\x29\xb1\x45\x1e\x0c\x71\xa6\xe5\x2c\x6c\xa0\xde\xc0\x9e\x3a\xe2\xa6\x94\x7a\x95\x88\x3f\x17\xde\xe0\x0c\x70\x21\xbf\xc8\xa1\x35\xc4\x5a\x4b\xdd\x1b\x4f\x1c\xe5\xc4\x45\x25\xb9\xad\x0b\xa9\xbb\x4f\x25\x7e\x28\x59\xd9\x08\xb7\x9e\x2b\x11\xf0\xda\x84\x38\x2f\x88\xf3\x66\xf6\x11\xbf\xa8\x44\x17\xce\x7f\x9d\x0e\x5d\x4e\x7f\x52\xa1\xeb\x17\xe5\xe7\x1a\x74\xd9\xfc\xff\x2a\xd0\xb3\xd0\x7e\x57\xfd\xb9\x09\xf3\xa2\x3e\x75\xf4\x07\xca\xcf\xf4\xc5\xfd\xd5\xda\x03\x7d\xc8\x33\xe2\x2c\x96\x77\x8d\x11\xed\x81\xce\x18\x2b\x1a\x11\x83\x73\x46\xf6\x80\x8b\x79\x22\x7c\xaf\x9c\xf0\x2c\x6b\xa4\xf7\x4d\x2e\x3c\x4e\x33\xe1\x1e\xf4\x22\xc2\x5e\xf8\xd4\xd2\xa3\x98\x8a\xe8\x8b\xc9\x66\x2d\x7d\x39\xd9\x4a\xa5\x67\xe2\x4b\xcc\x95\xf4\x8a\x99\x6d\x67\xd0\xc4\x5c\xa6\xae\xc3\xb5\x92\xde\xf0\x15\x71\x56\x08\xcf\x31\x9d\xd3\x46\xf4\xab\xae\x45\xb3\xa0\xad\x49\x2a\x3d\x0c\xed\xa9\x1b\xd1\x36\x68\x0f\xd6\xf2\x9a\x38\xd7\x72\x36\x46\x8c\x99\xe8\x26\x7a\xc3\xce\xf8\xa1\xc7\xe8\xff\xb4\x94\x9f\x9b\xef\xcb\xb9\xaf\x1c\x70\xc5\x82\x03\xba\x15\xa7\x62\xd3\x68\xe2\x72\xce\x1b\xe2\x47\x3e\x91\x17\xe4\x39\xcb\x64\xda\x17\x5e\xec\xa3\x77\x91\x7b\xc4\x93\x25\x62\x07\xf5\x73\x85\xe8\x40\x36\x6b\x23\x30\x43\xe3\x91\x1f\x68\xc1\xe5\xcb\x01\xbd\x0a\x9d\x81\x6e\xe1\xeb\x01\x5a\x02\x7c\x98\x0d\xa8\xb1\x8d\x44\xd7\x90\x7b\xe4\x21\xaf\x24\x2e\xe4\x21\x4d\x25\x57\x17\x9e\x40\x77\x31\x4f\x6a\xe0\x29\x44\x1b\xe3\x59\xe3\x51\x33\x70\xc3\x97\xa2\xc9\xb9\x13\xfd\xc1\x1c\x48\x61\xd3\xc8\xbc\xc1\x2c\xc2\x57\x12\xea\x0b\xdd\xd6\x85\xe8\x32\x9e\x91\xff\xa2\x11\x6c\xf0\xe5\x81\x3d\x95\x3a\xd5\x5a\x6a\x08\xce\xc0\x0f\xec\x57\x76\xd6\xd3\x58\xb0\x81\x3b\xf0\x05\xed\x43\xed\x91\xbb\xb8\x14\x2c\xc8\x71\x55\x8a\xc6\x22\x96\x22\x12\x3d\x44\xae\x30\x73\x30\xe7\x22\x2d\x33\xa0\xac\x64\x7e\x20\x57\x93\xd6\xe5\xf3\x2c\x36\x52\x37\xd4\x17\x9a\xee\x8b\x99\xbb\xa5\xf4\x0a\x38\x89\xdc\x59\x27\x9c\x07\x2f\x31\x4b\x10\x37\xf8\x92\x68\xc1\x87\x3c\x00\x8f\x76\x32\xbb\xd1\x1b\xd3\x6c\x35\x72\x76\xea\xb9\x5a\xb8\x0b\xbe\x21\x46\x9f\xcf\x3c\x2c\xa4\x87\x0b\xd8\x4d\xc4\xc7\x94\x13\x27\xf3\xb6\x99\xe7\x0c\x72\x54\x94\xc2\xcf\x09\x6f\x25\xdf\x0d\xc8\xf9\xff\x02\x00\x00\xff\xff\x18\xad\xf9\xed\x00\x10\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1485783362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

