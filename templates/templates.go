// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x96\x41\x6f\xa3\x3a\x10\xc7\xef\xf9\x14\x23\x94\xeb\xc3\x6a\x8f\x15\xb1\xd4\xd7\xbc\xaa\xd5\x6b\x77\x57\x69\xab\x3d\x3b\x30\x04\x6b\x01\x23\x7b\x52\x6d\x65\xf9\xbb\xaf\x6c\x20\x25\x85\x76\xa9\x94\xe6\x44\x66\xfe\x03\x33\xbf\x31\x7f\x61\x2d\x61\xd5\x94\x82\x10\xa2\xad\x30\xc8\x0a\x14\x59\x04\xb1\x73\x8b\x45\x52\x9c\xf1\x9f\x58\xa6\xaa\x42\x20\x05\x8f\x68\xe8\x72\x87\x35\x25\xac\x38\xe3\x8b\xa4\xe1\x8b\xdb\xf5\x05\x58\x1b\xdf\xae\x9d\x5b\x24\x5b\xcd\xf8\xe2\xa9\x09\x91\xa7\x86\x64\x85\x3e\xca\x1a\xee\xef\x74\xce\xaf\xca\xbd\x21\xd4\x09\x2b\xce\x7d\x84\xc4\xb6\x44\x48\x4b\x61\xcc\x2a\xda\x4b\x48\xb1\x2c\x31\x03\x43\x5a\x36\x98\x41\x48\x47\x7c\x01\x00\x90\x90\x6f\xaa\xbf\xd6\xed\x45\x97\xe0\xb7\xeb\x84\x51\x71\x1c\xbb\xd2\x28\x08\x33\xf6\x40\x42\x13\x66\x09\xa3\xec\x58\xd0\x8d\x31\xaa\x53\x4a\x67\xb2\x16\xa4\xf4\x38\xb9\xfe\xf7\x01\xf5\x33\x0e\x32\x09\xeb\x9b\xf1\xb1\xd0\xa2\xb5\xa0\x45\xbd\x43\x58\x56\x70\xb1\x82\xf8\x5e\xa4\x85\xac\xd1\x80\x73\x53\xed\x0f\xda\xf2\x3f\x6b\x97\x55\x0b\x73\x18\x4d\x04\x14\x1a\xf3\x55\xc4\x4a\xb5\x33\xec\x20\x62\x55\x7b\xf3\x08\x48\x52\x89\xab\xe8\x4e\xed\x4c\xc4\x13\xd9\x53\xcd\x65\x89\x40\xf8\x9b\x40\xed\xa9\x94\x35\x82\x4c\x55\x1d\xf1\x84\x49\x9e\x30\x31\x68\xe4\x0d\xa0\xa9\xb6\x3a\xa6\x97\xf4\xa6\x3b\x36\x96\x76\xd8\x8f\xa4\xc7\x8f\xb0\x56\xe6\xb0\xac\xe2\x1b\x61\xc2\x2a\x86\x42\xca\xfa\xfe\xad\x85\xd4\x98\x0d\x8a\xec\xc5\x8b\xef\x44\x77\xfe\x42\xe4\x81\x04\xed\x3d\xd7\x88\x4f\xd2\xb2\xd6\xd7\x04\xfd\xd3\xe6\x0e\x9c\xeb\x97\x2e\xa6\xf5\x23\xba\xc2\xcb\x4f\xcd\xd6\x5a\x2c\x0d\x1e\x8f\xcb\xff\x19\x69\xea\x6c\x36\x91\xc1\x99\xfd\x04\x97\x41\x55\x47\xe7\xe8\xec\xcf\x65\x94\xbe\x16\x7d\xc1\x29\xfc\x60\xea\xfe\x65\xfc\xc4\xc8\x7d\x49\x37\xef\xeb\xeb\x3c\x77\xd8\x6c\x6b\x42\xc5\x29\x27\x6d\x2d\xc4\x5a\xc0\x3a\x83\x60\x97\xc1\xf8\x3a\xcb\xf4\x8e\x6b\x4e\x6d\x98\xdf\x44\x85\x63\x77\xf3\x0c\x71\xa6\xb5\x51\xb0\xb6\xd0\xdc\xbb\xbe\x76\xa0\x48\x68\xc8\x43\xa4\xd8\x3f\xd8\xef\x68\xf0\xe7\x2f\x2b\xf7\x8f\xf8\xfe\x3f\x2c\x29\xbe\x16\xb2\xdc\x6b\x6c\x97\x1c\x6e\xd0\x47\x9c\x83\xbc\xbb\x9c\x8b\xf5\xfa\xa0\x3f\x2d\xd9\x47\x39\x45\xf6\x1e\x8d\x11\xbb\x89\xc4\x06\x1b\xa5\x69\x26\x73\x1d\x98\xb7\x25\xef\x53\xb7\x76\xa9\xe3\x47\x39\x89\xb6\x4d\x76\xdd\x4c\xe5\x0f\x2b\x0b\xc2\x9b\x0d\xe6\x1d\x6c\x1d\xff\x10\x54\xf8\x12\xc1\xe7\x32\xde\x60\x8a\x35\x41\x5a\x08\xd5\x71\xf6\xdf\x0b\xd0\x7b\x7f\x7c\xe5\x13\xf1\x65\x4a\xf2\x19\x9d\x0b\xff\xa0\x52\xf5\x2f\x7c\x01\x69\x40\xd5\x71\xa7\x6d\xed\x72\x94\xcf\xf3\x83\x20\x78\x65\xf8\xcc\xf8\xe2\x45\xfa\x66\x55\x3d\x73\x5f\x18\xf6\xd5\x4e\xf9\xdf\x33\xd6\x1f\x2f\x0d\x3f\x5a\x1a\xc6\xed\x93\x87\xe9\xf7\xe1\x8f\x3e\xe8\x72\xa5\xc8\x9b\x56\xec\xdc\x9f\x00\x00\x00\xff\xff\xe7\x8e\x1d\x71\xed\x09\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 2541, mode: os.FileMode(420), modTime: time.Unix(1485864225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x43\x21\x10\x84\xe1\xbb\x55\x4c\x01\x89\x05\x24\xd5\x6c\x74\x23\x41\xd9\x85\x55\x0f\x41\xec\x3d\x48\x10\x3c\xbc\xd3\xcc\xe1\xe3\xf7\xc6\x14\xbf\x37\xfc\x17\x84\x81\xa0\x45\xed\x81\x64\xcc\xf2\xc4\x74\x5e\xb4\x6d\xb5\xef\x09\xd5\x48\x12\x2f\xe9\x7c\xe3\xda\x34\x63\xe0\x45\x21\x27\xd3\x2e\xf1\x7e\xf6\x56\x6e\x99\x37\x7d\x4a\x37\xae\x97\xd2\x38\x62\xba\x5f\x00\x00\x00\xff\xff\x5d\xf4\x8d\x91\x9a\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 154, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x5d\x8f\xdb\xc6\x15\x7d\x26\x7f\xc5\x44\x40\x02\xa9\x50\x25\x7e\x7f\x08\xf0\x4b\x6c\x07\xf5\x43\x1d\xa0\x75\x9f\x7a\x8b\x60\x86\x9c\xd9\x10\x95\x44\x95\xa4\xd2\xbb\x6b\xec\x7f\x2f\xce\x5c\x4a\xd6\xae\x37\x71\x61\x04\xc8\x83\x24\x6a\x38\x73\x3f\xcf\x39\x77\xb6\x5b\xf5\xba\x6f\xad\xba\xb3\x47\x3b\xe8\xc9\xb6\xca\xdc\xab\xbb\xfe\xcf\xa6\x3b\xb6\x7a\xd2\x9b\x70\xbb\x55\x63\x7f\x1e\x1a\x3b\xee\xf0\x3c\xd9\xc3\x69\xaf\x27\x3b\x6e\x8d\x1e\xed\xd6\xf5\xfd\x64\x87\xcd\x74\x38\xed\x5f\x78\xfb\xb3\xd5\xed\x0b\xef\xba\x63\x6b\xf9\x85\xf5\xd3\xd9\xec\xbb\x66\x3b\x4e\xf7\x7b\xbb\x69\xc6\xf1\xe9\xdb\xeb\xd3\xe6\xae\x7f\xfe\x66\x9c\xae\xe6\xde\xfc\xa8\xde\xff\xf8\x41\xbd\x7d\xf3\xee\xc3\x37\x61\x78\xd2\xcd\xbf\xf5\x9d\xfd\xb4\x39\x0c\xbb\xc3\xa9\x1f\x26\xb5\x0c\x83\x85\xb9\x9f\xec\xb8\x08\x83\x45\xd3\x1f\x4e\x83\x1d\xc7\xed\xdd\x43\x77\xc2\x82\x3b\x4c\xf8\xe9\x7a\xf9\xde\x76\xfd\x79\xea\xf6\xf8\xd3\xfb\x03\x27\x3d\xfd\xbc\x75\xdd\xde\xe2\x01\x0b\xe3\x34\x74\xc7\x3b\xff\x6e\xea\x0e\x76\x11\xae\xc2\xd0\x9d\x8f\x8d\x9a\x0b\xf9\x37\xab\xdb\x25\x1e\xd4\x3f\xff\x05\xb7\x6b\x75\xd4\x07\xab\xe4\xd8\x4a\x2d\x2f\xab\x76\x18\xfa\x61\xa5\x3e\x86\xc1\xdd\x83\xff\xa7\x76\xaf\x14\xa2\xda\xbc\xb7\xff\x85\x11\x3b\x2c\x7d\xd8\xf8\xff\xfd\xd9\x39\x3b\x78\xb3\xab\x55\x18\x74\xce\x1f\xf8\xe6\x95\x3a\x76\x7b\x98\x08\x06\x3b\x9d\x87\x23\xfe\xae\x95\x3b\x4c\x9b\xb7\xb0\xee\x96\x0b\x18\x52\xdf\xfe\x67\xa7\xbe\xfd\x65\x21\x91\x78\x5f\xab\x30\x78\x0c\xc3\xe0\x17\x3d\x28\x73\x76\x4a\xfc\x88\x93\x30\xf8\x49\xc2\x79\xa5\xba\x7e\xf3\xba\x3f\xdd\x2f\xbf\x33\x67\xb7\x56\x77\x0f\xab\x30\x68\xf6\x6f\x2f\x91\x6e\x5e\xef\xfb\xd1\x2e\x57\xe1\xef\x15\x0f\xcc\x88\xfd\x5f\x31\x64\x87\x41\xe2\x9e\x17\xcd\xd9\x6d\xbe\x47\xe8\xcb\xd5\x1a\x3b\xc2\xc7\x30\x9c\xee\x4f\x56\xe9\x71\xb4\x13\x4a\x7e\x6e\x26\x58\xf1\xf9\xcd\xfd\x08\x83\xee\xe8\x7a\xa5\xfa\x71\xf3\x43\xb7\xb7\xef\x8e\xae\xbf\x9e\x9b\x5b\x78\x59\xbf\xb1\xe0\x7b\xa8\xd4\xdc\xc6\x30\x18\xbb\x07\xff\xbf\x3b\x4e\x45\x16\x06\x07\x30\x4b\x5d\x8d\xfe\xb5\x6f\xad\x5f\xfc\xd0\x1d\xac\x02\x4c\x36\x78\x82\x1f\x0f\x95\xa5\xeb\x9e\xfb\x5a\xa9\xf7\xfa\x60\x97\xab\xd9\x03\x7c\xce\x59\xba\x6e\x03\xef\xe1\xe3\x6f\x9c\xfd\x7b\xf7\x80\xb3\x3e\x9a\xa7\x47\x11\xe8\x6f\x1e\x45\xac\xcb\xd5\x6d\xe4\x4f\x0d\x20\xb5\x2f\x19\x40\x72\xcb\xd5\xa7\x44\x3f\xb3\x30\x67\xff\xeb\x46\xde\x8d\x6f\xba\x61\xb9\x52\xa6\xef\xf7\xb7\xa7\xf5\x7e\xfc\x42\xe6\xf7\xa3\x24\x6e\x07\xa7\x1b\xfb\xf1\xf1\xe6\xf4\x0c\x09\xa0\xfc\x27\xc8\xd4\x0f\x5e\xc3\x3e\x1c\x4e\x7b\xf5\x6a\x46\xc3\x72\x41\x1c\x3b\xe2\xca\x10\x47\x15\x71\x14\xcd\x9f\x9a\xb8\xb0\xc4\xd5\xbc\xe6\x1c\xb1\x49\x88\xdb\x98\x38\x73\xc4\x4d\x4d\x9c\x34\xc4\x26\x25\xb6\xe9\xb3\x77\x5a\x7e\x75\x4d\x1c\x65\xb2\x1e\x63\x7f\x4e\x6c\x6a\xe2\xb4\x26\x2e\x0b\xe2\x2a\xba\xf1\x37\xfb\xc0\x27\x29\x89\x75\x3b\xbf\x77\xc4\x71\x71\xbb\x6f\x71\xd5\x9b\x27\x19\xcd\x3c\x78\x49\x5f\x2e\x6c\xb9\xd1\xa7\x30\x08\x9e\x55\x64\x1d\x06\xc1\xe2\xb9\xd2\x2f\xd6\x61\xb0\xba\xa2\xf6\xe9\x01\xf8\xfa\x93\x27\xda\xad\x2f\xcf\xb4\xab\x9c\xbd\x18\xe2\x97\xe4\xe2\xca\x72\xcf\x53\x58\x79\xda\xf3\x8f\x60\xc3\x4e\xbd\x10\xac\x02\xd8\x77\x2a\x49\xd6\x0a\xa8\xdd\xdd\x82\x7a\x99\x25\xd1\xca\xaf\x03\x8b\x3b\xc1\xea\x3f\x8e\x1d\x2f\xe3\xac\xca\xcb\x2a\x4d\x92\x7c\xad\xa2\xd5\x63\x18\x68\x38\xfd\xce\xa7\xf6\xd1\xe7\xb3\x53\x73\x5a\x88\x68\xe7\xbf\x1f\xaf\x65\xd5\xeb\xcf\x70\xf6\x17\xab\xdb\xaf\x46\x59\xdd\x10\x37\x8e\x38\x8d\x89\x0b\x4d\xdc\xe4\xc4\x29\xf6\x36\xc4\x51\x41\x6c\x23\xe2\xb6\x25\xd6\x25\x71\x8c\x67\x4b\x5c\x18\xe2\x06\x28\x33\xc4\xa9\x26\x8e\x33\xe2\xa6\x24\x2e\x4b\x62\x17\x13\xd7\x29\x71\x9e\x13\xeb\x86\xb8\xcd\x88\xcb\x98\xb8\x4a\x88\x75\x2e\x08\x2d\x13\x62\x67\x88\x5b\xac\x65\xc4\x06\xa8\x8d\x88\x4d\x4c\xac\x53\xe2\x24\x23\x76\xf8\xb4\xc4\xae\x91\xf5\x56\xcb\xfe\x3a\x91\xbc\xea\x9c\xb8\x4c\x89\x33\xa0\xde\x12\x27\x11\x71\x8a\x78\x6b\xc9\x3d\x47\x0e\x25\xb1\x71\xc2\x8e\xd8\x12\x9b\x52\x6c\xb6\x35\x71\x95\xc9\x1e\xdb\x12\x17\x0d\x71\xdc\x10\x67\x15\x71\x9b\x13\x37\xa9\xe4\x0d\x7b\xae\x96\x7c\xdb\x42\x98\xe6\xf7\x5a\xe2\xd2\xc9\xc7\x59\xe2\x1a\xb6\xf1\x3b\xd7\xd0\x5c\xe2\x30\xc4\x49\x22\xb1\xe2\x4c\x51\x10\x27\xf0\xdf\x10\xdb\x8c\x38\xae\x88\x75\x2c\xac\xc6\xaf\x9b\xf3\x33\x46\x7a\x65\x5a\x62\xdb\x48\xed\x2a\xf8\x8a\xa4\x9f\x1a\xfd\x42\xef\x0c\xb1\x89\x24\x6e\xe4\x69\x13\xe2\xc4\x12\xe7\x0d\x71\x51\x13\x37\x95\xf8\xd4\x11\x71\x95\x4a\xac\xb0\xd3\xc0\xae\x26\xce\x53\xe2\x06\x75\x30\xc4\x99\x96\xb3\xb0\x81\x7e\x23\xf7\xd4\x12\xb7\xa5\xf4\xab\x44\xfc\xb9\xe0\x06\x67\x90\x17\xea\x8b\x1a\x36\x86\x58\x6b\xe9\x7b\xeb\x88\xa3\x9c\xb8\xa8\xa4\xb6\x75\x21\x7d\x77\xa9\xc4\x0f\x25\x2b\x5b\xc1\xd6\x73\x25\x42\xbe\x4d\x42\x9c\x17\xc4\x79\x3b\xfb\x88\x5f\x54\xa2\x0b\xe6\xbf\x4e\x87\x2e\xa7\x3f\xa9\xd0\xf5\x46\xf9\xb9\x06\x5d\x36\xff\xbf\x0a\xf4\x2c\xb4\xdf\x55\x7f\x6e\xc2\xbc\xa8\x4f\x1d\xfd\x81\xf2\xe3\x6f\xdc\x5f\x3f\xe1\x32\xc1\x47\x06\xde\x38\xe1\xbe\xd7\x93\x48\xf4\xc4\x3a\xe1\x1f\xf4\x25\x49\x89\xeb\x8c\xd8\x1a\xe1\x27\x78\x06\x2c\xc7\xf9\xac\x0f\x99\x60\xd5\x34\x82\x45\xf0\x18\xbc\x85\x26\xe5\xa5\xf0\x41\x43\xaf\x80\x6d\x33\x6b\x5c\x26\x7b\x80\x31\xd8\x2f\x0d\x71\x9e\x10\x17\xad\x60\x1d\xbe\xc1\x45\xf0\x0d\xbc\x87\xc6\x60\xaa\x56\xb9\x4c\x54\x4c\x5c\x1f\x13\x72\xc8\x84\x6b\xe0\x58\x84\x3c\x52\xe1\x24\x74\x15\x3a\x51\xc4\xc2\x7d\xfc\x22\x36\x9c\x03\xaf\x91\xab\x4e\x64\x02\x23\x26\x70\x36\x9a\x35\x35\x9f\x27\x3a\xf2\x83\xd6\xa1\xa6\x59\x2e\x31\x42\xb7\xbd\xd6\x42\xeb\xa0\x09\x85\xe4\x9d\x25\x12\x27\x38\x88\xfa\x78\x1e\x56\xc2\xe1\xaa\x24\x4e\x73\xc9\x01\xda\x9c\x56\x72\x9b\x80\x5d\xe8\xb0\x8d\xe5\xb9\x35\xc4\x2e\x17\x1b\xb0\x0d\x1d\x03\xaf\x35\x34\xae\x15\xbd\x48\x66\xdd\x80\x96\xb8\x4a\x74\xc3\xdf\x40\x6a\xd1\x41\xcc\x8b\xaa\x20\x2e\x32\xa9\x17\xb4\x04\xfa\x19\x6b\x62\x6b\xa5\xb7\x25\xe6\x86\x95\xfa\xe2\x1d\xf8\x9f\xcc\xbd\x84\x9d\xc4\xc8\x7b\xe8\x05\xf4\x1a\xba\x63\xe6\x5a\x43\xf3\x32\x23\xf5\x6c\xd0\x1b\x2d\x33\x02\x6b\x5e\x0f\x63\xb9\x31\xa1\xfe\xe8\x47\x86\x99\xa4\x45\xd7\xea\x4a\x30\xe7\x6d\x40\xdf\x9a\x4f\x3a\x53\xcf\x1f\x8f\x47\x2d\x3d\x84\xf6\x43\xcb\x50\xfb\xba\x94\xd9\x80\x59\x02\x2c\xfa\x39\x12\xcb\x8c\xc3\x0c\x31\xf3\x5c\x4b\x2a\xc1\x3f\x70\xe0\x10\x73\x24\xbd\x89\x53\xc1\x09\xf2\x03\xde\xa1\xef\xa8\x31\xe6\x5f\xd5\x4a\xbc\x7a\xd6\x66\x68\x72\x51\xca\x6d\x0f\xb7\x32\x3d\xcf\x45\xf4\x0d\x37\x3b\x60\xcd\x95\x12\x3b\xfa\x05\x5f\x98\x85\x69\x22\xf6\x11\x1f\x66\x04\x70\xe2\x39\x32\x63\xcd\xe4\x32\x13\x90\x0f\x6a\xee\x6b\x53\x89\xee\x96\xf3\x1c\x06\x36\xd1\xd7\xdc\x8a\xdf\xea\x32\xcf\x63\xb9\x29\x02\x8f\x88\x11\x75\xc1\xad\x11\xb5\xc7\xfc\xc2\x5c\x02\xa7\xfe\x17\x00\x00\xff\xff\xd7\xbe\x6e\x6e\x00\x10\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1485864295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485783225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

