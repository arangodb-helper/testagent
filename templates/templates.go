// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/templates.go
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1485772488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1485774488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x41\x6e\xdb\x30\x10\xbc\xfb\x15\x0b\x41\xd7\x52\x48\x8e\x05\x4d\x20\xb5\x5b\x34\x68\xda\x02\x4e\x8a\x9e\x19\x69\x15\x09\x95\x48\x83\x5c\x1b\x08\x08\xfe\xbd\x20\x45\x35\xb2\xe5\xb8\x3e\xf8\x46\xed\x2c\x3d\xa3\x99\xb1\x9c\x23\xec\xb7\x9d\x24\x84\xec\x59\x5a\x2c\x1a\x94\x55\x06\xcc\xfb\xc5\x82\x37\x37\xe2\x37\x76\xa5\xee\x11\x48\xc3\x13\x5a\xba\x7b\x41\x45\xbc\x68\x6e\x44\x80\x6f\xc5\xaa\xdb\x59\x42\xc3\x8b\xe6\x36\x4c\x48\x3e\x77\x08\x65\x27\xad\x5d\x66\xbb\x16\x4a\xec\x3a\xac\xc0\x92\x69\xb7\x58\x41\x84\x33\xb1\x00\x00\xe0\x14\x98\xc6\xb3\x19\x0e\x09\x10\xf7\x6b\x5e\x50\x73\x38\x4b\xd4\xc7\xe3\x95\xd6\xa6\x6a\x95\x24\x6d\xe6\xe0\xfa\xd3\x23\x9a\x3d\x4e\x10\x5e\x8c\x5c\x61\x16\x15\x38\x07\x46\xaa\x17\x84\xbc\x87\x8f\x4b\x60\xdf\x65\xd9\xb4\x0a\x2d\x78\x7f\x4a\x5d\x25\x9c\xcb\x7b\x76\xbf\xf6\x9e\x17\x54\xbd\x41\xce\xb5\x35\xe4\x3d\xfb\x2a\x6d\xd4\x9a\xae\xa7\x5b\xa3\x2b\xce\x41\x69\xed\x06\x65\xf5\x1a\x96\x1f\x64\x32\x35\x4e\x1e\x49\xd2\x2e\x10\x67\x82\x4b\x68\x0c\xd6\x4b\xe7\xc2\x5a\x5c\xf9\xb5\x79\x00\xef\x47\x23\xa4\x38\xa6\xc7\xce\xe2\x21\xa9\xf8\x30\xdb\x51\xd5\xc5\xba\x26\xd6\x9e\x57\x37\x59\x4c\x1a\x0f\x52\x39\x56\x7a\x9e\x75\xcc\xec\x3c\xe5\xb8\x95\xf8\xde\x82\x9e\x92\x0d\x61\x3b\x07\xa8\xaa\x90\x26\x2f\x62\x03\x53\x77\x43\x9f\xed\xb5\x9b\xfb\x43\xf6\x38\xef\x61\x78\x0d\xbc\xb0\x84\x14\x4b\x18\xc5\xbd\xdb\xc0\xd1\x8b\x8c\xd0\x52\xe1\x5c\x4e\x2c\x10\x07\x9b\x26\x0f\xff\x71\x3d\x50\xfc\xfc\x06\x39\xb1\x2f\xb2\xed\x76\x06\x07\x9f\xe3\x0f\x8c\x13\xef\xa1\x4e\xc7\x4b\x6d\xdd\x60\x89\x8a\xa0\x6c\xa4\x4e\xee\xf2\xed\x70\x2f\xfe\x41\xd8\x2a\x00\xec\xae\xa4\x76\x8f\xde\xc7\x27\xe8\xb5\xfa\x83\xaf\xd0\x5a\xd0\x8a\x2d\xa6\x6d\x9e\xe1\x75\xfd\x6f\x21\x56\x99\x17\x5b\x71\xbd\xf8\x9e\xda\x53\xf1\x05\xb1\x5a\x5d\x98\x1f\xc6\xfc\x86\xb7\xfc\xbc\x47\x75\x26\x46\xe7\x72\x64\x81\xf2\x44\x56\x03\x38\x30\x4f\xe1\xf7\xcd\x9f\x7d\xca\x6b\xad\x09\x4d\xfc\x98\xff\x0d\x00\x00\xff\xff\xd0\xa0\xdd\x54\xe7\x05\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 1511, mode: os.FileMode(420), modTime: time.Unix(1485778738, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcc\xc1\x09\x43\x21\x10\x84\xe1\xbb\x55\x4c\x01\x89\x05\x24\xd5\x6c\x74\x23\x41\xd9\x85\x55\x0f\x41\xec\x3d\x48\x10\x3c\xbc\xd3\xcc\xe1\xe3\xf7\xc6\x14\xbf\x37\xfc\x17\x84\x81\xa0\x45\xed\x81\x64\xcc\xf2\xc4\x74\x5e\xb4\x6d\xb5\xef\x09\xd5\x48\x12\x2f\xe9\x7c\xe3\xda\x34\x63\xe0\x45\x21\x27\xd3\x2e\xf1\x7e\xf6\x56\x6e\x99\x37\x7d\x4a\x37\xae\x97\xd2\x38\x62\xba\x5f\x00\x00\x00\xff\xff\x5d\xf4\x8d\x91\x9a\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 154, mode: os.FileMode(420), modTime: time.Unix(1485773323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x8f\xdb\xc8\x11\x3d\x93\xbf\xa2\x57\xc0\x2e\xa4\x40\x91\xf8\xfd\x21\xc0\x97\xb5\xbd\x88\x0f\xf1\x02\x89\x73\x4a\x05\x8b\xee\x66\xf7\x2c\x11\x49\x54\x48\x6a\x53\x33\xc6\xfc\xf7\xe0\xb1\x28\x59\x33\x9e\x5d\x07\x86\x0f\x12\xc9\x66\x77\x55\xbd\xaa\x57\xaf\xb8\xdd\xaa\xd7\x5d\xe3\xd4\x9d\x3b\xba\x5e\x8f\xae\x51\xe6\x5e\xdd\x75\x7f\x36\xed\xb1\xd1\xa3\xde\x84\xdb\xad\x1a\xba\x73\x6f\xdd\xb0\xc3\xfd\xe8\x0e\xa7\xbd\x1e\xdd\xb0\x35\x7a\x70\x5b\xdf\x75\xa3\xeb\x37\xe3\xe1\xb4\x7f\xe1\xed\xaf\x4e\x37\x2f\xbc\x6b\x8f\x8d\xe3\x17\xd6\x4f\x67\xb3\x6f\xed\x76\x18\xef\xf7\x6e\x63\x87\xe1\xe9\xdb\xeb\xdd\xe6\xae\x7b\xfe\x66\x18\xaf\xe6\xde\xfc\xac\xde\xff\xfc\x41\xbd\x7d\xf3\xee\xc3\x77\x61\x78\xd2\xf6\xdf\xfa\xce\x7d\xda\x1c\x86\xed\xe1\xd4\xf5\xa3\x5a\x86\xc1\xc2\xdc\x8f\x6e\x58\x84\xc1\xc2\x76\x87\x53\xef\x86\x61\x7b\xf7\xd0\x9e\xb0\xe0\x0f\x23\x2e\x6d\x27\xff\xdb\xb6\x3b\x8f\xed\x1e\x0f\xdd\x74\xe0\xa4\xc7\x5f\xb7\xbe\xdd\x3b\xdc\x60\x61\x18\xfb\xf6\x78\x37\xbd\x1b\xdb\x83\x5b\x84\xab\x30\xf4\xe7\xa3\x55\x73\x22\xff\xe6\x74\xb3\xc4\x8d\xfa\xe7\xbf\xe0\x76\xad\x8e\xfa\xe0\x94\x1c\x5b\xa9\xe5\x65\xd5\xf5\x7d\xd7\xaf\xd4\xc7\x30\xb8\x7b\x98\x9e\xd4\xee\x95\x42\x54\x9b\xf7\xee\xbf\x30\xe2\xfa\xe5\x14\x36\x9e\x7f\x3c\x7b\xef\xfa\xc9\xec\x6a\x15\x06\xad\x9f\x0e\x7c\xf7\x4a\x1d\xdb\x3d\x4c\x04\xbd\x1b\xcf\xfd\x11\x8f\x6b\xe5\x0f\xe3\xe6\x2d\xac\xfb\xe5\x02\x86\xd4\xf7\xff\xd9\xa9\xef\x7f\x5b\x48\x24\x93\xaf\x55\x18\x3c\x86\x61\xf0\x9b\xee\x95\x39\x7b\x25\x7e\xc4\x49\x18\xfc\x22\xe1\xbc\x52\x6d\xb7\x79\xdd\x9d\xee\x97\x3f\x98\xb3\x5f\xab\xbb\x87\x55\x18\xd8\xfd\xdb\x4b\xa4\x9b\xd7\xfb\x6e\x70\xcb\x55\xf8\xad\xe2\x81\x19\xb1\xff\x3b\x86\x5c\xdf\x4b\xdc\xf3\xa2\x39\xfb\xcd\x8f\x08\x7d\xb9\x5a\x63\x47\xf8\x18\x86\xe3\xfd\xc9\x29\x3d\x0c\x6e\x44\xca\xcf\x76\x84\x95\x09\xdf\x5c\x8f\x30\x68\x8f\xbe\x53\xaa\x1b\x36\x3f\xb5\x7b\xf7\xee\xe8\xbb\xeb\xb9\xb9\x84\x97\xf5\x1b\x0b\x53\x0d\x95\x9a\xcb\x18\x06\x43\xfb\x30\x3d\xb7\xc7\xb1\xc8\xc2\xe0\x80\xce\x52\x57\xa3\x7f\xed\x1a\x37\x2d\x7e\x68\x0f\x4e\x81\x26\x1b\xdc\xc1\xcf\x44\x95\xa5\x6f\x9f\xfb\x5a\xa9\xf7\xfa\xe0\x96\xab\xd9\x03\x7c\xce\x28\x7d\xbb\x81\xf7\xf0\xf1\x0f\xce\xfe\xbd\x7d\xc0\xd9\x29\x9a\xa7\x47\x11\xe8\x1f\x1e\x45\xac\xcb\xd5\x6d\xe4\x4f\x0d\x00\xda\x97\x0c\x00\xdc\x72\xf5\x09\xe8\x67\x16\x66\xf4\xbf\x6f\xe4\xdd\xf0\xa6\xed\x97\x2b\x65\xba\x6e\x7f\x7b\x5a\xef\x87\x2f\x20\xbf\x1f\x04\xb8\xeb\xbd\xb6\xee\xe3\xe3\xcd\xe9\x99\x12\x60\xf9\x2f\x90\xa9\x9f\x26\x0d\xfb\x70\x38\xed\xd5\xab\x99\x0d\xcb\x05\x71\xec\x89\x2b\x43\x1c\x55\xc4\x51\x34\xff\x6a\xe2\xc2\x11\x57\xf3\x9a\xf7\xc4\x26\x21\x6e\x62\xe2\xcc\x13\xdb\x9a\x38\xb1\xc4\x26\x25\x76\xe9\xb3\x77\x5a\xae\xba\x26\x8e\x32\x59\x8f\xb1\x3f\x27\x36\x35\x71\x5a\x13\x97\x05\x71\x15\xdd\xf8\x9b\x7d\xe0\x97\x94\xc4\xba\x99\xdf\x7b\xe2\xb8\xb8\xdd\xb7\xb8\xea\xcd\x13\x44\x73\x1f\xbc\xa4\x2f\x97\x6e\xb9\xd1\xa7\x30\x08\x9e\x65\x64\x1d\x06\xc1\xe2\xb9\xd2\x2f\xd6\x61\xb0\xba\xb2\xf6\xe9\x01\xf8\xfa\xd3\xd4\x68\xb7\xbe\xa6\x4e\xbb\xca\xd9\x8b\x21\x7e\x49\x2e\xae\x5d\x3e\xf5\x29\xac\x3c\xad\xf9\x47\x74\xc3\x4e\xbd\x10\xac\x02\xd9\x77\x2a\x49\xd6\x0a\xac\xdd\xdd\x92\x7a\x99\x25\xd1\x6a\x5a\x07\x17\x77\xc2\xd5\x7f\x1c\x5b\x5e\xc6\x59\x95\x97\x65\x92\x55\xd5\x5a\x45\xab\xc7\x30\xd0\x70\xfa\xc3\x04\xed\xe3\x84\x67\xa7\x66\x58\x88\x68\x37\xfd\x3f\x5e\xd3\xaa\xd7\x9f\xf1\xec\x2f\x4e\x37\x5f\xcd\xb2\xda\x12\x5b\x4f\x9c\xc6\xc4\x85\x26\xb6\x39\x71\x8a\xbd\x96\x38\x2a\x88\x5d\x44\xdc\x34\xc4\xba\x24\x8e\x71\xef\x88\x0b\x43\x6c\xc1\x32\x43\x9c\x6a\xe2\x38\x23\xb6\x25\x71\x59\x12\xfb\x98\xb8\x4e\x89\xf3\x9c\x58\x5b\xe2\x26\x23\x2e\x63\xe2\x2a\x21\xd6\xb9\x30\xb4\x4c\x88\xbd\x21\x6e\xb0\x96\x11\x1b\xb0\x36\x22\x36\x31\xb1\x4e\x89\x93\x8c\xd8\xe3\xd7\x10\x7b\x2b\xeb\x8d\x96\xfd\x75\x22\xb8\xea\x9c\xb8\x4c\x89\x33\xb0\xde\x11\x27\x11\x71\x8a\x78\x6b\xc1\x9e\x03\x43\x49\x6c\xbc\x74\x47\xec\x88\x4d\x29\x36\x9b\x9a\xb8\xca\x64\x8f\x6b\x88\x0b\x4b\x1c\x5b\xe2\xac\x22\x6e\x72\x62\x9b\x0a\x6e\xd8\xf3\xb5\xe0\x6d\x0a\xe9\xb4\x69\xaf\x23\x2e\xbd\xfc\xbc\x23\xae\x61\x1b\xd7\x39\x87\xe6\x12\x87\x21\x4e\x12\x89\x15\x67\x8a\x82\x38\x81\x7f\x4b\xec\x32\xe2\xb8\x22\xd6\xb1\x74\x35\xae\x7e\xc6\x67\x8c\xd4\xca\x34\xc4\xce\x4a\xee\x2a\xf8\x8a\xa4\x9e\x1a\xf5\x42\xed\x0c\xb1\x89\x24\x6e\xe0\x74\x09\x71\xe2\x88\x73\x4b\x5c\xd4\xc4\xb6\x12\x9f\x3a\x22\xae\x52\x89\x15\x76\x2c\xec\x6a\xe2\x3c\x25\xb6\xc8\x83\x21\xce\xb4\x9c\x85\x0d\xd4\x1b\xd8\x53\x47\xdc\x94\x52\xaf\x12\xf1\xe7\xc2\x1b\x9c\x01\x2e\xe4\x17\x39\xb4\x86\x58\x6b\xa9\x7b\xe3\x89\xa3\x9c\xb8\xa8\x24\xb7\x75\x21\x75\xf7\xa9\xc4\x0f\x25\x2b\x1b\xe1\xd6\x73\x25\x02\x5e\x9b\x10\xe7\x05\x71\xde\xcc\x3e\xe2\x17\x95\xe8\xc2\xf9\xaf\xd3\xa1\xcb\xe9\x4f\x2a\x74\xfd\xa2\xfc\x5c\x83\x2e\x9b\xff\x5f\x05\x7a\x16\xda\x37\xd5\x9f\x9b\x30\x2f\xea\x53\x47\x5f\x21\x3f\xd9\x37\x92\x9f\xe9\x8b\xfb\xab\xb5\x07\xfa\x90\x67\xc4\x59\x2c\xef\x1a\x23\xda\x03\x9d\x31\x56\x34\x22\x06\xe7\x8c\xec\x01\x17\xf3\x44\xf8\x5e\x39\xe1\x59\xd6\x48\xef\x9b\x5c\x78\x9c\x66\xc2\x3d\xe8\x45\x84\xbd\xf0\xa9\xa5\x47\x31\x15\xd1\x17\x93\xcd\x5a\xfa\x72\xb2\x95\x4a\xcf\xc4\x97\x98\x2b\xe9\x15\x33\xdb\xce\xa0\x89\xb9\x4c\x5d\x87\x6b\x25\xbd\xe1\x2b\xe2\xac\x10\x9e\x63\x3a\xa7\x8d\xe8\x57\x5d\x8b\x66\x41\x5b\x93\x54\x7a\x18\xda\x53\x37\xa2\x6d\xd0\x1e\xac\xe5\x35\x71\xae\xe5\x6c\x8c\x18\x33\xd1\x4d\xf4\x86\x9d\xf1\x43\x8f\xd1\xff\x69\x29\x3f\x37\xdf\x97\x73\x5f\x39\xe0\x8a\x05\x07\x74\x2b\x4e\xc5\xa6\xd1\xc4\xe5\x9c\x37\xc4\x8f\x7c\x22\x2f\xc8\x73\x96\xc9\xb4\x2f\xbc\xd8\x47\xef\x22\xf7\x88\x27\x4b\xc4\x0e\xea\xe7\x0a\xd1\x81\x6c\xd6\x46\x60\x86\xc6\x23\x3f\xd0\x82\xcb\x97\x03\x7a\x15\x3a\x03\xdd\xc2\xd7\x03\xb4\x04\xf8\x30\x1b\x50\x63\x1b\x89\xae\x21\xf7\xc8\x43\x5e\x49\x5c\xc8\x43\x9a\x4a\xae\x2e\x3c\x81\xee\x62\x9e\xd4\xc0\x53\x88\x36\xc6\xb3\xc6\xa3\x66\xe0\x86\x2f\x45\x93\x73\x27\xfa\x83\x39\x90\xc2\xa6\x91\x79\x83\x59\x84\xaf\x24\xd4\x17\xba\xad\x0b\xd1\x65\x3c\x23\xff\x45\x23\xd8\xe0\xcb\x03\x7b\x2a\x75\xaa\xb5\xd4\x10\x9c\x81\x1f\xd8\xaf\xec\xac\xa7\xb1\x60\x03\x77\xe0\x0b\xda\x87\xda\x23\x77\x71\x29\x58\x90\xe3\xaa\x14\x8d\x45\x2c\x45\x24\x7a\x88\x5c\x61\xe6\x60\xce\x45\x5a\x66\x40\x59\xc9\xfc\x40\xae\x26\xad\xcb\xe7\x59\x6c\xa4\x6e\xa8\x2f\x34\xdd\x17\x33\x77\x4b\xe9\x15\x70\x12\xb9\xb3\x4e\x38\x0f\x5e\x62\x96\x20\x6e\xf0\x25\xd1\x82\x0f\x79\x00\x1e\xed\x64\x76\xa3\x37\xa6\xd9\x6a\xe4\xec\xd4\x73\xb5\x70\x17\x7c\x43\x8c\x3e\x9f\x79\x58\x48\x0f\x17\xb0\x9b\x88\x8f\x29\x27\x4e\xe6\x6d\x33\xcf\x19\xe4\xa8\x28\x85\x9f\x13\xde\x4a\xbe\x1b\x90\xf3\xff\x05\x00\x00\xff\xff\x67\xc5\x35\x14\x00\x10\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1485778744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485774560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"templates.go": templatesGo,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

