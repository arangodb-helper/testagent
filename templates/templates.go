// Code generated by go-bindata.
// sources:
// templates/base/footer.tmpl
// templates/base/head.tmpl
// templates/chaos.tmpl
// templates/index.tmpl
// templates/public/style.css
// templates/test.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseFooterTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xb2\xd1\x4f\xca\x4f\xa9\x04\xd1\x19\x25\xb9\x39\x76\x80\x00\x00\x00\xff\xff\x27\xad\x80\x0f\x16\x00\x00\x00")

func baseFooterTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseFooterTmpl,
		"base/footer.tmpl",
	)
}

func baseFooterTmpl() (*asset, error) {
	bytes, err := baseFooterTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/footer.tmpl", size: 22, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHeadTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x6a\xc5\x30\x0c\x06\xe0\xdd\xa7\x10\xde\x6b\xc1\x1b\x3a\x14\xc7\x77\xf1\x93\x55\xac\xd4\x71\x82\xa5\x04\x72\xfb\xd2\xa4\xb4\xd0\xb1\xa3\x24\xf4\xfd\xfc\xb1\xda\xd2\x92\x8b\x95\x73\x49\x0e\x20\x36\xe9\x1f\x50\x07\xbf\x4f\x1e\xb7\xfd\xd9\x84\x50\xed\x6c\x1c\x48\xd5\xc3\xe0\x36\xf9\x6b\xd6\xca\x6c\x1e\x7f\x7f\xfe\x9e\xbe\x91\x6a\xb6\xe9\x1b\x22\x95\x1e\x66\x2d\xdc\xe4\x18\xa1\xb3\xa1\xf2\x92\xbb\x09\xbd\xec\x82\x8f\xf0\x08\xaf\x3f\x9b\xb0\x48\xbf\xe2\x2e\x5c\x69\xc8\x66\xa0\x83\xfe\x8f\xcd\xea\x53\xc4\x5b\x4a\x2e\xe2\xdd\x36\x3e\xd7\x72\x7e\x65\x00\xc4\x22\x07\x50\xcb\xaa\x93\xdf\x05\x68\xed\x96\xa5\xf3\xf0\xc9\x7d\x06\x00\x00\xff\xff\xbd\xc2\x56\x5d\x22\x01\x00\x00")

func baseHeadTmplBytes() ([]byte, error) {
	return bindataRead(
		_baseHeadTmpl,
		"base/head.tmpl",
	)
}

func baseHeadTmpl() (*asset, error) {
	bytes, err := baseHeadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base/head.tmpl", size: 290, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _chaosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xc1\xca\xdb\x30\x10\x84\xef\x7e\x8a\xc5\xe4\x6c\x91\x1c\x8b\x22\x28\xa5\xd7\x52\xd2\xd2\xbb\x62\xad\x23\x51\x59\x32\xd2\x3a\x50\x54\xbd\x7b\x91\xec\x10\xb7\xe9\x1f\x72\xf8\x7d\xb2\x77\xd6\xb3\xb3\x9f\xad\x94\x08\xc7\xc9\x4a\x42\x68\xcf\x32\x22\xd3\x28\x55\x0b\x5d\xce\x4d\xc3\xf5\x5e\x7c\xd2\xd2\x47\x18\xbd\xfb\x89\xbf\x38\xd3\x7b\xd1\x34\x7c\x12\x0d\x00\xc0\x56\x02\x13\x21\xa5\xae\x96\xba\x6f\x24\x09\x73\xee\x6a\x57\x4a\x66\x80\x55\xf8\xd8\x93\xb9\x62\xce\x55\x28\x17\x97\xa0\x03\x0e\xc7\x96\xf5\xa5\x81\x4d\x72\x8e\xd8\x42\x6f\x65\x8c\xc7\x76\x36\x30\x1a\x67\x20\x98\x8b\x26\x18\xac\x97\x84\x0a\xce\x33\x91\x77\xad\xf8\x5a\x7a\x39\x93\x62\x1d\x83\x36\x3e\xb3\x0e\x18\xe7\xf1\x55\xef\x53\x6d\xde\x9a\x3b\x95\x73\xc3\xd9\x54\xf6\xd7\x07\x51\x56\x34\x91\x4c\x1f\x39\xd3\x87\x52\x24\x79\xb6\xb8\x71\xef\xd1\x5a\x54\x10\x29\x98\x09\x15\x54\xb9\x5d\xec\x38\x15\xc8\xb7\xfb\x20\xee\x99\x49\xdf\x9d\x39\x23\xfd\xb7\xf4\x43\xda\x19\xef\x65\xce\x6e\xef\x96\x5a\x75\x4c\x09\x82\x74\x17\x84\x5d\x24\xf8\x70\x84\xcd\x07\x59\xd2\xc2\x4a\xe8\x9f\xb1\x4a\xa4\xb4\x8b\xd4\x7d\x91\x23\xe6\xcc\x19\xa9\xff\xa9\x75\xfe\x56\x5e\x12\xa4\x04\xe8\x14\x54\x3e\x75\xcd\x95\xd1\x09\x7b\x74\x04\x15\xff\x7b\x53\xfa\x6e\x46\x7c\x04\x54\xfe\x2f\xef\x5e\x24\x84\x1b\x40\x9f\xaf\xe8\xe8\x29\x1c\xec\xca\x48\xf8\x0d\x83\x0f\xa3\xa4\xf2\xf0\x06\x28\xec\x96\x18\xaf\x81\x7a\x38\x7f\x83\xf7\x84\xa1\x9e\xc0\x3f\x01\x00\x00\xff\xff\x85\xfa\xc8\xa7\x9c\x03\x00\x00")

func chaosTmplBytes() ([]byte, error) {
	return bindataRead(
		_chaosTmpl,
		"chaos.tmpl",
	)
}

func chaosTmpl() (*asset, error) {
	bytes, err := chaosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "chaos.tmpl", size: 924, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xdf\x8f\x9c\x36\x10\x7e\xdf\xbf\x62\x84\xf6\xb5\x58\xc9\x63\xc4\x21\x5d\x6f\x1b\xe5\xd4\x4b\x1a\xed\xdd\xb5\xcf\x5e\x18\x16\xab\x06\x23\x7b\xb8\xb4\x72\xf9\xdf\x2b\x1b\x43\x60\xe1\x4e\x44\xdd\xee\x13\x3b\x3f\x3c\x9e\xf9\x3e\x7f\xb6\xb5\x84\x55\x23\x39\x21\x44\x27\x6e\x90\x95\xc8\xf3\x08\xe2\xae\xdb\xed\x92\xf2\x5d\xfa\x07\xca\x4c\x55\x08\xa4\xe0\x09\x0d\xdd\x9e\xb1\xa6\x84\x95\xef\xd2\x5d\xd2\xa4\xbb\xfb\xc3\x07\xb0\x36\xbe\x3f\x74\xdd\x2e\x39\x69\x96\xee\x9e\x1b\x6f\x79\x6e\x48\x54\x38\x5a\x7f\x47\x6d\x84\xaa\xbd\x2b\x7c\xdf\xd7\x85\x72\x7e\xd6\xa4\xae\xd2\xfb\xf4\x4e\xb6\x86\x50\x27\xac\x7c\xef\x2c\xc4\x4f\x12\x21\x93\xdc\x98\x9b\xa8\x15\x90\xa1\x94\x98\x83\x21\x2d\x1a\xcc\xc1\xbb\xa3\x74\x07\x00\x90\x90\xdb\xf4\xf0\xad\xfb\x8f\xe0\x48\xef\x0f\x09\xa3\x72\x6e\xbb\xd3\xc8\x09\x73\xf6\x48\x5c\x13\xe6\x09\xa3\x7c\x1e\x10\xda\x5c\xe4\x29\xa5\x73\x51\x73\x52\x7a\xe9\x3c\xfc\xfc\x88\xfa\x05\x27\x9e\x84\x0d\x9b\x71\x36\xbf\x45\x6b\x41\xf3\xfa\x8c\xb0\xaf\xe0\xc3\x0d\xc4\x9f\x79\x56\x8a\x1a\x0d\x74\xdd\xda\xf6\x27\xdb\x72\x3f\x6b\xf7\x55\x3f\xec\xa9\x35\xe1\x50\x6a\x2c\x6e\x22\x26\xd5\xd9\xb0\x31\x88\x55\xfd\xe2\x11\x90\x20\x89\x37\xd1\x83\x3a\x9b\x28\x4d\xc4\x30\xd5\x42\x48\x04\xc2\xbf\x08\x54\x4b\x52\xd4\x08\x22\x53\x75\x94\x26\x4c\xa4\x09\xe3\xe9\xb6\x2a\x35\xd2\x37\xa5\xff\x1c\xab\x7c\xe9\xff\x83\xbc\xa8\xf6\x4d\x14\xe2\xb5\x02\x97\x08\xac\xf5\x1d\x40\xbb\xa5\x8b\xf6\xd9\x32\x34\xe0\x3a\x0b\x9d\x97\xb0\x56\x14\xb0\xaf\xe2\x4f\xdc\x78\xac\xa7\x81\x94\x0f\x5b\xb6\x16\x32\x63\x8e\xc8\xf3\xbf\x5d\xf0\x03\x0f\x07\xc0\x5b\x1e\x89\x53\xeb\x80\x8b\xd6\x07\x65\xad\xcb\xf1\xf1\xcf\xc7\x07\xe8\xba\x81\x55\x5b\x07\xcb\x5d\xf8\x7f\x07\xef\xb2\x71\x94\x06\xe7\xed\xa6\x3f\x2d\x62\xea\x7c\xf3\x44\x26\x87\xe2\x07\xe6\x32\xc9\x0a\xd3\x99\x1d\xae\xad\x33\xca\xbe\x27\x5d\x7b\x52\x6f\x77\x3d\x9c\xf6\x1f\x68\x79\x48\x09\xfd\x7e\xd7\x8b\xad\xcd\xe6\x27\xe3\x33\xae\xd9\x69\xaf\x51\xd6\x02\xd6\x39\x78\x3d\xf6\xca\x1a\x34\xd9\x49\xbe\xb9\xb6\x22\x7f\xe1\x15\x2e\xe5\xd3\xcd\x70\xc5\x7c\x9b\x91\x50\xb5\xd9\x28\xaa\xe4\x45\xd5\xef\x7a\xa2\xa8\x73\x18\x9d\xf7\xb7\x5f\x61\x4f\xf1\x47\x2e\x64\xab\xf1\x02\xb8\x85\xfa\x8c\x78\x10\x1a\x72\x70\x50\xec\x5a\x70\x49\x93\x3f\xaf\xc3\x78\x99\xc6\x7a\x65\x9c\x05\xfb\x84\x4d\x38\xce\x6b\xbc\x2d\xa2\xbe\xe8\xd0\x65\xd7\x41\x11\x3e\x5f\x89\x0c\xb3\x76\xbd\x6c\xa3\xc7\xc7\x71\xbd\xeb\x32\xe4\x49\xac\x31\xe4\x33\x1a\xc3\xcf\x2b\x8e\x23\x36\x4a\xd3\x46\x8a\x68\x4f\x91\x3e\xe5\xf5\x6b\xd7\xda\xbd\x8e\x9f\x44\x0f\xec\xca\xb0\x74\x1c\x76\xb3\xe6\x1f\x91\xf7\x81\x9f\x8e\x58\x04\xae\xe8\xf8\x2b\xa7\xb2\xe7\xca\xd6\x19\x1f\x31\xc3\x9a\x20\x2b\xb9\x0a\x73\x76\x0f\x2f\x97\xd7\xab\x8e\x7f\x53\xdd\x39\x6f\xec\x8f\x50\xe8\xc8\x5f\x70\xc1\xee\x70\x7d\x99\x69\xfe\xa8\x30\x7e\x59\xd6\xf0\xd6\x60\x34\x01\xae\x12\xb5\x00\x2d\xce\x25\x41\x21\x95\xbb\x76\xe1\xd4\x12\x39\x0e\x7e\x75\xb1\x23\xef\x96\xd7\xc9\xc5\xd2\x1a\x4d\x5b\x6d\x5d\xfb\xe8\x83\xa7\x8b\x8f\xf7\x50\xff\x8e\x5c\xa9\x10\xa5\x07\x24\x2e\xa4\xf1\x69\xe1\x39\xf9\xff\x12\xb1\x3f\x27\x1b\xf9\x86\x9e\x6f\x3d\x10\xbf\xbc\x60\xfd\x36\xe9\xd0\x93\x0e\xfe\x81\x42\xe9\x8a\xd3\x1b\x0c\xc4\x70\x5c\xb7\x9d\xd6\xc5\x33\xbf\x50\x8a\xdc\x4d\x12\x77\xdd\xbf\x01\x00\x00\xff\xff\x1d\xfe\x3e\xaf\x03\x0c\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3075, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xcc\x31\x0a\xc3\x30\x0c\x85\xe1\x3d\xa7\x78\x63\x0b\xae\x31\x81\x2c\xed\x69\x94\x44\x15\x25\x41\x02\xc5\x19\x4a\xe8\xdd\x8b\xa9\x0d\x5d\x32\x49\xc3\xf7\xbf\xe8\x4c\xf3\x3b\xe0\x77\x41\x38\x30\xd9\x6a\x7e\x87\x38\xb3\x3e\xf0\xe9\xa2\x5a\x6e\xaa\xbd\xff\xd0\x9c\x54\xb8\xc8\x2e\x66\xde\xb2\x2d\x38\x30\xd2\xb4\x88\xdb\xae\xf3\xad\x32\x97\x91\x2e\x29\xf4\xc3\x10\x52\x48\xb1\xbf\x96\xe9\xe2\x9f\xf4\x5a\x77\xe7\xed\xbc\xaa\x4d\xab\xbe\x01\x00\x00\xff\xff\x74\xca\x77\x00\xb4\x00\x00\x00")

func publicStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_publicStyleCss,
		"public/style.css",
	)
}

func publicStyleCss() (*asset, error) {
	bytes, err := publicStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/style.css", size: 180, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xce\xb1\xce\x83\x30\x0c\x04\xe0\x3d\x4f\x61\xa1\xcc\x41\xac\x28\x64\xfc\xb7\xbf\x53\x5f\xc0\x15\x2e\x41\x22\x10\x11\xb7\x1d\x2c\xbf\x7b\x45\x10\x53\xc7\x93\x3e\xdd\x9d\x08\x53\xca\x0b\x32\x41\xf3\xc0\x42\x6d\x24\x1c\x1b\x70\xaa\xc6\x88\x7c\x66\x8e\x60\xb9\x1f\xc0\xdd\xa9\xb0\xaa\xf1\xb1\x0b\x22\x96\xdd\x0d\x13\xa9\xfa\x36\x76\xc1\xf8\x71\x7e\x07\x03\x00\xe0\x73\xf8\xc3\x79\x79\xed\x54\x7a\xa8\xee\x8a\x87\xcd\x27\x12\xd9\x71\x9d\x08\x6c\x82\x7e\x00\xcb\xee\x9f\x4a\xc1\xa9\x9a\x7c\xb4\xa7\x13\x8b\xd0\x3a\x1e\x9b\x6d\xed\xbf\xa2\xf9\xf9\xfc\xdc\x36\xa6\xbd\xbe\xfe\x06\x00\x00\xff\xff\x16\x62\x6e\x7b\xd0\x00\x00\x00")

func testTmplBytes() ([]byte, error) {
	return bindataRead(
		_testTmpl,
		"test.tmpl",
	)
}

func testTmpl() (*asset, error) {
	bytes, err := testTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test.tmpl", size: 208, mode: os.FileMode(420), modTime: time.Unix(1486974991, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base/footer.tmpl": baseFooterTmpl,
	"base/head.tmpl": baseHeadTmpl,
	"chaos.tmpl": chaosTmpl,
	"index.tmpl": indexTmpl,
	"public/style.css": publicStyleCss,
	"test.tmpl": testTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base": &bintree{nil, map[string]*bintree{
		"footer.tmpl": &bintree{baseFooterTmpl, map[string]*bintree{}},
		"head.tmpl": &bintree{baseHeadTmpl, map[string]*bintree{}},
	}},
	"chaos.tmpl": &bintree{chaosTmpl, map[string]*bintree{}},
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
	"public": &bintree{nil, map[string]*bintree{
		"style.css": &bintree{publicStyleCss, map[string]*bintree{}},
	}},
	"test.tmpl": &bintree{testTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

